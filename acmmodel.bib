
@inproceedings{bai_formal_2018,
	address = {New York, NY, USA},
	series = {{ICSCA} 2018},
	title = {Formal {Modeling} and {Verification} of {Smart} {Contracts}},
	isbn = {978-1-4503-5414-1},
	url = {https://doi.org/10.1145/3185089.3185138},
	doi = {10.1145/3185089.3185138},
	abstract = {Smart contracts can automatically perform the contract terms according to the received information, and it is one of the most important research fields in digital society. The core of smart contracts is algorithm contract, that is, the parties reach an agreement on the contents of the contract and perform the contracts according to the behaviors written in certain computer algorithms. It not only needs to make sure about the correctness of smart contracts code, but also should provide a credible contract code execution environment. Blockchain provides a trusted execution and storage environment for smart contracts by the distributed secure storage, consistency verification and encryption technology. Current challenge is how to assure that smart contract can be executed as the parties' willingness. This paper introduces formal modeling and verification in formal methods to make smart contract model and verify the properties of smart contracts. Formal methods combined with smart contracts aim to reduce the potential errors and cost during contract development process. The description of a general and formal smart contract template is provided. The tool of model checking, SPIN, is used to verify the correctness and necessary properties for a smart contract template. The research shows model checking will be useful and necessary for smart contracts.},
	booktitle = {Proceedings of the 2018 7th {International} {Conference} on {Software} and {Computer} {Applications}},
	publisher = {Association for Computing Machinery},
	author = {Bai, Xiaomin and Cheng, Zijing and Duan, Zhangbo and Hu, Kai},
	year = {2018},
	note = {event-place: Kuantan, Malaysia},
	keywords = {Smart contracts, Formal methods, Formal Verification, Model checking, Modeling, SPIN},
	pages = {322--326},
}

@inproceedings{zhang_reentrancy_2023,
	address = {New York, NY, USA},
	series = {{ASE} '22},
	title = {Reentrancy {Vulnerability} {Detection} and {Localization}: {A} {Deep} {Learning} {Based} {Two}-{Phase} {Approach}},
	isbn = {978-1-4503-9475-8},
	url = {https://doi.org/10.1145/3551349.3560428},
	doi = {10.1145/3551349.3560428},
	abstract = {Smart contracts have been widely and rapidly used to automate financial and business transactions together with blockchains, helping people make agreements while minimizing trusts. With millions of smart contracts deployed on blockchain, various bugs and vulnerabilities in smart contracts have emerged. Following the rapid development of deep learning, many recent studies have used deep learning for vulnerability detection to conduct security checks before deploying smart contracts. These approaches show effective results on detecting whether a smart contract is vulnerable or not whereas their results on locating suspicious statements responsible for the detected vulnerability are still unsatisfactory. To address this problem, we propose a deep learning based two-phase smart contract debugger for reentrancy vulnerability, one of the most severe vulnerabilities, named as ReVulDL: Reentrancy Vulnerability Detection and Localization. ReVulDL integrates the vulnerability detection and localization into a unified debugging pipeline. For the detection phase, given a smart contract, ReVulDL uses a graph-based pre-training model to learn the complex relationships in propagation chains for detecting whether the smart contract contains a reentrancy vulnerability. For the localization phase, if a reentrancy vulnerability is detected, ReVulDL utilizes interpretable machine learning to locate the suspicious statements in smart contract to provide interpretations of the detected vulnerability. Our large-scale empirical study on 47,398 smart contracts shows that ReVulDL achieves promising results in detecting reentrancy vulnerabilities (e.g., outperforming 16 state-of-the-art vulnerability detection approaches) and locating vulnerable statements (e.g., 70.38\% of the vulnerable statements are ranked within Top-10).},
	booktitle = {Proceedings of the 37th {IEEE}/{ACM} {International} {Conference} on {Automated} {Software} {Engineering}},
	publisher = {Association for Computing Machinery},
	author = {Zhang, Zhuo and Lei, Yan and Yan, Meng and Yu, Yue and Chen, Jiachi and Wang, Shangwen and Mao, Xiaoguang},
	year = {2023},
	note = {event-place: Rochester, MI, USA},
	keywords = {Smart contract, vulnerability detection, fault localization, reentrancy vulnerability},
}

@inproceedings{tolmach_property-based_2023,
	address = {New York, NY, USA},
	series = {{ASE} '22},
	title = {Property-{Based} {Automated} {Repair} of {DeFi} {Protocols}},
	isbn = {978-1-4503-9475-8},
	url = {https://doi.org/10.1145/3551349.3559560},
	doi = {10.1145/3551349.3559560},
	abstract = {Programming errors enable security attacks on smart contracts, which are used to manage large sums of financial assets. Automated program repair (APR) techniques aim to reduce developers’ burden of manually fixing bugs by automatically generating patches for a given issue. Existing APR tools for smart contracts focus on mitigating typical smart contract vulnerabilities rather than violations of functional specification. However, in decentralized financial (DeFi) smart contracts, the inconsistency between intended behavior and implementation translates into the deviation from the underlying financial model, resulting in monetary losses for the application and its users. In this work, we propose DeFinery—a technique for automated repair of a smart contract that does not satisfy a user-defined correctness property. To explore a larger set of diverse patches while providing formal correctness guarantees w.r.t. the intended behavior, we combine search-based patch generation with semantic analysis of an original program for inferring its specification. Our experiments in repairing 9 real-world and benchmark smart contracts prove that DeFinery efficiently generates high-quality patches that cannot be found by other existing tools.},
	booktitle = {Proceedings of the 37th {IEEE}/{ACM} {International} {Conference} on {Automated} {Software} {Engineering}},
	publisher = {Association for Computing Machinery},
	author = {Tolmach, Palina and Li, Yi and Lin, Shang-Wei},
	year = {2023},
	note = {event-place: Rochester, MI, USA},
	keywords = {Smart contract, program repair, symbolic execution},
}

@inproceedings{hamdaqa_icontractml_2020,
	address = {New York, NY, USA},
	series = {{SAM} '20},
	title = {{IContractML}: {A} {Domain}-{Specific} {Language} for {Modeling} and {Deploying} {Smart} {Contracts} onto {Multiple} {Blockchain} {Platforms}},
	isbn = {978-1-4503-8140-6},
	url = {https://doi.org/10.1145/3419804.3421454},
	doi = {10.1145/3419804.3421454},
	abstract = {Smart contracts are immutable digital programs deployed onto blockchain platforms to codify agreements. They enable blockchain technology to play a vital role in many fields, such as finance, health care, and energy. An important aspect of modeling and deploying smart contracts is to define the business process and rules that govern the agreements under which the corresponding actions are executed. Unfortunately, these models use a mix of technical and business-centric terminologies that are different based on the underlying blockchain platform that the smart contract is targeting. To address this issue, in this paper, we followed a feature-oriented domain analysis approach to identify the commonalities and variations between three of the common blockchain platforms that are used to deploy smart contracts; namely IBM Hyperledger Composer, Azure Blockchain Workbench, and Ethereum. Accordingly, we propose a reference model for smart contracts. The reference model is then realized as a modeling framework that enables developers to model and generate the structural code required to deploy a smart contract onto multiple blockchain platforms. The coverage of the proposed reference model was shown through mapping the concepts of the reference models to its corresponding constructs within each blockchain platform. Moreover, we provide three use cases to show how the proposed framework can empower developers to generate the structural code of smart contracts for the target platform through model transformation.},
	booktitle = {Proceedings of the 12th {System} {Analysis} and {Modelling} {Conference}},
	publisher = {Association for Computing Machinery},
	author = {Hamdaqa, Mohammad and Metz, Lucas Alberto Pineda and Qasse, Ilham},
	year = {2020},
	note = {event-place: Virtual Event, Canada},
	keywords = {Blockchain, Ethereum, Smart Contracts, Azure Blockchain, Domain Specific Language, Hyperledger Composer, Model-Driven Engineering},
	pages = {34--43},
}

@inproceedings{wust_ace_2020,
	address = {New York, NY, USA},
	series = {{CCS} '20},
	title = {{ACE}: {Asynchronous} and {Concurrent} {Execution} of {Complex} {Smart} {Contracts}},
	isbn = {978-1-4503-7089-9},
	url = {https://doi.org/10.1145/3372297.3417243},
	doi = {10.1145/3372297.3417243},
	abstract = {Smart contracts are programmable, decentralized and transparent financial applications. Because smart contract platforms typically support Turing-complete programming languages, such systems are often said to enable arbitrary applications. However, the current permissionless smart contract systems impose heavy restrictions on the types of computations that can be implemented. For example, the globally-replicated and sequential execution model of Ethereum requires low gas limits that make many computations infeasible.In this paper, we propose a novel system called ACE whose main goal is to enable more complex smart contracts on permissionless blockchains. ACE is based on an off-chain execution model where the contract issuers appoint a set of service providers to execute the contract code independent from the consensus layer. The primary advantage of ACE over previous solutions is that it allows one contract to safely call another contract that is executed by a different set of service providers. Thus, ACE is the first solution to enable off-chain execution of interactive smart contracts with flexible trust assumptions. Our evaluation shows that ACE enables several orders of magnitude more complex smart contracts than standard Ethereum.},
	booktitle = {Proceedings of the 2020 {ACM} {SIGSAC} {Conference} on {Computer} and {Communications} {Security}},
	publisher = {Association for Computing Machinery},
	author = {Wüst, Karl and Matetic, Sinisa and Egli, Silvan and Kostiainen, Kari and Capkun, Srdjan},
	year = {2020},
	note = {event-place: Virtual Event, USA},
	keywords = {blockchain, smart contracts, scalability},
	pages = {587--600},
}

@inproceedings{zhang_town_2016,
	address = {New York, NY, USA},
	series = {{CCS} '16},
	title = {Town {Crier}: {An} {Authenticated} {Data} {Feed} for {Smart} {Contracts}},
	isbn = {978-1-4503-4139-4},
	url = {https://doi.org/10.1145/2976749.2978326},
	doi = {10.1145/2976749.2978326},
	abstract = {Smart contracts are programs that execute autonomously on blockchains. Their key envisioned uses (e.g. financial instruments) require them to consume data from outside the blockchain (e.g. stock quotes). Trustworthy data feeds that support a broad range of data requests will thus be critical to smart contract ecosystems.We present an authenticated data feed system called Town Crier (TC). TC acts as a bridge between smart contracts and existing web sites, which are already commonly trusted for non-blockchain applications. It combines a blockchain front end with a trusted hardware back end to scrape HTTPS-enabled websites and serve source-authenticated data to relying smart contracts.TC also supports confidentiality. It enables private data requests with encrypted parameters. Additionally, in a generalization that executes smart-contract logic within TC, the system permits secure use of user credentials to scrape access-controlled online data sources.We describe TC's design principles and architecture and report on an implementation that uses Intel's recently introduced Software Guard Extensions (SGX) to furnish data to the Ethereum smart contract system. We formally model TC and define and prove its basic security properties in the Universal Composibility (UC) framework. Our results include definitions and techniques of general interest relating to resource consumption (Ethereum's "gas" fee system) and TCB minimization. We also report on experiments with three example applications.We plan to launch TC soon as an online public service.},
	booktitle = {Proceedings of the 2016 {ACM} {SIGSAC} {Conference} on {Computer} and {Communications} {Security}},
	publisher = {Association for Computing Machinery},
	author = {Zhang, Fan and Cecchetti, Ethan and Croman, Kyle and Juels, Ari and Shi, Elaine},
	year = {2016},
	note = {event-place: Vienna, Austria},
	keywords = {smart contracts, ethereum, bitcoin, authenticated data feeds, intel SGX, trusted hardware},
	pages = {270--282},
}

@inproceedings{kaleem_event_2021,
	address = {New York, NY, USA},
	series = {{DEBS} '21},
	title = {An {Event} {Driven} {Framework} for {Smart} {Contract} {Execution}},
	isbn = {978-1-4503-8555-8},
	url = {https://doi.org/10.1145/3465480.3466924},
	doi = {10.1145/3465480.3466924},
	abstract = {Blockchain-based smart contract platforms have traditionally employed the transaction-driven execution model. This paper presents an alternate framework for blockchain-based smart contract execution called EDSC. Our platform design presents a novel approach to tackle the scalability and performance challenges facing the smart contract ecosystem. We base EDSC's design on the Ethereum template, and it can be readily implemented for other existing smart contract platforms. To evaluate our design, we perform an experimental implementation using the Ethereum client. Our experiments with performance modeling show, on average, a 2.2 to 4.6 times reduced total latency of event-triggered smart contracts, demonstrating the effectiveness of the design in supporting time-sensitive applications. Additionally, we comment on the design's potential security aspects and demonstrate its utility by discussing potential use cases.},
	booktitle = {Proceedings of the 15th {ACM} {International} {Conference} on {Distributed} and {Event}-{Based} {Systems}},
	publisher = {Association for Computing Machinery},
	author = {Kaleem, Mudabbir and Kasichainula, Keshav and Karanjai, Rabimba and Xu, Lei and Gao, Zhimin and Chen, Lin and Shi, Weidong},
	year = {2021},
	note = {event-place: Virtual Event, Italy},
	keywords = {blockchain, smart contracts, scalability, event-driven architecture},
	pages = {78--89},
}

@inproceedings{yang_seraph_2020,
	address = {New York, NY, USA},
	series = {{ICSE} '20},
	title = {Seraph: {Enabling} {Cross}-{Platform} {Security} {Analysis} for {EVM} and {WASM} {Smart} {Contracts}},
	isbn = {978-1-4503-7122-3},
	url = {https://doi.org/10.1145/3377812.3382157},
	doi = {10.1145/3377812.3382157},
	abstract = {As blockchain becomes increasingly popular across various industries in recent years, many companies started designing and developing their own smart contract platforms to enable better services on blockchain. While smart contracts are notoriously known to be vulnerable to external attacks, such platform diversity further amplified the security challenge. To mitigate this problem, we designed the very first cross-platform security analyzer called Seraph for smart contracts. Specifically, Seraph enables automated security analysis for different platforms built on two mainstream virtual machine architectures, i.e., EVM and WASM. To this end, Seraph introduces a set of general connector API to abstract interactions between the virtual machine and blockchain, e.g., load and update storage data on blockchain. Moreover, we proposed the symbolic semantic graph to model critical dependencies and decoupled security analysis from contract code as well. Our preliminary evaluation on four existing smart contract platforms demonstrated the potential of Seraph in finding security threats both flexibly and accurately. A video of Seraph is available at https://youtu.be/wxixZkVqUsc.},
	booktitle = {Proceedings of the {ACM}/{IEEE} 42nd {International} {Conference} on {Software} {Engineering}: {Companion} {Proceedings}},
	publisher = {Association for Computing Machinery},
	author = {Yang, Zhiqiang and Liu, Han and Li, Yue and Zheng, Huixuan and Wang, Lei and Chen, Bangdao},
	year = {2020},
	note = {event-place: Seoul, South Korea},
	keywords = {smart contracts, connector API, symbolic semantic graph},
	pages = {21--24},
}

@inproceedings{richard_smart_2021,
	address = {New York, NY, USA},
	series = {{ICBTA} 2020},
	title = {Smart {Contract} {Development} {Model} and the {Future} of {Blockchain} {Technology}},
	isbn = {978-1-4503-8896-2},
	url = {https://doi.org/10.1145/3446983.3446994},
	doi = {10.1145/3446983.3446994},
	abstract = {Blockchain has become a mainstream technology in our society in recent years. With its nature of secure decentralization, people can create decentralized applications by developing smart contracts on top of a blockchain platform. With blockchain, technology is still in the developing phase, the smart contract development process in blockchain has its unique complexity and uncertainty. The condition will drive the challenge for any developers to work on this issue. In this research, we determine the smart contract development model in creating decentralized applications. Our proposed model aligned with our findings in the systematic mapping process of this study.},
	booktitle = {2020 the 3rd {International} {Conference} on {Blockchain} {Technology} and {Applications}},
	publisher = {Association for Computing Machinery},
	author = {Richard, Richard and Prabowo, Harjanto and Trisetyarso, Agung and Soewito, Benfano},
	year = {2021},
	note = {event-place: Xi'an, China},
	keywords = {Blockchain, Smart Contract, Smart Contract Development, Decentralized Applications, Systematic Mapping},
	pages = {34--39},
}

@inproceedings{bau_abstract_2022,
	address = {New York, NY, USA},
	series = {{SOAP} 2022},
	title = {Abstract {Interpretation} of {Michelson} {Smart}-{Contracts}},
	isbn = {978-1-4503-9274-7},
	url = {https://doi.org/10.1145/3520313.3534660},
	doi = {10.1145/3520313.3534660},
	abstract = {Static analysis of smart-contracts is becoming more widespread on blockchain platforms. Analyzers rely on techniques like symbolic execution or model checking, but few of them can provide strong soundness properties and guarantee the analysis termination at the same time. As smart-contracts often manipulate economic assets, proving numerical properties beyond the absence of runtime errors is also desirable. Smart-contract execution models differ considerably from mainstream programming languages and vary from one blockchain to another, making state-of-the-art analyses hard to adapt. For instance, smart-contract calls may modify a persistent storage impacting subsequent calls. This makes it difficult for tools to infer invariants \%and high-level security properties required to formally ensure the absence of exploitable vulnerabilities. The Michelson smart-contract language, used in the Tezos blockchain, is strongly typed, stack-based, and has a strict execution model leaving few opportunities for implicit runtime errors. We present a work in progress static analyzer for Michelson based on Abstract Interpretation and implemented within MOPSA, a modular static analyzer. Our tool supports the Michelson semantic features, including inner calls to external contracts. It can prove the absence of runtime errors and infer invariants on the persistent storage over an unbounded number of calls. It is also being extended to prove high-level numerical and security properties.},
	booktitle = {Proceedings of the 11th {ACM} {SIGPLAN} {International} {Workshop} on the {State} {Of} the {Art} in {Program} {Analysis}},
	publisher = {Association for Computing Machinery},
	author = {Bau, Guillaume and Miné, Antoine and Botbol, Vincent and Bouaziz, Mehdi},
	year = {2022},
	note = {event-place: San Diego, CA, USA},
	keywords = {blockchain, static analysis, abstract interpretation, Michelson, smart-contract, Tezos},
	pages = {36--43},
}

@inproceedings{hu_method_2018,
	address = {New York, NY, USA},
	series = {{ICDPA} 2018},
	title = {A {Method} of {Logic}-{Based} {Smart} {Contracts} for {Blockchain} {System}},
	isbn = {978-1-4503-6418-8},
	url = {https://doi.org/10.1145/3224207.3224218},
	doi = {10.1145/3224207.3224218},
	abstract = {Recently, blockchain systems have attracted intensive attentions from academia, industrial circles and governments, which make smart contract a hit since it is an important research topic for blockchain system. We propose a logic-based smart contract model Logic-SC for blockchain system based on semantics and syntax of Active-U-Datalog with some temporal extensions. Logic-SC model owns a triggering mechanism by temporal active rules, which can satisfy the expressiveness and flexibility of the smart contracts for blockchain system. The paper introduces the rules, structure of contracts and implementation of the model. Finally, an application is exampled to show the effectiveness of the model.},
	booktitle = {Proceedings of the {International} {Conference} on {Data} {Processing} and {Applications}},
	publisher = {Association for Computing Machinery},
	author = {Hu, Jingwen and Zhong, Yong},
	year = {2018},
	note = {event-place: Guangdong, China},
	keywords = {Blockchain, Smart contract, Active-U-Datalog, logic language},
	pages = {58--61},
}

@inproceedings{vukolic_rethinking_2017,
	address = {New York, NY, USA},
	series = {{BCC} '17},
	title = {Rethinking {Permissioned} {Blockchains}},
	isbn = {978-1-4503-4974-1},
	url = {https://doi.org/10.1145/3055518.3055526},
	doi = {10.1145/3055518.3055526},
	abstract = {Current blockchain platforms, especially the recent permissioned systems, have architectural limitations: smart contracts run sequentially, all node executes all smart contracts, consensus protocols are hard-coded, the trust model is static and not flexible, and non-determinism in smart-contract execution poses serious problems. Overcoming these limitations is critical for improving both functional properties of blockchains, such as confidentiality and consistency, as well as their non-functional properties, such as performance and scalability. We discuss these limitations in the context of permissioned blockchains, including an early version of the Hyperledger Fabric blockchain platform, and how a re-design of Hyperledger Fabric's architecture addresses them.},
	booktitle = {Proceedings of the {ACM} {Workshop} on {Blockchain}, {Cryptocurrencies} and {Contracts}},
	publisher = {Association for Computing Machinery},
	author = {Vukolić, Marko},
	year = {2017},
	note = {event-place: Abu Dhabi, United Arab Emirates},
	keywords = {blockchain, consensus, byzantine fault-tolerance, hyperledger fabric, system architecture},
	pages = {3--7},
}

@inproceedings{liu_tool_2021,
	address = {New York, NY, USA},
	series = {{BSCI} '21},
	title = {A {Tool} for {Moving} {Blockchain} {Computations} {Off}-{Chain}},
	isbn = {978-1-4503-8400-1},
	url = {https://doi.org/10.1145/3457337.3457848},
	doi = {10.1145/3457337.3457848},
	abstract = {This paper proposes a new approach and tool for blockchain software developers and architects to use for determining which computations of a smart contract can be effectively done off-chain without loss of trust and how they can be moved off-chain automatically. Our approach uses Finite State Machines (FSMs) and Hierarchical State Machines (HSMs) modeling in order to create smart contract patterns using graphs and then use pattern properties to identify which parts of the smart contracts should be considered for moving off-chain. Once software execution transits into the pattern's entry state, off-chain execution continues until the execution transits into the pattern's exit state, when execution continues on-chain. This paper further describes a tool for (1) FSM input and visualization, its analysis, and automatic transformation into a smart contract, and (2) an interface to support the developers' decision to optimally off-chain computations and to (3) define the communications between on-chain and off-chain computations.},
	booktitle = {Proceedings of the 3rd {ACM} {International} {Symposium} on {Blockchain} and {Secure} {Critical} {Infrastructure}},
	publisher = {Association for Computing Machinery},
	author = {Liu, Christian and Bodorik, Peter and Jutla, Dawn},
	year = {2021},
	note = {event-place: Virtual Event, Hong Kong},
	keywords = {blockchain, smart contract, FSM model, hierarchical state machine, HSM, off-chain computation, simple-graph, transformation of FSM to smart contract},
	pages = {103--109},
}

@inproceedings{yu_parallel_2018,
	address = {New York, NY, USA},
	series = {{MLMI} '18},
	title = {A {Parallel} {Smart} {Contract} {Model}},
	isbn = {978-1-4503-6556-7},
	url = {https://doi.org/10.1145/3278312.3278321},
	doi = {10.1145/3278312.3278321},
	abstract = {With the rapid development of blockchain technology, blockchain becomes a good platform for execution of smart contracts. However, since smart contracts still have a low performance of transaction processing on blockchain. It can't satisfy real-time requirements in some situations. This paper proposes a parallel smart contract model on blockchain which has a better performance in transaction processing. The challenges with the proposed approach are the implementation of the parallel mode and the solution of synchronization problem of the proposed model. This paper uses multi-thread technology to implement the proposed model where transactions are executed in parallel. Then we propose a transaction splitting algorithm to resolve the synchronization problem. Finally, experimental analysis proves that this parallel model exactly makes a remarkable development of performance in transaction processing.},
	booktitle = {Proceedings of the 2018 {International} {Conference} on {Machine} {Learning} and {Machine} {Intelligence}},
	publisher = {Association for Computing Machinery},
	author = {Yu, Wei and Luo, Kan and Ding, Yi and You, Guang and Hu, Kai},
	year = {2018},
	note = {event-place: Ha Noi, Viet Nam},
	keywords = {Blockchain, smart contract, parallel model},
	pages = {72--77},
}

@inproceedings{chen_detecting_2018,
	address = {Republic and Canton of Geneva, CHE},
	series = {{WWW} '18},
	title = {Detecting {Ponzi} {Schemes} on {Ethereum}: {Towards} {Healthier} {Blockchain} {Technology}},
	isbn = {978-1-4503-5639-8},
	url = {https://doi.org/10.1145/3178876.3186046},
	doi = {10.1145/3178876.3186046},
	abstract = {Blockchain technology becomes increasingly popular. It also attracts scams, for example, Ponzi scheme, a classic fraud, has been found making a notable amount of money on Blockchain, which has a very negative impact. To help dealing with this issue, this paper proposes an approach to detect Ponzi schemes on blockchain by using data mining and machine learning methods. By verifying smart contracts on Ethereum, we first extract features from user accounts and operation codes of the smart contracts and then build a classification model to detect latent Ponzi schemes implemented as smart contracts. The experimental results show that the proposed approach can achieve high accuracy for practical use. More importantly, the approach can be used to detect Ponzi schemes even at the moment of its creation. By using the proposed approach, we estimate that there are more than 400 Ponzi schemes running on Ethereum. Based on these results, we propose to build a uniform platform to evaluate and monitor every created smart contract for early warning of scams.},
	booktitle = {Proceedings of the 2018 {World} {Wide} {Web} {Conference}},
	publisher = {International World Wide Web Conferences Steering Committee},
	author = {Chen, Weili and Zheng, Zibin and Cui, Jiahui and Ngai, Edith and Zheng, Peilin and Zhou, Yuren},
	year = {2018},
	note = {event-place: Lyon, France},
	keywords = {blockchain, smart contract, ethereum, ponzi schemes},
	pages = {1409--1418},
}

@article{grech_madmax_2020,
	title = {{MadMax}: {Analyzing} the out-of-{Gas} {World} of {Smart} {Contracts}},
	volume = {63},
	issn = {0001-0782},
	url = {https://doi.org/10.1145/3416262},
	doi = {10.1145/3416262},
	abstract = {Ethereum is a distributed blockchain platform, serving as an ecosystem for smart contracts: full-fledged intercommunicating programs that capture the transaction logic of an account. A gas limit caps the execution of an Ethereum smart contract: instructions, when executed, consume gas, and the execution proceeds as long as gas is available.Gas-focused vulnerabilities permit an attacker to force key contract functionality to run out of gas—effectively performing a permanent denial-of-service attack on the contract. Such vulnerabilities are among the hardest for programmers to protect against, as out-of-gas behavior may be uncommon in nonattack scenarios and reasoning about these vulnerabilities is nontrivial.In this paper, we identify gas-focused vulnerabilities and present MadMax: a static program analysis technique that automatically detects gas-focused vulnerabilities with very high confidence. MadMax combines a smart contract decompiler and semantic queries in Datalog. Our approach captures high-level program modeling concepts (such as "dynamic data structure storage" and "safely resumable loops") and delivers high precision and scalability. MadMax analyzes the entirety of smart contracts in the Ethereum blockchain in just 10 hours and flags vulnerabilities in contracts with a monetary value in billions of dollars. Manual inspection of a sample of flagged contracts shows that 81\% of the sampled warnings do indeed lead to vulnerabilities.},
	number = {10},
	journal = {Commun. ACM},
	author = {Grech, Neville and Kong, Michael and Jurisevic, Anton and Brent, Lexi and Scholz, Bernhard and Smaragdakis, Yannis},
	month = sep,
	year = {2020},
	note = {Place: New York, NY, USA
Publisher: Association for Computing Machinery},
	pages = {87--95},
}

@inproceedings{ferreira_torres_aegis_2020,
	address = {New York, NY, USA},
	series = {{ASIA} {CCS} '20},
	title = {Æ{GIS}: {Shielding} {Vulnerable} {Smart} {Contracts} {Against} {Attacks}},
	isbn = {978-1-4503-6750-9},
	url = {https://doi.org/10.1145/3320269.3384756},
	doi = {10.1145/3320269.3384756},
	abstract = {In recent years, smart contracts have suffered major exploits, cost- ing millions of dollars. Unlike traditional programs, smart contracts are deployed on a blockchain. As such, they cannot be modified once deployed. Though various tools have been proposed to detect vulnerable smart contracts, the majority fails to protect vulnera- ble contracts that have already been deployed on the blockchain. Only very few solutions have been proposed so far to tackle the issue of post-deployment. However, these solutions suffer from low precision and are not generic enough to prevent any type of attack. In this work, we introduce ÆGIS, a dynamic analysis tool that protects smart contracts from being exploited during runtime. Its capability of detecting new vulnerabilities can easily be extended through so-called attack patterns. These patterns are written in a domain-specific language that is tailored to the execution model of Ethereum smart contracts. The language enables the description of malicious control and data flows. In addition, we propose a novel mechanism to streamline and speed up the process of managing attack patterns. Patterns are voted upon and stored via a smart contract, thus leveraging the benefits of tamper-resistance and transparency provided by the blockchain. We compare ÆGIS to current state-of-the-art tools and demonstrate that our solution achieves higher precision in detecting attacks. Finally, we perform a large-scale analysis on the first 4.5 million blocks of the Ethereum blockchain, thereby confirming the occurrences of well reported and yet unreported attacks in the wild.},
	booktitle = {Proceedings of the 15th {ACM} {Asia} {Conference} on {Computer} and {Communications} {Security}},
	publisher = {Association for Computing Machinery},
	author = {Ferreira Torres, Christof and Baden, Mathis and Norvill, Robert and Fiz Pontiveros, Beltran Borja and Jonker, Hugo and Mauw, Sjouke},
	year = {2020},
	note = {event-place: Taipei, Taiwan},
	keywords = {smart contracts, ethereum, exploit prevention, security updates},
	pages = {584--597},
}

@inproceedings{liu_finding_2022,
	address = {New York, NY, USA},
	series = {{ISSTA} 2022},
	title = {Finding {Permission} {Bugs} in {Smart} {Contracts} with {Role} {Mining}},
	isbn = {978-1-4503-9379-9},
	url = {https://doi.org/10.1145/3533767.3534372},
	doi = {10.1145/3533767.3534372},
	abstract = {Smart contracts deployed on permissionless blockchains, such as Ethereum, are accessible to any user in a trustless environment. Therefore, most smart contract applications implement access control policies to protect their valuable assets from unauthorized accesses. A difficulty in validating the conformance to such policies, i.e., whether the contract implementation adheres to the expected behaviors, is the lack of policy specifications. In this paper, we mine past transactions of a contract to recover a likely access control model, which can then be checked against various information flow policies and identify potential bugs related to user permissions. We implement our role mining and security policy validation in tool SPCon. The experimental evaluation on labeled smart contract role mining benchmark demonstrates that SPCon effectively mines more accurate user roles compared to the state-of-the-art role mining tools. Moreover, the experimental evaluation on real-world smart contract benchmark and access control CVEs indicates SPCon effectively detects potential permission bugs while having better scalability and lower false-positive rate compared to the state-of-the-art security tools, finding 11 previously unknown bugs and detecting six CVEs that no other tool can find.},
	booktitle = {Proceedings of the 31st {ACM} {SIGSOFT} {International} {Symposium} on {Software} {Testing} and {Analysis}},
	publisher = {Association for Computing Machinery},
	author = {Liu, Ye and Li, Yi and Lin, Shang-Wei and Artho, Cyrille},
	year = {2022},
	note = {event-place: Virtual, South Korea},
	keywords = {Smart contract, access control, information flow policy, role mining},
	pages = {716--727},
}

@inproceedings{ashizawa_eth2vec_2021,
	address = {New York, NY, USA},
	series = {{BSCI} '21},
	title = {{Eth2Vec}: {Learning} {Contract}-{Wide} {Code} {Representations} for {Vulnerability} {Detection} on {Ethereum} {Smart} {Contracts}},
	isbn = {978-1-4503-8400-1},
	url = {https://doi.org/10.1145/3457337.3457841},
	doi = {10.1145/3457337.3457841},
	abstract = {Ethereum smart contracts are programs that run on the Ethereum blockchain, and many smart contract vulnerabilities have been discovered in the past decade. Many security analysis tools have been created to detect such vulnerabilities, but their performance decreases drastically when codes to be analyzed are being rewritten. In this paper, we propose Eth2Vec, a machine-learning-based static analysis tool for vulnerability detection in smart contracts. It is also robust against code rewrites, i.e., it can detect vulnerabilities even in rewritten codes. Existing machine-learning-based static analysis tools for vulnerability detection need features, which analysts create manually, as inputs. In contrast, Eth2Vec automatically learns features of vulnerable Ethereum Virtual Machine (EVM) bytecodes with tacit knowledge through a neural network for natural language processing. Therefore, Eth2Vec can detect vulnerabilities in smart contracts by comparing the code similarity between target EVM bytecodes and the EVM bytecodes it already learned. We conducted experiments with existing open databases, such as Etherscan, and our results show that Eth2Vec outperforms a recent model based on support vector machine in terms of well-known metrics, i.e., precision, recall, and F1-score.},
	booktitle = {Proceedings of the 3rd {ACM} {International} {Symposium} on {Blockchain} and {Secure} {Critical} {Infrastructure}},
	publisher = {Association for Computing Machinery},
	author = {Ashizawa, Nami and Yanai, Naoto and Cruz, Jason Paul and Okamura, Shingo},
	year = {2021},
	note = {event-place: Virtual Event, Hong Kong},
	keywords = {smart contracts, ethereum, vulnerability detection, static analysis, code similarity, neural networks},
	pages = {47--59},
}

@inproceedings{alp_rethinking_2019,
	address = {New York, NY, USA},
	series = {{HotOS} '19},
	title = {Rethinking {General}-{Purpose} {Decentralized} {Computing}},
	isbn = {978-1-4503-6727-1},
	url = {https://doi.org/10.1145/3317550.3321448},
	doi = {10.1145/3317550.3321448},
	abstract = {While showing great promise, smart contracts are difficult to program correctly, as they need a deep understanding of cryptography and distributed algorithms, and offer limited functionality, as they have to be deterministic and cannot operate on secret data. In this paper we present Protean, a general-purpose decentralized computing platform that addresses these limitations by moving from a monolithic execution model, where all participating nodes store all the state and execute every computation, to a modular execution-model. Protean employs secure specialized modules, called functional units, for building decentralized applications that are currently insecure or impossible to implement with smart contracts. Each functional unit is a distributed system that provides a special-purpose functionality by exposing atomic transactions to the smart-contract developer. Combining these transactions into arbitrarily-defined workflows, developers can build a larger class of decentralized applications, such as provably-secure and fair lotteries or e-voting.},
	booktitle = {Proceedings of the {Workshop} on {Hot} {Topics} in {Operating} {Systems}},
	publisher = {Association for Computing Machinery},
	author = {Alp, Enis Ceyhun and Kokoris-Kogias, Eleftherios and Fragkouli, Georgia and Ford, Bryan},
	year = {2019},
	note = {event-place: Bertinoro, Italy},
	pages = {105--112},
}

@article{wang_detecting_2019,
	title = {Detecting {Nondeterministic} {Payment} {Bugs} in {Ethereum} {Smart} {Contracts}},
	volume = {3},
	url = {https://doi.org/10.1145/3360615},
	doi = {10.1145/3360615},
	abstract = {The term “smart contracts” has become ubiquitous to describe an enormous number of programs uploaded to the popular Ethereum blockchain system. Despite rapid growth of the smart contract ecosystem, errors and exploitations have been constantly reported from online contract systems, which has put financial stability at risk with losses totaling millions of US dollars. Most existing research focuses on pinpointing specific types of vulnerabilities using known patterns. However, due to the lack of awareness of the inherent nondeterminism in the Ethereum blockchain system and how it affects the funds transfer of smart contracts, there can be unknown vulnerabilities that may be exploited by attackers to access numerous online smart contracts. In this paper, we introduce a methodical approach to understanding the inherent nondeterminism in the Ethereum blockchain system and its (unwanted) influence on contract payments. We show that our new focus on nondeterminism-related smart contract payment bugs captures the root causes of many common vulnerabilities without relying on any known patterns and also encompasses recently disclosed issues that are not handled by existing research. To do so, we introduce techniques to systematically model components in the contract execution context and to expose various nondeterministic factors that are not yet fully understood. We further study how these nondeterministic factors impact contract funds transfer using information flow tracking. The technical challenge of detecting nondeterministic payments lies in discovering the contract global variables subtly affected by read-write hazards because of unpredictable transaction scheduling and external callee behavior. We show how to augment and instrument a contract program into a representation that simulates the execution of a large subset of the contract behavior. The instrumented code is then analyzed to flag nondeterministic global variables using off-the-shelf model checkers. We implement the proposed techniques as a practical tool named NPChecker (Nondeterministic Payment Checker) and evaluate it on 30K online contracts (3,075 distinct) collected from the Ethereum mainnet. NPChecker has successfully detected nondeterministic payments in 1,111 online contracts with reasonable cost. Further investigation reports high precision of NPChecker (only four false positives in a manual study of 50 contracts). We also show that NPChecker unveils contracts vulnerable to recently-disclosed attack vectors. NPChecker can identify all six new vulnerabilities or variants of common smart contract vulnerabilities that are missed by existing research relying on a “contract vulnerability checklist.”},
	number = {OOPSLA},
	journal = {Proc. ACM Program. Lang.},
	author = {Wang, Shuai and Zhang, Chengyu and Su, Zhendong},
	month = oct,
	year = {2019},
	note = {Place: New York, NY, USA
Publisher: Association for Computing Machinery},
	keywords = {Blockchain, Smart Contracts, Program Analysis, Security},
}

@inproceedings{s_evaluating_2018,
	address = {New York, NY, USA},
	series = {{WETSEB} '18},
	title = {Evaluating {Complexity} and {Digitizability} of {Regulations} and {Contracts} for a {Blockchain} {Application} {Design}},
	isbn = {978-1-4503-5726-5},
	url = {https://doi.org/10.1145/3194113.3194117},
	doi = {10.1145/3194113.3194117},
	abstract = {Blockchain technology becomes the key solution to provide trust and security without any need for a central supervisory authority to validate the transactions. By now, it plays a key role in the digital transformation of several processes and industries with varying application use cases. To promote the wide adoption of blockchain technology we need mechanisms to identify the digitizability level of the given regulations to smart contracts and mechanisms to specify which blockchain technology is best suitable for the given regulations. In this work, we propose a modeling approach that supports the automated analysis of human-readable regulation representations by suggesting how much percentage of regulation is digitizable and the suitable blockchain environment to design the application. We identify smart contract components that correspond to real-world entities and its pertaining clauses and its digitizability property. With selected examples, we explore this capability and discuss our future research directions on smart contract generation according to the recommended environment.},
	booktitle = {Proceedings of the 1st {International} {Workshop} on {Emerging} {Trends} in {Software} {Engineering} for {Blockchain}},
	publisher = {Association for Computing Machinery},
	author = {S, Pradeepkumar D and Singi, Kapil and Kaulgud, Vikrant and Podder, Sanjay},
	year = {2018},
	note = {event-place: Gothenburg, Sweden},
	keywords = {blockchain, smart contracts, digitizability complexity, regulations},
	pages = {25--29},
}

@inproceedings{liu_modcon_2020,
	address = {New York, NY, USA},
	series = {{ESEC}/{FSE} 2020},
	title = {{ModCon}: {A} {Model}-{Based} {Testing} {Platform} for {Smart} {Contracts}},
	isbn = {978-1-4503-7043-1},
	url = {https://doi.org/10.1145/3368089.3417939},
	doi = {10.1145/3368089.3417939},
	abstract = {Unlike those on public permissionless blockchains, smart contracts on enterprise permissioned blockchains are not limited by resource constraints, and therefore often larger and more complex. Current testing and analysis tools lack support for such contracts, which demonstrate stateful behaviors and require special treatment in quality assurance. In this paper, we present a model-based testing platform, called ModCon, relying on user-specified models to define test oracles, guide test generation, and measure test adequacy. ModCon is Web-based and supports both permissionless and permissioned blockchain platforms. We demonstrate the usage and key features of ModCon on real enterprise smart contract applications.},
	booktitle = {Proceedings of the 28th {ACM} {Joint} {Meeting} on {European} {Software} {Engineering} {Conference} and {Symposium} on the {Foundations} of {Software} {Engineering}},
	publisher = {Association for Computing Machinery},
	author = {Liu, Ye and Li, Yi and Lin, Shang-Wei and Yan, Qiang},
	year = {2020},
	note = {event-place: Virtual Event, USA},
	keywords = {blockchain, Smart contract, model-based testing},
	pages = {1601--1605},
}

@inproceedings{osterland_implementation_2020,
	address = {New York, NY, USA},
	series = {{ASSE} '20},
	title = {On the {Implementation} of {Business} {Process} {Logic} in {DLT} {Nodes}},
	isbn = {978-1-4503-7710-2},
	url = {https://doi.org/10.1145/3399871.3399899},
	doi = {10.1145/3399871.3399899},
	abstract = {Distributed ledger technologies (DLT) enable new forms of business collaboration while the combination with smart contracts allows for an automation of business and collaboration processes. The immutability of DLT secures the execution of business processes. Hence, any process automation or resource management activities are tamper-proof. Yet, a widespread use can only takeoff, if business process experts can directly use this new form of technology, since business process experts are not necessarily programming experts. Thus, we argue for a high-level business process modeling to allow an application-oriented formulation of business collaboration. Hence it is important to research the instantiation and execution of business processes on DLTs, which are formulated in conventional notations.Existing approaches for process implementation on DLTs build-upon state machines that encode the process flow in smart contracts. Thereby every process instantiation requires the creation of a new smart contract with its state machine. In contrast we propose a variant of process implementation that builds-upon an extending kernel. The execution logic is encoded as a core function in the validation routine of DLT nodes. Going down this avenue, the process flow is specified inside transactions and the validation routine will ensure that the process is correctly executed. We validate the implementation of our approach and compare it to alternatives that implement processes by state machines across smart contracts.},
	booktitle = {Proceedings of the 2020 {Asia} {Service} {Sciences} and {Software} {Engineering} {Conference}},
	publisher = {Association for Computing Machinery},
	author = {Osterland, Thomas and Rose, Thomas and Putschli, Clemens},
	year = {2020},
	note = {event-place: Nagoya, Japan},
	keywords = {blockchain, distributed ledger technology, business processes, business process execution},
	pages = {91--99},
}

@inproceedings{hughes_multicall_2021,
	address = {New York, NY, USA},
	series = {{BSCI} '21},
	title = {{MultiCall}: {A} {Transaction}-{Batching} {Interpreter} for {Ethereum}},
	isbn = {978-1-4503-8400-1},
	url = {https://doi.org/10.1145/3457337.3457839},
	doi = {10.1145/3457337.3457839},
	abstract = {Smart contracts are self-executing programs running in the blockchain allowing for decentralised storage and execution without a middleman. On-chain execution is expensive, with miners charging fees for distributed execution according to a cost model defined in the protocol. In particular, transactions have a high fixed cost. In this paper we present MultiCall, an interpreter that reduces the cost of smart contract execution by emulating sequences of transactions from multiple users in one transaction. We have implemented and integrated MultiCall into Ethereum. Our evaluation shows that using MultiCall provides a saving between 56.8\% and 98.9\% of the fixed per-transaction cost compared to the standard approach of sending transactions individually.},
	booktitle = {Proceedings of the 3rd {ACM} {International} {Symposium} on {Blockchain} and {Secure} {Critical} {Infrastructure}},
	publisher = {Association for Computing Machinery},
	author = {Hughes, William and Russo, Alejandro and Schneider, Gerardo},
	year = {2021},
	note = {event-place: Virtual Event, Hong Kong},
	keywords = {blockchain, smart contracts, optimization, interpreters},
	pages = {25--35},
}

@inproceedings{garfatta_model_2022,
	address = {New York, NY, USA},
	series = {{SAC} '22},
	title = {Model {Checking} of {Vulnerabilities} in {Smart} {Contracts}: {A} {Solidity}-to-{CPN} {Approach}},
	isbn = {978-1-4503-8713-2},
	url = {https://doi.org/10.1145/3477314.3507309},
	doi = {10.1145/3477314.3507309},
	abstract = {Despite the benefits that the Blockchain technology brings to many application fields, its adoption does not come without challenges. Smart contracts, which are at the core of 2nd generation blockchains, can often be riddled with vulnerabilities that can be exploited to attack the platform and threaten its security. It is therefore crucial for the protection of the designed systems to prove the correctness of the smart contracts to be deployed. Approaches have been proposed to detect generic vulnerabilities like reentrancy, but the results would often include false positives where the detected bug is either non existent or not exploitable. Besides, such approaches do not offer to check contract-specific properties. The work presented in this paper is situated as part of a formal approach that we have proposed in an attempt to bridge this gap. This previously outlined approach is based on the transformation of Solidity smart contracts into Coloured Petri nets, which provides the possibility to verify smart contracts with reference to properties expressed as Linear Temporal Logic (LTL) formulae. Herein we extend our previous work on mainly two levels: first, by taking into account the concept of function calls in the transformation and second, by focusing on the LTL properties that can define the correctness of a smart contract. Such properties can be specific to the control- or data-flow of the contracts being checked. They can also be used to express vulnerabilities as we showcase by proposing LTL formalizations for six vulnerabilities from the literature. We then leverage the capability of the Helena model checker to detect these vulnerabilities while discerning their exploitability, as well as check temporal-based contract-specific properties.},
	booktitle = {Proceedings of the 37th {ACM}/{SIGAPP} {Symposium} on {Applied} {Computing}},
	publisher = {Association for Computing Machinery},
	author = {Garfatta, Ikram and Klai, Kaïs and Graïet, Mohamed and Gaaloul, Walid},
	year = {2022},
	note = {event-place: Virtual Event},
	keywords = {blockchain, smart contract, coloured petri nets, model checker, solidity, temporal properties},
	pages = {316--325},
}

@inproceedings{crincoli_vulnerable_2022,
	address = {New York, NY, USA},
	series = {{BSCI} '22},
	title = {Vulnerable {Smart} {Contract} {Detection} by {Means} of {Model} {Checking}},
	isbn = {978-1-4503-9175-7},
	url = {https://doi.org/10.1145/3494106.3528672},
	doi = {10.1145/3494106.3528672},
	abstract = {We are recently witnessing an exponential use of blockchain technology since information infrastructures are increasingly moving from the concept of centralisation to the decentralization ones. Blockchain technology is strictly related to the exchange of sensitive information, and its massive adoption is corresponding to interest from attackers. In this paper, we propose a method to automatically detect whether a Smart Contract (i.e. a contract between two parties concerning the exchange of goods and services, it is executed automatically and is governed by a source code written by a developer, contains clearly conditions accepted by both parties and resides on a distributed and decentralised network of computers) exhibits vulnerability. The proposed method relies on model checking and, through the adoption of μ-Calculus rules, is aimed to detect four different vulnerabilities on Smart Contracts modeled as automata. We preliminary evaluate the proposed method on a dataset composed by 40 (vulnerable and legitimate) contracts, by obtaining a precision ranging from 0.98 to 1 and a recall equal to 1, confirming that the proposed method can be promising in vulnerable Smart Contract detection.},
	booktitle = {Proceedings of the {Fourth} {ACM} {International} {Symposium} on {Blockchain} and {Secure} {Critical} {Infrastructure}},
	publisher = {Association for Computing Machinery},
	author = {Crincoli, Giuseppe and Iadarola, Giacomo and La Rocca, Piera Elena and Martinelli, Fabio and Mercaldo, Francesco and Santone, Antonella},
	year = {2022},
	note = {event-place: Nagasaki, Japan},
	keywords = {blockchain, smart contract, privacy, security, formal methods, model checking},
	pages = {3--10},
}

@inproceedings{santiago_gifflar_2021,
	address = {USA},
	series = {{CASCON} '21},
	title = {Gifflar: {A} {Framework} to {Generate} {Smart} {Contracts} on the {Fly}},
	abstract = {Blockchain is a disruptive technology that offers a secure decentralized network, allowing for direct transactions between distributed entities, without the need for a trusted third party. Smart contracts are executable codes hosted on the blockchain which enables the implementation of several decentralized applications, in different domains. Due to the complexity of the contract's construction, it is necessary to seek ways to facilitate and make this innovative development process robust. This paper presents Gifflar, a framework for generating smart contract code on the fly, in such a way that it allows a system to write, compile and implement blockchain contracts with a decentralized application still running. The framework is structured in components that implement design patterns to better define the responsibility of each one of the parts and exports a simple interaction module for modeling contracts in JSON and automatic code writing using the TypeScript language. As far as we know, this framework is one of the first to allow contract code generation dynamically at run time. Thus, the work contributes to the state of the art by addressing a new paradigm, where systems can act as smart contract developers.},
	booktitle = {Proceedings of the 31st {Annual} {International} {Conference} on {Computer} {Science} and {Software} {Engineering}},
	publisher = {IBM Corp.},
	author = {Santiago, Levy and Abijaude, Jauberth Weyll and Greve, Fabíola},
	year = {2021},
	note = {event-place: Toronto, Canada},
	keywords = {blockchain, code generation, framework, smart contract},
	pages = {214--219},
}

@inproceedings{santiago_framework_2021,
	address = {New York, NY, USA},
	series = {{SBES} '21},
	title = {A {Framework} to {Generate} {Smart} {Contracts} {On} the {Fly}},
	isbn = {978-1-4503-9061-3},
	url = {https://doi.org/10.1145/3474624.3477068},
	doi = {10.1145/3474624.3477068},
	abstract = {Blockchain is a disruptive technology that offers a secure decentralized network, and allows for direct transactions between distributed entities, without the need for a trusted third party. Smart contracts are executable codes hosted on the blockchain and enable the implementation of several decentralized applications, in different domains. However, due to the complexity of contract construction, it is necessary to seek ways to facilitate and make this innovative development process robust. This paper presents Gifflar, a framework for generating smart contract code on the fly, in such a way that it allows a system to write, compile and implement blockchain contracts with a decentralized application still running. Gifflar is structured in components that implement design patterns to better define the responsibility of each one of the parts and exports a simple interaction module for contract modeling in JSON and automatic code writing using the TypeScript language. As far as we know, this framework is one of the first to generate contracts dynamically at run time. Thus, the work contributes to the state of the art by addressing a new paradigm, where systems can act as smart contract developers.},
	booktitle = {Proceedings of the {XXXV} {Brazilian} {Symposium} on {Software} {Engineering}},
	publisher = {Association for Computing Machinery},
	author = {Santiago, Levy and Abijaude, Jauberth and Greve, Fabíola},
	year = {2021},
	note = {event-place: Joinville, Brazil},
	keywords = {Blockchain, Code Generation, Framework, Smart Contract},
	pages = {410--415},
}

@inproceedings{xu_ppm_2020,
	address = {New York, NY, USA},
	series = {{ACSW} '20},
	title = {{PPM}: {A} {Provenance}-{Provided} {Data} {Sharing} {Model} for {Open} {Banking} via {Blockchain}},
	isbn = {978-1-4503-7697-6},
	url = {https://doi.org/10.1145/3373017.3373022},
	doi = {10.1145/3373017.3373022},
	abstract = {Open banking becomes more and more prevailing in Australia in recent years. It aims to make the users’ personal financial data mutually transfer and exchange across different banks in a secure way. The sensitive data in a financial area requires higher authentication and provenance for participants. In this paper, we propose a provenance-provided data sharing model (PPM) via blockchain to meet the requirements of open banking. The model employs the programmable smart contracts as the middle witness between users and third-party services, and provides the modifications on data layer (data content, transaction structure), smart contract layer (ACL, logic), and application layer (customized APIs). Based on that, our PPM model possesses the properties of transparent authentication, privacy-provided control, and auditable provenance. The analyses and discussion show that our model is a secure and achievable system in the face of open banking.},
	booktitle = {Proceedings of the {Australasian} {Computer} {Science} {Week} {Multiconference}},
	publisher = {Association for Computing Machinery},
	author = {Xu, Zhiyu and Wang, Qin and Wang, Ziyaun and Liu, Donghai and Xiang, Yang and Wen, Sheng},
	year = {2020},
	note = {event-place: Melbourne, VIC, Australia},
	keywords = {Blockchain, Access Control, Data Sharing, Open Banking, Provenance},
}

@inproceedings{han_fluid_2019,
	address = {New York, NY, USA},
	series = {{SIGMOD} '19},
	title = {Fluid: {A} {Blockchain} {Based} {Framework} for {Crowdsourcing}},
	isbn = {978-1-4503-5643-5},
	url = {https://doi.org/10.1145/3299869.3320238},
	doi = {10.1145/3299869.3320238},
	abstract = {Recently, crowdsourcing has emerged as a new computing paradigm to solve problems that need human intrinsic, such as image annotation. However, there are two limitations in existing crowdsourcing platforms, i.e. non-transparent incentive mechanism and isolated profiles of workers, which harms the interests of both requesters and workers. Meanwhile, Blockchain technology introduces a solution to build a transparent, immutable data model in the Byzantine environment. Moreover, Blockchain systems (e.g. Ethereum) can also support the Tuning-complete script called smart contracts. Thus, we are motivated to use the feature of the transparent data model and smart contract in Blockchain to address the two limitations. Based on the proposed solutions, we have designed a Blockchain based framework which supports foundations of general crowdsourcing platforms. In addition, our framework also has following novel features: (1) it provides the transparent incentive mechanisms; (2) it supports a trusted worker's profile sharing in a cross-platform mode.},
	booktitle = {Proceedings of the 2019 {International} {Conference} on {Management} of {Data}},
	publisher = {Association for Computing Machinery},
	author = {Han, Siyuan and Xu, Zihuan and Zeng, Yuxiang and Chen, Lei},
	year = {2019},
	note = {event-place: Amsterdam, Netherlands},
	keywords = {blockchain, crowdsourcing, incentive mechanism},
	pages = {1921--1924},
}

@inproceedings{singh_blockchain-enabled_2020,
	address = {New York, NY, USA},
	series = {{DroneCom} '20},
	title = {Blockchain-{Enabled} {Secure} {Communication} for {Drone} {Delivery}: {A} {Case} {Study} in {COVID}-like {Scenarios}},
	isbn = {978-1-4503-8105-5},
	url = {https://doi.org/10.1145/3414045.3415937},
	doi = {10.1145/3414045.3415937},
	abstract = {COVID-19 made the world stop, with people trapped inside their homes and governments trying to restrict the public movement. However, to accomplish this, one big problem that emerged and outscored everything else was catering to the day to day necessary items of the people without human involvement. In this regard, we propose a blockchain-enabled secure communication framework for delivering the goods in COVID-19 like scenarios by leveraging the drones that are available with commercial retail providers. The blockchain scheme is used to create smart contracts to build the trust of buyers and sellers on the framework as the payments are made through the smart contract executions. The blockchain based order processing ensures the integrity and authenticity of the information. Moreover, a communication model is presented along with the order, delivery and payment phases. The results prove the effectiveness of the proposed scheme by evaluating it based on gas price, transaction time, and mining time.},
	booktitle = {Proceedings of the 2nd {ACM} {MobiCom} {Workshop} on {Drone} {Assisted} {Wireless} {Communications} for {5G} and {Beyond}},
	publisher = {Association for Computing Machinery},
	author = {Singh, Maninderpal and Aujla, Gagangeet Singh and Bali, Rasmeet Singh and Vashisht, Sahil and Singh, Amritpal and Jindal, Anish},
	year = {2020},
	note = {event-place: London, United Kingdom},
	keywords = {blockchain, security, drone delivery, internet of drones},
	pages = {25--30},
}

@inproceedings{ali_quest_2017,
	address = {New York, NY, USA},
	series = {{AMECSE} '17},
	title = {The {Quest} for {Fully} {Smart} {Autonomous} {Business} {Networks} in {IoT} {Platforms}},
	isbn = {978-1-4503-5512-4},
	url = {https://doi.org/10.1145/3178298.3178301},
	doi = {10.1145/3178298.3178301},
	abstract = {The evolution of the business networks is fostering the demand for more connected devices to execute tangled and sophisticated business operations. This leverages complicated business networks space to include scalable network layers, more devices, and platforms relying on Internet of Things (IoT) solutions. Despite the fact that traditional IoT platforms usually target the technical side for IoT applications, they are not prepared enough to be easily integrated with pluggable and executable business logic or smart contracts. This makes it difficult to control a collection of shared business network resources in a standard and decentralized manner. With the rise of FinTech due to blockchain technology, it becomes possible to seamlessly engage business networks with financial digital assets. Consequently, combining IoT platforms with blockchain will drive new ways for better services consuming, transparency and products that depend on crowd-based economy [12]. In this paper, Sitechain is proposed as a new architecture to integrate IoT platforms with blockchain technology. The proposed architecture is not locked to specific IoT platforms but it can be extended to support different platforms in a standard, systematic and easy way. Sitechain is demonstrated by integrating Sitewhere and FIWARE IoT platforms with Hyperledger Fabric as a private blockchain network manager. Moreover a modeling language supported by Hyperledger composer is used to easily develop smart contracts and generate RESTful APIs, therefore any smart contract transaction events can be mapped into actions on remote devices.The system testing is performed using a large set of connected shared devices that are deployed as part of private business networks. The results are recorded in the conclusion section.},
	booktitle = {Proceedings of the 3rd {Africa} and {Middle} {East} {Conference} on {Software} {Engineering}},
	publisher = {Association for Computing Machinery},
	author = {Ali, Ahmed Abdullah and El-Dessouky, Iman A. and Abdallah, Mahmoud M. and Nabih, Azza K.},
	year = {2017},
	note = {event-place: Cairo, Egypt},
	keywords = {Blockchain, Smart Contracts, Consensus, Distributed Ledger, HyperLedger, Internet of Things, IoT Platforms},
	pages = {13--18},
}

@inproceedings{cui_vrust_2022,
	address = {New York, NY, USA},
	series = {{CCS} '22},
	title = {{VRust}: {Automated} {Vulnerability} {Detection} for {Solana} {Smart} {Contracts}},
	isbn = {978-1-4503-9450-5},
	url = {https://doi.org/10.1145/3548606.3560552},
	doi = {10.1145/3548606.3560552},
	abstract = {Solana is a rapidly-growing high-performance blockchain powered by a Proof of History (PoH) consensus mechanism and a novel stateless programming model that decouples code from data. With parallel execution on the PoH Sealevel runtime (instead of PoW), it achieves 100X-1000X speedups compared to Ethereum in terms of transactions per second. With the new programming model, new constraints (owner, signer, keys, bump seeds) and vulnerabilities (missing checks, overflows, type confusion, etc.) must be carefully verified to ensure the security of Solana smart contracts. This paper proposes VRust, the first automated smart contract vulnerability detection framework for Solana. A key technical novelty is a set of static analysis rules for validating untrustful input accounts that are unique in the Solana programming model. We have developed a total of eight different vulnerability types, and VRust is able to check all of them fully automatically by translating source code into Rust MIR-based inference rules without any code annotations. VRust has been evaluated on over a hundred of Solana projects, and it has revealed 12 previously unknown vulnerabilities, including 3 critical vulnerabilities in the official Solana Programming Library confirmed by core developers.},
	booktitle = {Proceedings of the 2022 {ACM} {SIGSAC} {Conference} on {Computer} and {Communications} {Security}},
	publisher = {Association for Computing Machinery},
	author = {Cui, Siwei and Zhao, Gang and Gao, Yifei and Tavu, Tien and Huang, Jeff},
	year = {2022},
	note = {event-place: Los Angeles, CA, USA},
	keywords = {verification, blockchain security, solana},
	pages = {639--652},
}

@inproceedings{abdelrazig_abubakar_blockchain-based_2021,
	address = {New York, NY, USA},
	series = {{ICBCT} '21},
	title = {Blockchain-{Based} {Identity} and {Authentication} {Scheme} for {MQTT} {Protocol}},
	isbn = {978-1-4503-8962-4},
	url = {https://doi.org/10.1145/3460537.3460549},
	doi = {10.1145/3460537.3460549},
	abstract = {The publish and subscribe messaging model has proven itself as a dominant messaging paradigm for IoT systems. An example of such is the commonly used Message Queuing Telemetry Transport (MQTT) protocol. However, the security concerns with this protocol have presented vital security challenges in most IoT applications. For example, the MQTT protocol does not have secure authentication mechanisms implemented and leaves that task to the developer as all the included native security services are fragile. This paper will present a well-thought approach involving a lightweight authentication and authorization scheme together with a decentralized identity system to manage the users' identities. This mechanism helps in facilitating the authentication for both subscribers and publishers by utilizing a smart contract in Ethereum blockchain to guarantee trust, accountability and preserve user privacy. We provided a proof-of-concept implementation to prove our work, which involves a decentralized MQTT platform and dashboard using our approach. The usability of this approach was further analyzed, particularly concerning CPU and memory utilization. Our analysis proved that our approach satisfies IoT applications' requirements since it reduces the consumption of resources and that smart contracts help in the automation of data management processes.},
	booktitle = {2021 {The} 3rd {International} {Conference} on {Blockchain} {Technology}},
	publisher = {Association for Computing Machinery},
	author = {ABDELRAZIG ABUBAKAR, MWRWAN and JAROUCHEH, ZAKWAN and AL-DUBAI, AHMED and LIU, XIAODONG},
	year = {2021},
	note = {event-place: Shanghai, China},
	pages = {73--81},
}

@inproceedings{varun_mitigating_2022,
	address = {New York, NY, USA},
	series = {{BSCI} '22},
	title = {Mitigating {Frontrunning} {Attacks} in {Ethereum}},
	isbn = {978-1-4503-9175-7},
	url = {https://doi.org/10.1145/3494106.3528682},
	doi = {10.1145/3494106.3528682},
	abstract = {With the rising popularity of Ethereum, there is also an uptick in the number of smart contract based decentralized applications (DApps). Consequently, Ethereum transaction volume is growing steadily over the last few years, but so are the various types of attacks on it. In Ethereum vulnerable smart contracts are always taken advantage of by adversaries. One of the primary ways of exploiting Ethereum with malicious intent is through frontrunning attacks that take advantage of the waiting time of transactions in the pending pool by adjusting the gas price. Attackers willing to execute such attacks constantly monitor the pending transaction pool and try to frontrun transactions. Mitigating such attacks is a critical step for ensuring secure DApp operations in Ethereum. In this paper, we propose a model-based attack detection and prevention scheme. We extract specific features for each transaction and transform each transaction into a feature vector which is then analyzed by a machine learning model to detect if it is a frontrunning attack transaction or not in real time. Extensive experiments on a large dataset of transactions establish the effectiveness of our approach.},
	booktitle = {Proceedings of the {Fourth} {ACM} {International} {Symposium} on {Blockchain} and {Secure} {Critical} {Infrastructure}},
	publisher = {Association for Computing Machinery},
	author = {Varun, Maddipati and Palanisamy, Balaji and Sural, Shamik},
	year = {2022},
	note = {event-place: Nagasaki, Japan},
	keywords = {ethereum, machine learning, frontrunning attack, lstm, multi-layer perceptron},
	pages = {115--124},
}

@inproceedings{taherkordi_pervasive_2018,
	address = {New York, NY, USA},
	series = {{ICBTA} 2018},
	title = {Pervasive {Smart} {Contracts} for {Blockchains} in {IoT} {Systems}},
	isbn = {978-1-4503-6646-5},
	url = {https://doi.org/10.1145/3301403.3301405},
	doi = {10.1145/3301403.3301405},
	abstract = {Thanks to its decentralized structure and immutability, blockchain technology has the potential to address relevant security and privacy challenges in the Internet of Things (IoT). In particular, by hosting and executing smart contracts, blockchain allows secure, flexible, and traceable message communication between IoT devices. The unique characteristics of IoT systems, such as heterogeneity and pervasiveness, however, pose challenges in designing smart contracts for such systems. In this paper, we study these challenges and propose a design approach for smart contracts used in IoT systems. The main goal of our design model is to enhance the development of IoT smart contracts based on the inherent pervasive attributes of IoT systems. In particular, the design model allows the smart contracts to encapsulate functionalities such as contractlevel communication between IoT devices, access to data-sources within contracts, and interoperability of heterogeneous IoT smart contracts. The essence of our approach is structuring the design of IoT smart contracts as self-contained software services, inspired by the microservice architecture model. The flexibility, scalability and modularity of this model make it an efficient approach for developing pervasive IoT smart contracts.},
	booktitle = {Proceedings of the 2018 {International} {Conference} on {Blockchain} {Technology} and {Application}},
	publisher = {Association for Computing Machinery},
	author = {Taherkordi, Amir and Herrmann, Peter},
	year = {2018},
	note = {event-place: Xi'an, China},
	keywords = {Smart Contracts, Internet of Things, Blockchains, Microservices},
	pages = {6--11},
}

@inproceedings{zhang_smart_2019,
	address = {New York, NY, USA},
	series = {Asia {CCS} '19},
	title = {Smart {Contract}-{Based} {Miner} {Registration} and {Block} {Validation}},
	isbn = {978-1-4503-6752-3},
	url = {https://doi.org/10.1145/3321705.3331010},
	doi = {10.1145/3321705.3331010},
	abstract = {Rewriting-history attacks are devastating for blockchain-based cryptocurrency systems. To deter such attacks, this paper introduces a new model utilizing a smart contract to effectively prevent such attacks from succeeding. Each node who creates a new block is required to register with the smart contract to get a voucher required for the subsequent block validation. We explain the flow of the proposed model and the algorithms of the smart contract. We have implemented this smart contract in the Solidity language and simulated on the Ethereum test network. We also present security and simulation results of the proposed model.},
	booktitle = {Proceedings of the 2019 {ACM} {Asia} {Conference} on {Computer} and {Communications} {Security}},
	publisher = {Association for Computing Machinery},
	author = {Zhang, Shijie and Lee, Jong-Hyouk},
	year = {2019},
	note = {event-place: Auckland, New Zealand},
	keywords = {smart contracts, solidity, blockchains, rewrite history},
	pages = {691--693},
}

@inproceedings{rocha_preliminary_2018,
	address = {New York, NY, USA},
	series = {{WETSEB} '18},
	title = {Preliminary {Steps} towards {Modeling} {Blockchain} {Oriented} {Software}},
	isbn = {978-1-4503-5726-5},
	url = {https://doi.org/10.1145/3194113.3194123},
	doi = {10.1145/3194113.3194123},
	abstract = {Even though blockchain is mostly popular for its cryptocurrency, smart contracts have become a very prominent blockchain application. Smart contracts are like classes that can be called by client applications outside the blockchain. Therefore it is possible to develop blockchain-oriented software (BOS) that implements part of the business logic in the blockchain by using smart contracts. Currently, there is no design standard to model BOS. Since modeling is an important part of designing a software, developers may struggle to plan their BOS. In this paper, we show three complementary modeling approaches based on well-known software engineering models and apply them to a BOS example. Our goal is to start the discussion on specialized blockchain modeling notations.},
	booktitle = {Proceedings of the 1st {International} {Workshop} on {Emerging} {Trends} in {Software} {Engineering} for {Blockchain}},
	publisher = {Association for Computing Machinery},
	author = {Rocha, Henrique and Ducasse, Stéphane},
	year = {2018},
	note = {event-place: Gothenburg, Sweden},
	keywords = {blockchain, smart contracts, BPMN, ER model, modeling, UML},
	pages = {52--57},
}

@inproceedings{su_effectively_2023,
	address = {New York, NY, USA},
	series = {{ASE} '22},
	title = {Effectively {Generating} {Vulnerable} {Transaction} {Sequences} in {Smart} {Contracts} with {Reinforcement} {Learning}-{Guided} {Fuzzing}},
	isbn = {978-1-4503-9475-8},
	url = {https://doi.org/10.1145/3551349.3560429},
	doi = {10.1145/3551349.3560429},
	abstract = {As computer programs run on top of blockchain, smart contracts have proliferated a myriad of decentralized applications while bringing security vulnerabilities, which may cause huge financial losses. Thus, it is crucial and urgent to detect the vulnerabilities of smart contracts. However, existing fuzzers for smart contracts are still inefficient to detect sophisticated vulnerabilities that require specific vulnerable transaction sequences to trigger. To address this challenge, we propose a novel vulnerability-guided fuzzer based on reinforcement learning, namely RLF, for generating vulnerable transaction sequences to detect such sophisticated vulnerabilities in smart contracts. In particular, we firstly model the process of fuzzing smart contracts as a Markov decision process to construct our reinforcement learning framework. We then creatively design an appropriate reward with consideration of both vulnerability and code coverage so that it can effectively guide our fuzzer to generate specific transaction sequences to reveal vulnerabilities, especially for the vulnerabilities related to multiple functions. We conduct extensive experiments to evaluate RLF’s performance. The experimental results demonstrate that our RLF outperforms state-of-the-art vulnerability-detection tools (e.g., detecting 8\%-69\% more vulnerabilities within 30 minutes).},
	booktitle = {Proceedings of the 37th {IEEE}/{ACM} {International} {Conference} on {Automated} {Software} {Engineering}},
	publisher = {Association for Computing Machinery},
	author = {Su, Jianzhong and Dai, Hong-Ning and Zhao, Lingjun and Zheng, Zibin and Luo, Xiapu},
	year = {2023},
	note = {event-place: Rochester, MI, USA},
	keywords = {Reinforcement learning, Smart contract, Fuzzing},
}

@article{zarir_developing_2021,
	title = {Developing {Cost}-{Effective} {Blockchain}-{Powered} {Applications}: {A} {Case} {Study} of the {Gas} {Usage} of {Smart} {Contract} {Transactions} in the {Ethereum} {Blockchain} {Platform}},
	volume = {30},
	issn = {1049-331X},
	url = {https://doi.org/10.1145/3431726},
	doi = {10.1145/3431726},
	abstract = {Ethereum is a blockchain platform that hosts and executes smart contracts. Executing a function of a smart contract burns a certain amount of gas units (a.k.a., gas usage). The total gas usage depends on how much computing power is necessary to carry out the execution of the function. Ethereum follows a free-market policy for deciding the transaction fee for executing a transaction. More specifically, transaction issuers choose how much they are willing to pay for each unit of gas (a.k.a., gas price). The final transaction fee corresponds to the gas price times the gas usage. Miners process transactions to gain mining rewards, which come directly from these transaction fees. The flexibility and the inherent complexity of the gas system pose challenges to the development of blockchain-powered applications. Developers of blockchain-powered applications need to translate requests received in the frontend of their application into one or more smart contract transactions. Yet, it is unclear how developers should set the gas parameters of these transactions given that (i) miners are free to prioritize transactions whichever way they wish and (ii) the gas usage of a contract transaction is only known after the transaction is processed and included in a new block. In this article, we analyze the gas usage of Ethereum transactions that were processed between Oct. 2017 and Feb. 2019 (the Byzantium era). We discover that (i) most miners prioritize transactions based on their gas price only, (ii) 25\% of the functions that received at least 10 transactions have an unstable gas usage (coefficient of variation = 19\%), and (iii) a simple prediction model that operates on the recent gas usage of a function achieves an R-Squared of 0.76 and a median absolute percentage error of 3.3\%. We conclude that (i) blockchain-powered application developers should be aware that transaction prioritization in Ethereum is frequently done based solely on the gas price of transactions (e.g., a higher transaction fee does not necessarily imply a higher transaction priority) and act accordingly and (ii) blockchain-powered application developers can leverage gas usage prediction models similar to ours to make more informed decisions to set the gas price of their transactions. Lastly, based on our findings, we list and discuss promising avenues for future research.},
	number = {3},
	journal = {ACM Trans. Softw. Eng. Methodol.},
	author = {Zarir, Abdullah A. and Oliva, Gustavo A. and Jiang, Zhen M. (Jack) and Hassan, Ahmed E.},
	month = mar,
	year = {2021},
	note = {Place: New York, NY, USA
Publisher: Association for Computing Machinery},
	keywords = {Ethereum, blockchain, smart contracts, Gas usage},
}

@inproceedings{corradini_flexible_2023,
	address = {New York, NY, USA},
	series = {{WETSEB} '22},
	title = {Flexible {Execution} of {Multi}-{Party} {Business} {Processes} on {Blockchain}},
	isbn = {978-1-4503-9331-7},
	url = {https://doi.org/10.1145/3528226.3528369},
	doi = {10.1145/3528226.3528369},
	abstract = {The execution of multi-party business processes on blockchains has been more and more used in the last years in those contexts where trust among the involved parties is a crucial requirement that cannot be assumed by default. The immutability, transparency, and decentralised characteristics of the blockchain ensure the parties' responsibility in case of controversial actions. However, if on the one hand, the immutable nature of the blockchain brings many benefits from the trust perspective, on the other hand such rigidity leads to a lack of flexibility in the execution of blockchain-based business processes.In this paper, we face the challenge of making flexible the execution of multi-party business processes based on blockchain. We propose an approach that exploits the BPMN choreography model to describe a multi-party business process. From the model it is produced an on-chain smart contract storing the current state of the execution, and an off-chain rule-based program implementing the choreography logic. The decoupling of the execution state from the choreography logic allows achieving the flexibility of the multi-party interactions.We provide an implementation of the approach, the FlexChain framework, that relies on the Ethereum permissionless blockchain, hence on Solidity smart contracts, and on Drools as an off-chain rules engine. We assess the feasibility and effectiveness of the proposed solution through a case study representing the procedure for a career upgrade, whose experiments have been conducted on the Rinkeby Ethereum Testnet.},
	booktitle = {Proceedings of the 5th {International} {Workshop} on {Emerging} {Trends} in {Software} {Engineering} for {Blockchain}},
	publisher = {Association for Computing Machinery},
	author = {Corradini, Flavio and Marcelletti, Alessandro and Morichetta, Andrea and Polini, Andrea and Re, Barbara and Tiezzi, Francesco},
	year = {2023},
	note = {event-place: Pittsburgh, Pennsylvania},
	keywords = {blockchain, BPMN, choreography, flexibility},
	pages = {25--32},
}

@inproceedings{guo_poster_2020,
	address = {New York, NY, USA},
	series = {{ASIA} {CCS} '20},
	title = {{POSTER}: {Oblivious} {Access} {System} on {Decentralized} {Database} over {Parallel} {Smart} {Contract} {Model}},
	isbn = {978-1-4503-6750-9},
	url = {https://doi.org/10.1145/3320269.3405436},
	doi = {10.1145/3320269.3405436},
	abstract = {Data stored on centralized cloud servers may have some risks. Moreover, it may leak the data access pattern when accessing data on cloud servers. Oblivious RAM (ORAM) is a candidate solution to hide the data access pattern, but it inherently induces some overheads of accessing data. In this paper, we address the issues above, and propose the oblivious access system on decentralized database over parallel smart contract model. The proposed system can slightly reduce the overhead of ORAM and overcome the problem from centralized servers. The main techniques are to use parallel smart contract model to improve the performance of smart contract execution and garbled circuit to reduce the cost of communication.},
	booktitle = {Proceedings of the 15th {ACM} {Asia} {Conference} on {Computer} and {Communications} {Security}},
	publisher = {Association for Computing Machinery},
	author = {Guo, Zhong-Yi and Chen, Yu-Chi and Lin, Hsiu-Ping},
	year = {2020},
	note = {event-place: Taipei, Taiwan},
	keywords = {blockchain, smart contract, garbled circuit, oblivious ram},
	pages = {895--897},
}

@inproceedings{eckey_optiswap_2020,
	address = {New York, NY, USA},
	series = {{ASIA} {CCS} '20},
	title = {{OptiSwap}: {Fast} {Optimistic} {Fair} {Exchange}},
	isbn = {978-1-4503-6750-9},
	url = {https://doi.org/10.1145/3320269.3384749},
	doi = {10.1145/3320269.3384749},
	abstract = {Selling digital commodities securely over the Internet is a challenging task when Seller and Buyer do not trust each other. With the advent of cryptocurrencies, one prominent solution for digital exchange is to rely on a smart contract as a trusted arbiter that fairly resolves disputes when Seller and Buyer disagree. Such protocols have an optimistic mode, where the digital exchange between the parties can be completed with only minimal interaction with the smart contract. In this work we present OptiSwap, a new smart contract based fair exchange protocol that significantly improves the optimistic case of smart contract based fair exchange protocols. In particular, OptiSwap has almost no overhead in communication complexity, and improves on the computational overheads of the parties compared to prior solutions. An additional feature of OptiSwap is a protection mechanism against so-called grieving attacks, where an adversary attempts to violate the financial fairness of the protocol by forcing the honest party to pay fees. We analyze OptiSwap's security in the UC model and provide benchmark results over Ethereum.},
	booktitle = {Proceedings of the 15th {ACM} {Asia} {Conference} on {Computer} and {Communications} {Security}},
	publisher = {Association for Computing Machinery},
	author = {Eckey, Lisa and Faust, Sebastian and Schlosser, Benjamin},
	year = {2020},
	note = {event-place: Taipei, Taiwan},
	keywords = {smart contract, fair exchange, e-commerce, cryptocurrency, fairness, dispute resolution, interactive, optimistic},
	pages = {543--557},
}

@inproceedings{kumarathunga_towards_2020,
	address = {New York, NY, USA},
	series = {{ASSE} '20},
	title = {Towards {Trust} {Enabled} {Commodity} {Market} for {Farmers} with {Blockchain} {Smart} {Contracts}},
	isbn = {978-1-4503-7710-2},
	url = {https://doi.org/10.1145/3399871.3399891},
	doi = {10.1145/3399871.3399891},
	abstract = {This paper presents a conceptual model for an online agricultural commodity market that empowers farmers with a better price determination mechanism through collective marketing and Blockchain smart contracts. The model makes collective marketing possible by generating Many-one-Many relationships between farmers, farmers' groups, and buyers. While collective marketing improves farmers' bargaining position leading to higher rates, trust enabled by Blockchain smart contracts facilitates farmers to establish deals with buyers who offer the best rate transforming the commodity market into a sustainable market.},
	booktitle = {Proceedings of the 2020 {Asia} {Service} {Sciences} and {Software} {Engineering} {Conference}},
	publisher = {Association for Computing Machinery},
	author = {Kumarathunga, Malni and Calheiros, Rodrigo and Ginige, Athula},
	year = {2020},
	note = {event-place: Nagoya, Japan},
	keywords = {Blockchain, Smart Contracts, Collective Marketing, Dynamic Trust, Market Linkages},
	pages = {75--82},
}

@article{hynes_demonstration_2018,
	title = {A {Demonstration} of {Sterling}: {A} {Privacy}-{Preserving} {Data} {Marketplace}},
	volume = {11},
	issn = {2150-8097},
	url = {https://doi.org/10.14778/3229863.3236266},
	doi = {10.14778/3229863.3236266},
	abstract = {In this work, we demonstrate Sterling, a decentralized marketplace for private data. Sterling enables privacy-preserving distribution and use of data by using privacy-preserving smart contracts which run on a permissionless blockchain. The privacy-preserving smart contracts, written by data providers and consumers, immutably and irrevocably represent the interests of their creators. In particular, we provide a mechanism for data providers to control the use of their data through automatic verification of data consumer contracts, allowing providers to express constraints such as pricing and differential privacy. Through smart contracts and trusted execution environments, Sterling enables privacy-preserving analytics and machine learning over private data in an efficient manner. The resulting economy ensures that the interests of all parties are aligned.For the demonstration, we highlight the use of Sterling for training machine learning models on individuals' health data. In doing so, we showcase novel approaches to automatically appraising training data, verifying and enforcing model privacy properties, and efficiently training private models on the blockchain using trusted hardware.},
	number = {12},
	journal = {Proc. VLDB Endow.},
	author = {Hynes, Nick and Dao, David and Yan, David and Cheng, Raymond and Song, Dawn},
	month = aug,
	year = {2018},
	note = {Publisher: VLDB Endowment},
	pages = {2086--2089},
}

@inproceedings{lee_clicks-and-mortar_2021,
	address = {New York, NY, USA},
	series = {{ACM} {ICEA} '20},
	title = {A {Clicks}-and-{Mortar} {Smart} {System}},
	isbn = {978-1-4503-8304-2},
	url = {https://doi.org/10.1145/3440943.3444342},
	doi = {10.1145/3440943.3444342},
	abstract = {1E-commerce nowadays has made its official way into the clicks-and-mortar era. The advantage of a clicks-and-mortar model is that the "mortar" counterpart can enjoy logistics support, which complements any operational inadequacy on the side of the virtual website - the "clicks" counterpart. In a clicks-and-mortar smart contract system, the clicks-and-mortar application enables any transaction to automatically execute each operational step. When a consumer selects a product and completes the payment for it, the smart contract can proceed to execute any terms established in its contents, ensuring the proper practice of every item in the contract.},
	booktitle = {Proceedings of the 2020 {ACM} {International} {Conference} on {Intelligent} {Computing} and {Its} {Emerging} {Applications}},
	publisher = {Association for Computing Machinery},
	author = {Lee, Yueh-Shiu and Chuang, Yen-Chiao and Chang, Mei-Mei and Huang, Mei-Wen},
	year = {2021},
	note = {event-place: GangWon, Republic of Korea},
	keywords = {Smart Contract, clicks-and-mortar, E-commerce},
}

@inproceedings{song_esbmc-solidity_2022,
	address = {New York, NY, USA},
	series = {{ICSE} '22},
	title = {{ESBMC}-{Solidity}: {An} {SMT}-{Based} {Model} {Checker} for {Solidity} {Smart} {Contracts}},
	isbn = {978-1-4503-9223-5},
	url = {https://doi.org/10.1145/3510454.3516855},
	doi = {10.1145/3510454.3516855},
	abstract = {Smart contracts written in Solidity are programs used in blockchain networks, such as Etherium, for performing transactions. However, as with any piece of software, they are prone to errors and may present vulnerabilities, which malicious attackers could then use. This paper proposes a solidity frontend for the efficient SMT-based context-bounded model checker (ESBMC), named ESBMC-Solidity, which provides a way of verifying such contracts with its framework. A benchmark suite with vulnerable smart contracts was also developed for evaluation and comparison with other verification tools. The experiments performed here showed that ESBMC-Solidity detected all vulnerabilities, was the fastest tool and provided a counterexample for each benchmark. A demonstration is available at https://youtu.be/3UH8\_1QAVN0.},
	booktitle = {Proceedings of the {ACM}/{IEEE} 44th {International} {Conference} on {Software} {Engineering}: {Companion} {Proceedings}},
	publisher = {Association for Computing Machinery},
	author = {Song, Kunjian and Matulevicius, Nedas and de Lima Filho, Eddie B. and Cordeiro, Lucas C.},
	year = {2022},
	note = {event-place: Pittsburgh, Pennsylvania},
	keywords = {solidity, formal verification},
	pages = {65--69},
}

@inproceedings{britten_modelling_2022,
	address = {New York, NY, USA},
	series = {{FTSCS} 2022},
	title = {Modelling a {Blockchain} for {Smart} {Contract} {Verification} {Using} {DeepSEA}},
	isbn = {978-1-4503-9907-4},
	url = {https://doi.org/10.1145/3563822.3568011},
	doi = {10.1145/3563822.3568011},
	abstract = {To create trustworthy programs, the 'gold standard' is specifications at a high-enough level to clearly correspond to the informal specifications, and also a refinement proof linking these high-level specifications down to, in our case, executable bytecode. The DeepSEA system demonstrates how this can be done, in the context of smart contracts on the Ethereum blockchain. A key component of this is the model of the blockchain on which the smart contracts reside. When doing proofs in DeepSEA, it is critical to have such a model, which allows for the writing of specifications at a high-level clearly corresponding to informal specifications. A candidate model for doing so and its usefulness for carrying out proofs is discussed in this paper.},
	booktitle = {Proceedings of the 8th {ACM} {SIGPLAN} {International} {Workshop} on {Formal} {Techniques} for {Safety}-{Critical} {Systems}},
	publisher = {Association for Computing Machinery},
	author = {Britten, Daniel and Reeves, Steve},
	year = {2022},
	note = {event-place: Auckland, New Zealand},
	keywords = {blockchain, smart contracts, formal methods},
	pages = {88--94},
}

@inproceedings{khieu_cbpki_2019,
	address = {New York, NY, USA},
	series = {{ACM} {SE} '19},
	title = {{CBPKI}: {Cloud} {Blockchain}-{Based} {Public} {Key} {Infrastructure}},
	isbn = {978-1-4503-6251-1},
	url = {https://doi.org/10.1145/3299815.3314433},
	doi = {10.1145/3299815.3314433},
	abstract = {This paper proposes a cloud based public key infrastructure utilizing blockchain technology model for replacing the currently outdated traditional variant. Environments such as Big Data and IoT ecosystems have scalable and resilient needs that current public key infrastructure cannot satisfy. Enhancements over past models include the use of blockchains to establish persistent access to certificate data and certificate revocation lists. Further improvements made were the decoupling of data from the certificate authority as well as hosting it on a cloud provider in order to tap into traffic security measures of said provider. This results in a smaller viable attack surface for the proposed model. Instead of holding data within the transaction data fields of blocks, certificate data and status were embedded into smart contracts. Our tests revealed a significant performance increase of our proposed model over that of both traditional and the version that stored data within blocks. Storing the certificate data within smart contracts reduced the size of data to be mined which in turn lowered the time to mine said data to 6.6\% of the time used for the block data storage method. Also, the mining gas cost per certificate was consequently cut by a significant 87\%. In summary, completely decoupling the certificate authority portion of a public key infrastructure and storing certificate data inside smart contracts yields a sizable performance boost while decreasing the attack surface.},
	booktitle = {Proceedings of the 2019 {ACM} {Southeast} {Conference}},
	publisher = {Association for Computing Machinery},
	author = {Khieu, Brian and Moh, Melody},
	year = {2019},
	note = {event-place: Kennesaw, GA, USA},
	keywords = {Blockchain, Smart Contract, Certificate Authority, Cloud, Public Key Infrastructure},
	pages = {58--63},
}

@inproceedings{tonelli_ethereum_2018,
	address = {New York, NY, USA},
	series = {{XP} '18},
	title = {Ethereum {Smart} {Contracts} as {Blockchain}-{Oriented} {Microservices}},
	isbn = {978-1-4503-6422-5},
	url = {https://doi.org/10.1145/3234152.3234190},
	doi = {10.1145/3234152.3234190},
	abstract = {We propose a model of software architecture where microservices are implemented by mean of Smart Contracts deployed in a blockchain, discussing similarities among the two paradigms and presenting an example of the implementation of an e-commerce platform.},
	booktitle = {Proceedings of the 19th {International} {Conference} on {Agile} {Software} {Development}: {Companion}},
	publisher = {Association for Computing Machinery},
	author = {Tonelli, Roberto and Pinna, Andrea and Baralla, Gavina and Ibba, Simona},
	year = {2018},
	note = {event-place: Porto, Portugal},
	keywords = {blockchain, smart contracts, microservices, DApp},
}

@inproceedings{third_linked_2017,
	address = {Republic and Canton of Geneva, CHE},
	series = {{WWW} '17 {Companion}},
	title = {Linked {Data} {Indexing} of {Distributed} {Ledgers}},
	isbn = {978-1-4503-4914-7},
	url = {https://doi.org/10.1145/3041021.3053895},
	doi = {10.1145/3041021.3053895},
	abstract = {Searching for information in distributed ledgers is currently not an easy task, as information relating to an entity may be scattered throughout the ledger with no index. As distributed ledger technologies become more established, they will increasingly be used to represent real world transactions involving many parties and the search requirements will grow. An index providing the ability to search using domain specific terms across multiple ledgers will greatly enhance to power, usability and scope of these systems.We have implemented a semantic index to the Ethereum blockchain platform, to expose distributed ledger data as Linked Data. As well as indexing block- and transaction-level data according to the BLONDiE ontology, we have mapped smart contracts to the Minimal Service Model ontology, to take the first steps towards connecting smart contracts with Semantic Web Services.},
	booktitle = {Proceedings of the 26th {International} {Conference} on {World} {Wide} {Web} {Companion}},
	publisher = {International World Wide Web Conferences Steering Committee},
	author = {Third, Allan and Domingue, John},
	year = {2017},
	note = {event-place: Perth, Australia},
	keywords = {distributed ledgers, linked data, blockchains, semantic indexing},
	pages = {1431--1436},
}

@inproceedings{buccafurri_attribute-based_2019,
	address = {New York, NY, USA},
	series = {{ARES} '19},
	title = {An {Attribute}-{Based} {Privacy}-{Preserving} {Ethereum} {Solution} for {Service} {Delivery} with {Accountability} {Requirements}},
	isbn = {978-1-4503-7164-3},
	url = {https://doi.org/10.1145/3339252.3339279},
	doi = {10.1145/3339252.3339279},
	abstract = {The main benefit of smart contracts over Ethereum is that different parties with conflicting interests can exchange value without trusting each other. As a matter of fact, solutions in which service delivery is regulated by smart contracts are proliferating. Sometimes, services can be negotiated and delivered only on the basis of some attributes, without disclosing the identity of the customer to the service supplier. However, accountability is still required, so that, in case of need, the identity of the customer should be linked to the service delivered and communicated to the appropriate parties. In this paper, we propose a practical solution to the above problem that integrates the features of Ethereum with a (Ciphertext-Policy) Attribute-Based Encryption scheme. To show the effectiveness of our proposal, we instantiate the general model to a significant use case.},
	booktitle = {Proceedings of the 14th {International} {Conference} on {Availability}, {Reliability} and {Security}},
	publisher = {Association for Computing Machinery},
	author = {Buccafurri, Francesco and De Angelis, Vincenzo and Lax, Gianluca and Musarella, Lorenzo and Russo, Antonia},
	year = {2019},
	note = {event-place: Canterbury, CA, United Kingdom},
	keywords = {Blockchain, Solidity, Attribute Provider, eIDAS, Revocation},
}

@inproceedings{cai_research_2021,
	address = {New York, NY, USA},
	series = {{ICISS} '21},
	title = {Research and {Design} of {Blockchain} {System} for {Logistic} {Tracing}},
	isbn = {978-1-4503-8913-6},
	url = {https://doi.org/10.1145/3459955.3460596},
	doi = {10.1145/3459955.3460596},
	abstract = {The blockchain is a decentralized network, which can prevent information to be tampered and improves the security and transparency of data. Traditional centralized database to store logistics data is vulnerable to attacks and limits sharing of information. Information isolation and unreliable data make it hard to trace the process of logistics delivery. In this paper, we propose a blockchain based system to improve the performance of logistics tracing service. We design the overall structure of the blockchain system and build a prototype using Hyperledger Fabric. Smart contract is implemented to store the logistic records into the blockchain ledgers and create tracing lists for logistic orders. Performance evaluation shows that the system achieves the logistics tracing ability with good performance. This paper assumes that the IoT devices used in the logistics process are reliable and will not be attacked. In the further work, a smart contract-based access control model can be developed to overcome the vulnerability caused by IoT devices.},
	booktitle = {Proceedings of the 4th {International} {Conference} on {Information} {Science} and {Systems}},
	publisher = {Association for Computing Machinery},
	author = {Cai, Ziyin and Yang, Meng and Cui, Hongyan and Li, Xiaoqiu and Xu, Meng},
	year = {2021},
	note = {event-place: Edinburgh, United Kingdom},
	keywords = {blockchain, Hyperledger, logistics delivery, tracing},
	pages = {28--34},
}

@inproceedings{gu_cloud_2018,
	address = {New York, NY, USA},
	series = {{ICCNS} 2018},
	title = {A {Cloud} {Storage} {Resource} {Transaction} {Mechanism} {Based} on {Smart} {Contract}},
	isbn = {978-1-4503-6567-3},
	url = {https://doi.org/10.1145/3290480.3290499},
	doi = {10.1145/3290480.3290499},
	abstract = {Since the security and fault tolerance is the two important metrics of the data storage, it brings both opportunities and challenges for distributed data storage and transaction. The traditional transaction system of storage resources, which generally runs in a centralized mode, results in high cost, vendor lock-in, single point failure risk, DDoS attack and information security. Therefore, this paper proposes a distributed transaction method for cloud storage based on smart contract. First, to guarantee the fault tolerance and decrease the storing cost for erasure coding, a VCG-based auction mechanism is proposed for storage transaction, and we deploy and implement the proposed mechanism by designing a corresponding smart contract. Especially, we address the problem - how to implement a VCG-like mechanism in a blockchain environment. Based on private chain of Ethereum, we make the simulations for proposed storage transaction method. The results showed that proposed transaction model can realize competitive trading of storage resources, and ensure the safe and economic operation of resource trading.},
	booktitle = {Proceedings of the 8th {International} {Conference} on {Communication} and {Network} {Security}},
	publisher = {Association for Computing Machinery},
	author = {Gu, Yonggen and Hou, Dingding and Wu, Xiaohong},
	year = {2018},
	note = {event-place: Qingdao, China},
	keywords = {Smart Contract, Security, Cloud Storage, Erasure Coding, VCG mechanism},
	pages = {134--138},
}

@inproceedings{liu_implement_2018,
	address = {New York, NY, USA},
	series = {{CSAI} '18},
	title = {An {Implement} of {Smart} {Contract} {Based} {Decentralized} {Online} {Crowdsourcing} {Mechanism}},
	isbn = {978-1-4503-6606-9},
	url = {https://doi.org/10.1145/3297156.3297239},
	doi = {10.1145/3297156.3297239},
	abstract = {With the gradual promotion, crowdsourcing has become an efficient way to solve problems that are very complicated for computers and simple for human crowd intelligence in recent years. Traditional crowdsourcing is based on a central system where requesters post tasks on a crowdsourcing central server or platform, however, this centralized model currently faces various challenges such as prohibitive cost, single point of failure, and vulnerability to malicious attacks. To this end, this paper proposes a smart contract-based decentralized online crowdsourcing mechanism, which includes task assignment rules and reward payment rules, etc. The mechanism has the characteristics like decentralization, unalterable, truthfulness and so on. In addition, the corresponding smart contract is designed, so that the mechanism can really run and process the actual data, and the effectiveness is shown by experiments. In this way, the entire crowdsourcing process no longer requires the participation of trusted third-party agencies, information and privacy security is guaranteed, and the cost is lower.},
	booktitle = {Proceedings of the 2018 2nd {International} {Conference} on {Computer} {Science} and {Artificial} {Intelligence}},
	publisher = {Association for Computing Machinery},
	author = {Liu, Han and Liu, Chao and Zhao, Wenqi and Jiang, Yu and Sun, Jiaguang and Gu, Yonggen and Chen, Jiashen and Wu, Xiaohong},
	year = {2018},
	note = {event-place: Shenzhen, China},
	keywords = {Ethereum, blockchain, smart contract, Crowdsourcing, decentralization},
	pages = {195--199},
}

@inproceedings{ma_attribute_2020,
	address = {New York, NY, USA},
	series = {{CSAE} '20},
	title = {Attribute {Revocable} {Data} {Sharing} {Scheme} {Based} on {Blockchain} and {CP}-{ABE}},
	isbn = {978-1-4503-7772-0},
	url = {https://doi.org/10.1145/3424978.3425019},
	doi = {10.1145/3424978.3425019},
	abstract = {Data sharing and exchange is an effective way to release the vitality and value of data resources, but it also brings security problems, especially in the distributed environment. In this paper, a data sharing scheme based on blockchain, smart contract and attribute-based encryption is proposed, which supports attribute level user authority revocation, and is suitable for the privilege management of data sharing in distributed environment. Firstly, the model of data sharing and exchange is given; secondly, the operation of data sharing and exchange is defined; finally, implementation by smart contract is given and an experiment is carried out. The results show that the scheme can effectively solve the problem of data access authorization and revocation in distributed environment. In this scheme, we introduce the trusted third party as the key management center to generate, encrypt and decrypt the key, thus reducing the pressure on the client.},
	booktitle = {Proceedings of the 4th {International} {Conference} on {Computer} {Science} and {Application} {Engineering}},
	publisher = {Association for Computing Machinery},
	author = {Ma, Wanli and Ma, Junwei and Zhang, Qi and Xue, Honglin and Li, Yang and Dang, Xiaoyan and Zhao, Min and Zhang, Jianliang and Han, Chao and Wu, Jian},
	year = {2020},
	note = {event-place: Sanya, China},
	keywords = {Blockchain, Smart contract, Attribute based encryption system, Data sharing},
}

@article{lagouvardos_precise_2020,
	title = {Precise {Static} {Modeling} of {Ethereum} “{Memory}”},
	volume = {4},
	url = {https://doi.org/10.1145/3428258},
	doi = {10.1145/3428258},
	abstract = {Static analysis of smart contracts as-deployed on the Ethereum blockchain has received much recent attention. However, high-precision analyses currently face significant challenges when dealing with the Ethereum VM (EVM) execution model. A major such challenge is the modeling of low-level, transient “memory” (as opposed to persistent, on-blockchain “storage”) that smart contracts employ. Statically understanding the usage patterns of memory is non-trivial, due to the dynamic allocation nature of in-memory buffers. We offer an analysis that models EVM memory, recovering high-level concepts (e.g., arrays, buffers, call arguments) via deep modeling of the flow of values. Our analysis opens the door to Ethereum static analyses with drastically increased precision. One such analysis detects the extraction of ERC20 tokens by unauthorized users. For another practical vulnerability (redundant calls, possibly used as an attack vector), our memory modeling yields analysis precision of 89\%, compared to 16\% for a state-of-the-art tool without precise memory modeling. Additionally, precise memory modeling enables the static computation of a contract’s gas cost. This gas-cost analysis has recently been instrumental in the evaluation of the impact of the EIP-1884 repricing (in terms of gas costs) of EVM operations, leading to a reward and significant publicity from the Ethereum Foundation.},
	number = {OOPSLA},
	journal = {Proc. ACM Program. Lang.},
	author = {Lagouvardos, Sifis and Grech, Neville and Tsatiris, Ilias and Smaragdakis, Yannis},
	month = nov,
	year = {2020},
	note = {Place: New York, NY, USA
Publisher: Association for Computing Machinery},
	keywords = {ethereum, static analysis, EVM},
}

@inproceedings{baird_i-tire_2022,
	address = {New York, NY, USA},
	series = {{CCS} '22},
	title = {I-{TiRE}: {Incremental} {Timed}-{Release} {Encryption} or {How} to {Use} {Timed}-{Release} {Encryption} on {Blockchains}?},
	isbn = {978-1-4503-9450-5},
	url = {https://doi.org/10.1145/3548606.3560704},
	doi = {10.1145/3548606.3560704},
	abstract = {Timed-release encryption can encrypt a message to a future time such that it can only be decrypted after that time. Potential applications include sealed bid auctions, scheduled confidential transactions, and digital time capsules. To enable such applications as decentralized smart contracts, we explore how to use timed-release encryption on blockchains. Practical constructions in the literature rely on a trusted server (or servers in a threshold setting), which periodically publishes an epoch-specific decryption key based on a long-term secret. Their main idea is to model time periods or epochs as identities in an identity-based encryption scheme. However, these schemes suffer from a fatal flaw: an epoch's key does not let us decrypt ciphertexts locked to prior epochs. Paterson and Quaglia [SCN'10] address this concern by having encryption specify a range of epochs when decryption is allowed. However, we are left with an efficiency concern: in each epoch, the server(s) must publish (via a smart contract transaction) a decryption key of size logarithmic in the lifetime (total number of epochs). For instance, on Ethereum, for a modest lifetime spanning 2 years of 1-minute long epochs, a server must spend over 6 in gas fees, every minute; this cost multiplies with the number of servers in a threshold setting. We propose a novel timed-release encryption scheme, where a decryption key, while logarithmic in size, allows incremental updates, wherein a short update key (single group element) is sufficient to compute the successive decryption key; our decryption key lets the client decrypt ciphertexts locked to any prior epoch. This leads to significant reduction is gas fees, for instance, only 0.30 in the above setting. Moreover, ciphertexts are also compact (logarithmic in the total lifetime), and encryption and decryption are on the order of few milliseconds. Furthermore, we decentralize the trust among a number of servers, so as to tolerate up to a threshold number of (malicious) corruptions. Our construction is based on bilinear pairing, and adapts ideas from Canetti et al.'s binary tree encryption [Eurocypt 2003] and Naor et al.'s distributed pseudorandom functions [Eurocrypt 1999].},
	booktitle = {Proceedings of the 2022 {ACM} {SIGSAC} {Conference} on {Computer} and {Communications} {Security}},
	publisher = {Association for Computing Machinery},
	author = {Baird, Leemon and Mukherjee, Pratyay and Sinha, Rohit},
	year = {2022},
	note = {event-place: Los Angeles, CA, USA},
	keywords = {blockchain, identity-based encryption, timed-release encryption},
	pages = {235--248},
}

@inproceedings{batool_fl-mab_2022,
	address = {New York, NY, USA},
	series = {{SAC} '22},
	title = {{FL}-{MAB}: {Client} {Selection} and {Monetization} for {Blockchain}-{Based} {Federated} {Learning}},
	isbn = {978-1-4503-8713-2},
	url = {https://doi.org/10.1145/3477314.3507050},
	doi = {10.1145/3477314.3507050},
	abstract = {Federated Learning (FL) is a promising solution for training using data collected from heterogeneous sources (e.g., mobile devices) while avoiding the transmission of large amounts of raw data and preserving privacy. Current FL approaches operate in an iterative manner by selecting a subset of participants each round, asking them to training using their latest local data over the most recent version of the global model, before collecting these local model updates and aggregating them to form the next iteration of the global model, and so forth until convergence is reached. Unfortunately, existing FL approaches typically select randomly the set of clients to use each round, which can negatively impact the quality of the model trained, as well the training round time due to the straggler problem. Moreover, clients, especially mobile devices with limited resources, should be incentivized to participate as federated learning is essentially a form of crowdsourcing for AI which requires monetization. We argue that the integration of blockchain and smart contract technologies to FL can solve the two aforementioned issues. In this paper, we present FL-MAB (FL- Multi-Auction using Blockchain), a client selection mechanism for FL operating in a smart contract which rewards clients for their participation using cryptocurrencies. FL-MAB employs a multidimensional auction mechanism for selecting users based on the compute and network resources offered by each client, as well as the quality of their local data. This auction is realized in a reliable and auditable manner through a smart contract. This allows FL-MAB to measure the relative contribution of each client by calculating a Shapley value, and allocating rewards accordingly. We have implemented FL-MAB using Solidity and tested on the Ethereum blockchain with various popular datasets. Our results show that FL-MAB outperforms existing baseline schemes by improving accuracy and reducing the no. of FL rounds.},
	booktitle = {Proceedings of the 37th {ACM}/{SIGAPP} {Symposium} on {Applied} {Computing}},
	publisher = {Association for Computing Machinery},
	author = {Batool, Zahra and Zhang, Kaiwen and Toews, Matthew},
	year = {2022},
	note = {event-place: Virtual Event},
	keywords = {blockchain, smart contracts, federated learning, auction, client selection, monetization},
	pages = {299--307},
}

@inproceedings{lee_blockchain-based_2019,
	address = {New York, NY, USA},
	series = {{RACS} '19},
	title = {Blockchain-{Based} {RBAC} for {User} {Authentication} with {Anonymity}},
	isbn = {978-1-4503-6843-8},
	url = {https://doi.org/10.1145/3338840.3355673},
	doi = {10.1145/3338840.3355673},
	abstract = {RBAC is a traditional approach of controlling who wants to access resources in a computer system through a permission to a role. Blockchain is an open, distributed ledger that can permanently record transactions. Smart Contract facilitates negotiations for a trustless transaction by enabling automatic payment. It is currently being applied to various kinds of business applications. In a smart contract that requires payment with cryptocurrency, if access control is performed only without individual authentication, progress for applications to various fields will be restricted. In this paper, we propose a blockchain-based RBAC with an authentication mechanism that can provides role-based access control while also providing individual account-based authentication. We have defined three interfaces based on blockchain to realize it. The proposed mechanism provides anonymity-based authentication by using a hash function with a pass that is indistinguishable from the owner. This was simulated on an Ethereum-based test network and compared with existing methods. The proposed mechanism not only added authentication methods, but also was more efficient in gas use and performance time than the existing RBAC model.},
	booktitle = {Proceedings of the {Conference} on {Research} in {Adaptive} and {Convergent} {Systems}},
	publisher = {Association for Computing Machinery},
	author = {Lee, YongJoo and Lee, Keon Myung},
	year = {2019},
	note = {event-place: Chongqing, China},
	keywords = {blockchain, smart contract, ethereum, anonymity, authentication, RBAC (role-based access control)},
	pages = {289--294},
}

@article{corradini_engineering_2022,
	title = {Engineering {Trustable} and {Auditable} {Choreography}-{Based} {Systems} {Using} {Blockchain}},
	volume = {13},
	issn = {2158-656X},
	url = {https://doi.org/10.1145/3505225},
	doi = {10.1145/3505225},
	abstract = {A key challenge in engineering distributed systems consists in the integration into their development of a decentralised infrastructure allowing the system participants to trust each other. In this article, we face such a challenge by proposing a model-driven methodology and a related framework to support the engineering of trustable and auditable systems. The approach is based on choreography diagrams specified in the Business Process Model and Notation standard, describing the interactions that should occur among the distributed components of systems. We support the whole lifecycle of choreographies, from their modelling to their distributed execution and auditing. The framework, based on blockchain technology, is named ChorChain. More specifically, ChorChain takes as input a BPMN choreography model and automatically translates it into a Solidity smart contract. The smart contract permits us to enforce the interactions among the cooperating components as prescribed by the choreography model. By leveraging on the auditability of blockchain, ChorChain also supports the activity of auditors continuously. In such a way, ChorChain enables auditors to get some degree of assurance on what happens simultaneously with, or shortly after, information disclosure. We assess the feasibility and effectiveness of the proposed methodology and framework through experiments conducted on the Rinkeby Ethereum Testnet.},
	number = {3},
	journal = {ACM Trans. Manage. Inf. Syst.},
	author = {Corradini, Flavio and Marcelletti, Alessandro and Morichetta, Andrea and Polini, Andrea and Re, Barbara and Tiezzi, Francesco},
	month = feb,
	year = {2022},
	note = {Place: New York, NY, USA
Publisher: Association for Computing Machinery},
	keywords = {blockchain, BPMN, auditing, choreography, execution, trust},
}

@article{zheng_securing_2022,
	title = {Securing the {Ethereum} from {Smart} {Ponzi} {Schemes}: {Identification} {Using} {Static} {Features}},
	issn = {1049-331X},
	url = {https://doi.org/10.1145/3571847},
	doi = {10.1145/3571847},
	abstract = {Malware detection approaches have been extensively studied for traditional software systems. However, the development of blockchain technology has promoted the birth of a new type of software system–decentralized applications. Composed of smart contracts, a type of application that implements the Ponzi scheme logic (called smart Ponzi schemes) has caused irreversible loss and hindered the development of blockchain technology. These smart contracts generally had a short life but involved a large amount of money. Whereas identification of these Ponzi schemes before causing financial loss has been significantly important, existing methods suffer from three main deficiencies, i.e., the insufficient dataset, the reliance on the transaction records, and the low accuracy. In this study, we first build a larger dataset. Then, a large number of features from multiple views, including bytecode, semantic, and developers, are extracted. These features are independent of the transaction records. Furthermore, we leveraged machine learning methods to build our identification model, i.e., Multi-view Cascade Ensemble model (MulCas). The experiment results show that MulCas can achieve higher performance and robustness in the scope of our dataset. Most importantly, the proposed method can identify smart Ponzi scheme at the creation time.},
	journal = {ACM Trans. Softw. Eng. Methodol.},
	author = {Zheng, Zibin and Chen, Weili and Zhong, Zhijie and Chen, Zhiguang and Lu, Yutong},
	month = nov,
	year = {2022},
	note = {Place: New York, NY, USA
Publisher: Association for Computing Machinery},
	keywords = {Blockchain, Ethereum, Malware Detection, Ponzi Schemes},
	annote = {Just Accepted},
}

@inproceedings{liu_novel_2020,
	address = {New York, NY, USA},
	series = {{IECC} '20},
	title = {A {Novel} {Supply} {Chain} {Model} {Based} on {Smart} {Contract}},
	isbn = {978-1-4503-7770-6},
	url = {https://doi.org/10.1145/3409934.3409942},
	doi = {10.1145/3409934.3409942},
	abstract = {Facing on bursting of the huge quantity of trade, the problem of finance by micro and small firms, the expansion of business development of core enterprise in supply chain, the development of comprehensive finance services, it is not well worked by traditional ways. Moreover it is more and more restricting the development of supply chain. Considering the advantages of automatic executing and high efficiency of smart contract, the feature of decentralization, security, trustworthiness and anti-tampering of blockchain, it was presented a novel supply chain model based on smart contract and blockchain for solving the problem totally. The model relied on the core enterprise of supply chain, integrated the upstream and downstream industries, constructed a consortium chain, that consisted of core enterprise, financial institutions, suppliers and dealers, formed an encrypted credit named ET (Electronic Trust) based on the trustworthiness of the trust industries chain. Actually, ET is equaled to the actual credit, it could be paid for the suppliers according to the cargo value before the last settlement. So the ET could combine the virtual and actual capital. Thus it also could further solve the common pain points of supply chain.},
	booktitle = {Proceedings of the 2nd {International} {Electronics} {Communication} {Conference}},
	publisher = {Association for Computing Machinery},
	author = {Liu, Haitao},
	year = {2020},
	note = {event-place: Singapore, Singapore},
	keywords = {blockchain, smart contract, ET, supply chain},
	pages = {115--120},
}

@inproceedings{zeng_blockchain_2020,
	address = {New York, NY, USA},
	series = {{ICBTA} 2019},
	title = {Blockchain {Based} {Smart} {Park}: {Cleaning} {Management}},
	isbn = {978-1-4503-7743-0},
	url = {https://doi.org/10.1145/3376044.3376046},
	doi = {10.1145/3376044.3376046},
	abstract = {Based on a practical park planning project, this paper analyzes the requirements of cleaning management, puts forward a blockchain based scheme of smart park cleaning. It proposes the service model of cleaning blockchain, and designs the system framework, DAPP modules, smart contracts and process flow of the cleaning blockchain system. The approach is also applicable for the application of blockchain technology in smart park public services, housekeeping, device maintenance and other fields.},
	booktitle = {Proceedings of the 2019 2nd {International} {Conference} on {Blockchain} {Technology} and {Applications}},
	publisher = {Association for Computing Machinery},
	author = {Zeng, Junfang and Zhang, Jing and Liu, Yu},
	year = {2020},
	note = {event-place: Xi'an, China},
	keywords = {Blockchain, Cleaning service, Smart park, Token-driven},
	pages = {53--58},
}

@book{noauthor_wetseb_2018,
	address = {New York, NY, USA},
	title = {{WETSEB} '18: {Proceedings} of the 1st {International} {Workshop} on {Emerging} {Trends} in {Software} {Engineering} for {Blockchain}},
	isbn = {978-1-4503-5726-5},
	abstract = {Welcome to WETSEB 2018, the 1st International Workshop on Emerging Trends in Software Engineering for Blockchain.The Workshop on Emerging Trends in Software Engineering for Blockchain inherits from the past eight editions of WETSoM (Workshop on Emerging Trends on Software Metrics) the challenges of gathering together researchers interested in emerging topics and trends in software engineering. This year the attention of organizers mainly focuses on a newly emerging field of research in a software technology whose powerful wide-spreading is disruptively invading academy, industry, finance, and media: the Blockchain software technology.Motivations for this workshop are the outstanding increased interest in software communities, in the academy, in the industry, in the finance and the media of the new emerging software technology of the Blockchain. Some observers are even talking of the dawn of a new era, with the potential of reshaping the current financial services technical infrastructure. This workshop aims at bringing the interest of researchers, practitioners, and people from industry to the current issues and new directions and challenges for blockchain-oriented software engineering, and at investigating the need for novel specialized software engineering practices for the Blockchain software sector.This year WETSEB features ten accepted papers, presenting a spectrum of reflections on blockchain application design, the complexity of languages for smart contracts, the use of blockchain for smart contracts, and visions on modeling blockchain-oriented software.},
	publisher = {Association for Computing Machinery},
	year = {2018},
}

@inproceedings{koscina_enabling_2019,
	address = {New York, NY, USA},
	series = {{WI} '19 {Companion}},
	title = {Enabling {Trust} in {Healthcare} {Data} {Exchange} with a {Federated} {Blockchain}-{Based} {Architecture}},
	isbn = {978-1-4503-6988-6},
	url = {https://doi.org/10.1145/3358695.3360897},
	doi = {10.1145/3358695.3360897},
	abstract = {We propose a new healthcare data exchange platform for research centers, hospitals and healthcare institutions. Our model is based on a federated blockchain network that interconnect the healthcare institutions and orchestrate the data life cycle from the data publication to the data consumption. The blockchain is responsabible to keep the traceability of the whole process and we use a specially designed smart contract to control the data sharing process. Moreover, we provide the means to enforce GDPR and thus achieve a GDPR compliant model.},
	booktitle = {{IEEE}/{WIC}/{ACM} {International} {Conference} on {Web} {Intelligence} - {Companion} {Volume}},
	publisher = {Association for Computing Machinery},
	author = {Koscina, Mirko and Manset, David and Negri-Ribalta, Claudia and Perez, Octavio},
	year = {2019},
	note = {event-place: Thessaloniki, Greece},
	keywords = {blockchain, smart contracts, data exchange, GDPR, health data},
	pages = {231--237},
}

@inproceedings{sauwens_scew_2021,
	address = {New York, NY, USA},
	series = {{PaPoC} '21},
	title = {{SCEW}: {Programmable} {BFT}-{Consensus} with {Smart} {Contracts} for {Client}-{Centric} {P2P} {Web} {Applications}},
	isbn = {978-1-4503-8338-7},
	url = {https://doi.org/10.1145/3447865.3457965},
	doi = {10.1145/3447865.3457965},
	abstract = {Collaborative web applications are becoming increasingly client-centric, with technologies such as WebRTC, WebWorkers and IndexedDB enabling a shift towards a decentralized peer-to-peer (P2P) model. Contemporary systems such as Automerge, Legion, OWebSync and Yjs provide fault tolerance and consistency by using Conflict-free Replicated Data Types for synchronization. These systems tolerate crash-faults, but lack resilience against arbitrary faults and malicious users, also known as Byzantine faults. Providing Byzantine fault tolerance (BFT) in web apps is non-trivial. Web apps are executed in web browsers on end user devices. The scarce compute resources and the interactive nature of collaborative web apps do require both a lightweight and low-latency solution, while still providing the Byzantine fault tolerance required by P2P systems to protect shared assets.Our work aims to fill this gap by indroducing SCEW, a programming framework for client-centric P2P web apps that require BFT and interactive collaboration. SCEW achieves this by combining state-based Convergent Replicated Data Types (CvRDTs) and smart contracts. SCEW represents assets shared by peers as CvRDTs with atomic register semanctics, that provide BFT through the use of BFT-consensus algorithms. SCEW employs smart contracts to define the life-cycle of these shared assets, shielding the application and it's developers from the complexity of the CvRDT's consensus protocol. Experimental results indicate that applications using SCEW can support P2P networks with 100 peers, even when Byzantine faults are present.},
	booktitle = {Proceedings of the 8th {Workshop} on {Principles} and {Practice} of {Consistency} for {Distributed} {Data}},
	publisher = {Association for Computing Machinery},
	author = {Sauwens, Martijn and Jannes, Kristof and Lagaisse, Bert and Joosen, Wouter},
	year = {2021},
	note = {event-place: Online, United Kingdom},
	keywords = {Smart Contracts, Byzantine Fault Tolerance, Peer-to-peer protocols, Web applications},
}

@inproceedings{van_moorsel_benchmarks_2018,
	address = {New York, NY, USA},
	series = {{ICPE} '18},
	title = {Benchmarks and {Models} for {Blockchain}},
	isbn = {978-1-4503-5095-2},
	url = {https://doi.org/10.1145/3184407.3184441},
	doi = {10.1145/3184407.3184441},
	abstract = {Blockchain is a highly popular paradigm for non-centralized applications, especially in finance and trade. Performance is a major challenge for blockchains, since consensus approaches are known not to scale. In this presentation we address blockchain performance, from the perspective of model-based prediction as well as benchmark-based assessment. We present research results about smart contracts in the Ethereum blockchain and discuss the requirements for generic benchmarks for blockchain performance. Benchmarking is a common approach to compare industry-class systems. As blockchain technologies mature, the role of reliable benchmarks will become increasingly important. However, definitions of benchmarks for blockchains are still in their infancy. We argue that there is a clear need for benchmarks, and that benchmarks should be based on the sound scientific principles of metrology [1]. A variety of important performance issues should be addressed, including the performance of the proof (be it work, stake, or other), transaction processing and block creation. Moreover, in all these situations, establishing energy consumption benchmarks is critical in determining if incentives are in place for miners to operate the blockchain system. A particularly interesting element in some blockchains is the mechanism of smart contracts. For instance, in Ethereum, the fees associated with executing contracts depend on the benchmarked performance of the operation code. In [2] it was demonstrated that uncertainty with respect to the correctness of the anticipated execution time impacts the decisions miners will take. We will discuss improved benchmarking approaches for operational code.},
	booktitle = {Proceedings of the 2018 {ACM}/{SPEC} {International} {Conference} on {Performance} {Engineering}},
	publisher = {Association for Computing Machinery},
	author = {van Moorsel, Aad},
	year = {2018},
	note = {event-place: Berlin, Germany},
	keywords = {blockchain, performance, benchmark, performance modeling},
	pages = {3},
}

@inproceedings{eskandari_sok_2021,
	address = {New York, NY, USA},
	series = {{AFT} '21},
	title = {{SoK}: {Oracles} from the {Ground} {Truth} to {Market} {Manipulation}},
	isbn = {978-1-4503-9082-8},
	url = {https://doi.org/10.1145/3479722.3480994},
	doi = {10.1145/3479722.3480994},
	abstract = {One fundamental limitation of blockchain-based smart contracts is that they execute in a closed environment. Thus, they only have access to data and functionality that is already on the blockchain, or is fed into the blockchain. Any interactions with the real world need to be mediated by a bridge service, which is called an oracle. As decentralized applications mature, oracles are playing an increasingly prominent role. With their evolution comes more attacks, necessitating greater attention to their trust model. In this systemization of knowledge paper (SoK), we dissect the design alternatives for oracles, showcase attacks, and discuss attack mitigation strategies.},
	booktitle = {Proceedings of the 3rd {ACM} {Conference} on {Advances} in {Financial} {Technologies}},
	publisher = {Association for Computing Machinery},
	author = {Eskandari, Shayan and Salehi, Mehdi and Gu, Wanyun Catherine and Clark, Jeremy},
	year = {2021},
	note = {event-place: Arlington, Virginia},
	pages = {127--141},
}

@inproceedings{engel_composing_2021,
	address = {New York, NY, USA},
	series = {{AFT} '21},
	title = {Composing {Networks} of {Automated} {Market} {Makers}},
	isbn = {978-1-4503-9082-8},
	url = {https://doi.org/10.1145/3479722.3480987},
	doi = {10.1145/3479722.3480987},
	abstract = {Automated market makers (AMMs) are automata that trade electronic assets at rates set by mathematical formulas. AMMs are usually implemented by smart contracts on blockchains. In practice, AMMs are often composed: trades can be split across AMMs, and outputs from one AMM can be directed to another. This paper proposes a mathematical model for AMM composition. We define sequential and parallel composition operators for AMMs in a way that ensures that AMMs are closed under composition, in a way that works for "higher-dimensional" AMMs that manage more than two asset classes, and so the composition of AMMs in "stable" states remains stable.},
	booktitle = {Proceedings of the 3rd {ACM} {Conference} on {Advances} in {Financial} {Technologies}},
	publisher = {Association for Computing Machinery},
	author = {Engel, Daniel and Herlihy, Maurice},
	year = {2021},
	note = {event-place: Arlington, Virginia},
	pages = {15--28},
}

@inproceedings{maksymyuk_blockchain-based_2021,
	address = {New York, NY, USA},
	series = {{SenSys} '21},
	title = {Blockchain-{Based} {Decentralized} {Service} {Provisioning} in {Local} {6G} {Mobile} {Networks}},
	isbn = {978-1-4503-9097-2},
	url = {https://doi.org/10.1145/3485730.3493821},
	doi = {10.1145/3485730.3493821},
	abstract = {The paper presents a novel vision on the application of blockchain technology to empower the dynamic service provisioning in future 6G mobile networks. We propose a platform for decentralized service level agreement (SLA) negotiation between users and mobile network operators (MNOs) based on smart contracts and cryptocurrencies. In addition, the new quality of experience (QoE) model is proposed for end-users to customize their trade-off between SLA and service price. Finally, we develop the method of dynamic service selection among multiple MNOs that provides border-less connectivity for end-users with the guaranteed QoE regardless of the serving MNO.},
	booktitle = {Proceedings of the 19th {ACM} {Conference} on {Embedded} {Networked} {Sensor} {Systems}},
	publisher = {Association for Computing Machinery},
	author = {Maksymyuk, Taras and Volosin, Marcel and Gazda, Juraj and Liyanage, Madhusanka},
	year = {2021},
	note = {event-place: Coimbra, Portugal},
	keywords = {Blockchain, 6G, QoE, SLA},
	pages = {516--519},
}

@inproceedings{wang_loan_2022,
	address = {New York, NY, USA},
	series = {{BIOTC} '22},
	title = {Loan {Chain}: {A} {Blockchain}-{Based} {Framework} for {Smart} {Credit} {Lending}},
	isbn = {978-1-4503-9662-2},
	url = {https://doi.org/10.1145/3559795.3559797},
	doi = {10.1145/3559795.3559797},
	abstract = {Abstract. Credit transactions require an extra level of security, trust, and privacy. Although the bank's credit transaction system technology has gradually improved, it still has high labour costs, inefficiencies, and security concerns. This study proposes a standardized blockchain application model in fintech and discovers that blockchain has broad prospects that can be realized through distributed consensus, smart contract execution, cryptographic algorithms, and distributed ledgers, which increase transparency, efficiency, and fairness in the financial industry. This study also deployed an automated machine learning system at the stage where banks qualify borrowers, optimizing the original credit model.},
	booktitle = {Proceedings of the 2022 4th {Blockchain} and {Internet} of {Things} {Conference}},
	publisher = {Association for Computing Machinery},
	author = {Wang, Yibai and Liu, Yiyang},
	year = {2022},
	note = {event-place: Tokyo, China},
	keywords = {blockchain, automated machine learning, smart credit lending},
	pages = {11--15},
}

@inproceedings{trotter_mobile_2020,
	address = {New York, NY, USA},
	series = {{HotMobile} '20},
	title = {A {Mobile} {Platform} for {Event}-{Driven} {Donations} {Using} {Smart} {Contracts}},
	isbn = {978-1-4503-7116-2},
	url = {https://doi.org/10.1145/3376897.3379161},
	doi = {10.1145/3376897.3379161},
	abstract = {We demonstrate Smart Donations, a blockchain powered mobile platform and application that facilitates a novel model for real-time, condition-based donations using smart contracts. By leveraging the benefits of blockchain technology, Smart Donations empower donors to (i) attach conditions dependent on real-world phenomena to a donation, (ii) store funds in a secure, transparent and decentralised escrow, and (iii) automatically release funds to charitable organisations or particular projects once the donor's conditions have been met. We believe this mobile prototype demonstrates a compelling new approach to charitable giving that leverages dynamic pledge controls and considers new trust relationships between donors and NGOs.},
	booktitle = {Proceedings of the 21st {International} {Workshop} on {Mobile} {Computing} {Systems} and {Applications}},
	publisher = {Association for Computing Machinery},
	author = {Trotter, Ludwig and Harding, Mike and Elsden, Chris and Davies, Nigel and Speed, Chris},
	year = {2020},
	note = {event-place: Austin, TX, USA},
	keywords = {smart contracts, blockchains, charity, conditionality},
	pages = {108},
}

@inproceedings{lippmeier_smart_2019,
	address = {New York, NY, USA},
	series = {{PPDP} '19},
	title = {Smart {Contracts} as {Authorized} {Production} {Rules}},
	isbn = {978-1-4503-7249-7},
	url = {https://doi.org/10.1145/3354166.3354179},
	doi = {10.1145/3354166.3354179},
	abstract = {Rainfall is a smart contract programming model that allows mutually distrusting parties to manage assets on a distributed ledger. The model consists of a tuple space of authorized facts, and a set of production rules. Rules match on authorized facts, gaining their authority, and produce new facts with a subset of the gained authority. Rainfall allows assets such as crypto currencies to be defined in user code, rather than being baked directly into the ledger framework. Our authorization model also provides a natural privacy model, where not all rules or facts need to be revealed to all parties.},
	booktitle = {Proceedings of the 21st {International} {Symposium} on {Principles} and {Practice} of {Declarative} {Programming}},
	publisher = {Association for Computing Machinery},
	author = {Lippmeier, Ben and Robinson, Amos and Muys, Andrae},
	year = {2019},
	note = {event-place: Porto, Portugal},
}

@inproceedings{zhang_catering_2019,
	address = {New York, NY, USA},
	series = {{IECC} '19},
	title = {Catering {System} {Design} of {Smart} {Park} {Based} on {Blockchain} {Technology}},
	isbn = {978-1-4503-7177-3},
	url = {https://doi.org/10.1145/3343147.3343166},
	doi = {10.1145/3343147.3343166},
	abstract = {Smart Park becomes the main development direction of new-type industrial park. For the operation target of efficient, transparent and intelligent park, blockchain technology is applied to realize tamper-proof, traceability and high security. In this paper, the characteristics of blockchain type are analyzed, and consortium blockchain is proposed to construct the Smart Park System. Taking the catering system of Smart Park as an example, this paper explores the application of blockchain technology in the practical scene of Smart Park, analyzes the blockchain-based catering system process model and key technologies in detail, and designs the implementation method of smart contract.},
	booktitle = {Proceedings of the 1st {International} {Electronics} {Communication} {Conference}},
	publisher = {Association for Computing Machinery},
	author = {Zhang, Jing and Zeng, Junfang and Du, Huaming and An, Yuguo and Zhao, Jian},
	year = {2019},
	note = {event-place: Okinawa, Japan},
	keywords = {blockchain, smart contract, catering system, Smart Park},
	pages = {111--117},
}

@inproceedings{wang_computational_2022,
	address = {New York, NY, USA},
	series = {{ICCAI} '22},
	title = {A {Computational} {Trust} {Model} {Based} on {Hyperledger} {Fabric} {Blockchain}},
	isbn = {978-1-4503-9611-0},
	url = {https://doi.org/10.1145/3532213.3532239},
	doi = {10.1145/3532213.3532239},
	abstract = {The core component of the blockchain is smart contracts, which are the basis for connecting countless nodes and executing transactions. In smart contracts, trust often replaces trust in the form of proof of workload, proof of identity, proof of authorization, etc. Therefore, in the transaction process of the core chain, the node usually sees a concept of quantity, and does not know the change course of the agent's trust, so that it cannot fully grasp the dynamic process of the agent and the change of the trust evaluation value. The researches of computational trust has deeply affected the global economic and social development, and have been widely used in some large platforms such as ICAO PKD trust platform, EU's eIDAS platform, US FICAM system and so on. The current solution is a combination of limited mathematical models and assumptions that are far from the operational level. Hyperledger has superior performance in data access, invocation, operability, tamperability, traceability and other aspects, and is more suitable for the study of computational trust models. This study introduces the hyperledger technology to construct a computational trust model, and the main factors affecting the computational trust model are analyzed by using the Hyperledger Fabric technology, which is as the form of one to one to correspond to each node in the hyperledger, and realizes the trust transmission of the node, by sorting each node in the consensus chain, and passes. The interface technology realizes the docking between the model and the Hyperledger Fabric system. And then this paper analyzes the composition system of the computational trust model based on Hyperledger Fabric.},
	booktitle = {Proceedings of the 8th {International} {Conference} on {Computing} and {Artificial} {Intelligence}},
	publisher = {Association for Computing Machinery},
	author = {Wang, Qingnian and He, Xinyi and Wu, Li and Zeng, Yanfei},
	year = {2022},
	note = {event-place: Tianjin, China},
	keywords = {Hyperledger Fabric, Application, Computational Trust},
	pages = {172--180},
}

@inproceedings{manevich_service_2018,
	address = {New York, NY, USA},
	series = {{DEBS} '18},
	title = {Service {Discovery} for {Hyperledger} {Fabric}},
	isbn = {978-1-4503-5782-1},
	url = {https://doi.org/10.1145/3210284.3219766},
	doi = {10.1145/3210284.3219766},
	abstract = {Hyperledger Fabric (HLF) is a modular and extensible permissioned blockchain platform released to open-source and hosted by the Linux Foundation. The platform's design exhibits principles required by enterprise grade business applications like supply-chains, financial transactions, asset management, food safety, and many more. For that end HLF introduces several innovations, two of which are smart contracts in general purpose languages (chaincode in HLF), and flexible endorsement policies, which govern whether a transaction is considered valid.Typical blockchain applications are comprised of two tiers: the first tier focuses on the modelling of the data schema and embedding of business rules into the blockchain by means of smart contracts (chaincode) and endorsment policies; and the second tier uses the SDK (Software Development Kit) provided by HLF to implement client side application logic.However there is a gap between the two tiers that hinders the rapid adoption of changes in the chaincode and endorsement policies within the client SDK. Currently, the chaincode location and endorsement policies are statically configured into the client SDK. This limits the reliability and availability of the client in the event of changes in the platform, and makes the platform more difficult to use. In this work we address and bridge the gap by describing the design and implementation of Service Discovery.Service Discovery provides APIs which allow dynamic discovery of the configuration required for the client SDK to interact with the platform, alleviating the client from the burden of maintaining it. This enables the client to rapidly adapt to changes in the platform, thus significantly improving the reliability of the application layer. It also makes the HLF platform more consumable, simplifying the job of creating blockchain applications.},
	booktitle = {Proceedings of the 12th {ACM} {International} {Conference} on {Distributed} and {Event}-{Based} {Systems}},
	publisher = {Association for Computing Machinery},
	author = {Manevich, Yacov and Barger, Artem and Tock, Yoav},
	year = {2018},
	note = {event-place: Hamilton, New Zealand},
	keywords = {Blockchain, Distributed Ledger, Service Discovery},
	pages = {226--229},
}

@inproceedings{nagar_privacy-preserving_2021,
	address = {Richland, SC},
	series = {{AAMAS} '21},
	title = {Privacy-{Preserving} and {Accountable} {Multi}-{Agent} {Learning}},
	isbn = {978-1-4503-8307-3},
	abstract = {Distributed multi-agent learning enables agents to cooperatively train a model without requiring to share their datasets. While this setting ensures some level of privacy, it has been shown that, even when data is not directly shared, the training process is vulnerable to privacy attacks including data reconstruction and model inversion attacks. Additionally, malicious agents that train on inverted labels or random data, may arbitrarily weaken the accuracy of the global model. This paper addresses these challenges and presents Privacy-preserving and Accountable Distributed Learning (PA-DL), a fully decentralized framework that relies on Differential Privacy to guarantee strong privacy protection of the agents data, and Ethereum smart contracts to ensure accountability.},
	booktitle = {Proceedings of the 20th {International} {Conference} on {Autonomous} {Agents} and {MultiAgent} {Systems}},
	publisher = {International Foundation for Autonomous Agents and Multiagent Systems},
	author = {Nagar, Anudit and Tran, Cuong and Fioretto, Ferdinando},
	year = {2021},
	note = {event-place: Virtual Event, United Kingdom},
	keywords = {blockchain, differential privacy, multi-agent learning},
	pages = {1605--1606},
}

@inproceedings{eshghie_dynamic_2021,
	address = {New York, NY, USA},
	series = {{EASE} 2021},
	title = {Dynamic {Vulnerability} {Detection} on {Smart} {Contracts} {Using} {Machine} {Learning}},
	isbn = {978-1-4503-9053-8},
	url = {https://doi.org/10.1145/3463274.3463348},
	doi = {10.1145/3463274.3463348},
	abstract = {In this work we propose Dynamit, a monitoring framework to detect reentrancy vulnerabilities in Ethereum smart contracts. The novelty of our framework is that it relies only on transaction metadata and balance data from the blockchain system; our approach requires no domain knowledge, code instrumentation, or special execution environment. Dynamit extracts features from transaction data and uses a machine learning model to classify transactions as benign or harmful. Therefore, not only can we find the contracts that are vulnerable to reentrancy attacks, but we also get an execution trace that reproduces the attack. Using a random forest classifier, our model achieved more than 90 percent accuracy on 105 transactions, showing the potential of our technique.},
	booktitle = {Evaluation and {Assessment} in {Software} {Engineering}},
	publisher = {Association for Computing Machinery},
	author = {Eshghie, Mojtaba and Artho, Cyrille and Gurov, Dilian},
	year = {2021},
	note = {event-place: Trondheim, Norway},
	keywords = {Blockchain, Ethereum, Smart Contracts, Vulnerability Detection, Machine Learning for Dynamic Software Analysis},
	pages = {305--312},
}

@inproceedings{dasaklis_defining_2019,
	address = {New York, NY, USA},
	series = {{COINS} '19},
	title = {Defining {Granularity} {Levels} for {Supply} {Chain} {Traceability} {Based} on {IoT} and {Blockchain}},
	isbn = {978-1-4503-6640-3},
	url = {https://doi.org/10.1145/3312614.3312652},
	doi = {10.1145/3312614.3312652},
	abstract = {Identifying the optimal granularity level of traceable units is necessary when implementing traceability, particularly in food supply chains. In this paper we propose a generic framework for defining granularity levels based on product's unique characteristics, supply chain processes and stakeholders engagement. We determine different levels of granularity by using smart contracts within a blockchain-enabled supply chain traceability architecture. The granularity relates to different levels depending on the application of information within a company and between companies across complex supply chain networks. The applicability of the proposed framework is demonstrated with a food supply chain use case scenario by developing a local private blockchain-enabled architecture. The overall benefits of the proposed model are discussed along with several fruitful areas for further research directions.},
	booktitle = {Proceedings of the {International} {Conference} on {Omni}-{Layer} {Intelligent} {Systems}},
	publisher = {Association for Computing Machinery},
	author = {Dasaklis, Thomas K. and Casino, Fran and Patsakis, Constantinos},
	year = {2019},
	note = {event-place: Crete, Greece},
	keywords = {blockchain, smart contract, IoT, supply chain},
	pages = {184--190},
}

@inproceedings{yang_blockchain_2021,
	address = {New York, NY, USA},
	series = {e-{Energy} '21},
	title = {Blockchain for {Transactive} {Energy} {Management} of {Distributed} {Energy} {Resources} in {Smart} {Grid}},
	isbn = {978-1-4503-8333-2},
	url = {https://doi.org/10.1145/3447555.3464848},
	doi = {10.1145/3447555.3464848},
	abstract = {This work presents the design and implementation of a blockchain system that enables the trustable transactive energy management for distributed energy resources (DERs). We model the interactions among DERs, including energy trading and flexible appliance scheduling, as a cost minimization problem. Considering the dispersed nature and diverse ownership of DERs, we develop a distributed algorithm to solve the optimization problem using the alternating direction method of multipliers (ADMM) method. Furthermore, we develop a blockchain system, on which we implement the proposed algorithm with the smart contract, to guarantee the transparency and correctness of the energy management. We prototype the blockchain in a small-scale test network and evaluate it through experiments using real-world data. The experimental results validate the feasibility and effectiveness of our design.},
	booktitle = {Proceedings of the {Twelfth} {ACM} {International} {Conference} on {Future} {Energy} {Systems}},
	publisher = {Association for Computing Machinery},
	author = {Yang, Qing and Wang, Hao and Wu, Xiaoxiao and Wang, Taotao and Zhang, Shengli},
	year = {2021},
	note = {event-place: Virtual Event, Italy},
	keywords = {Blockchain, Distributed energy resource (DER), Distributed optimization, Energy trading, Smart grid, Transactive energy},
	pages = {211--215},
}

@inproceedings{ramachandran_smartprovenance_2018,
	address = {New York, NY, USA},
	series = {{CODASPY} '18},
	title = {{SmartProvenance}: {A} {Distributed}, {Blockchain} {Based} {DataProvenance} {System}},
	isbn = {978-1-4503-5632-9},
	url = {https://doi.org/10.1145/3176258.3176333},
	doi = {10.1145/3176258.3176333},
	abstract = {Blockchain technology has evolved from being an immutable ledger of transactions for cryptocurrencies to a programmable interactive environment for building distributed reliable applications. Although the blockchain technology has been used to address various challenges, to our knowledge none of the previous work focused on using Blockchain to develop a secure and immutable scientific data provenance management framework that automatically verifies the provenance records. In this work, we leverage Blockchain as a platform to facilitate trustworthy data provenance collection, verification, and management. The developed system utilizes smart contracts and open provenance model (OPM) to record immutable data trails. We show that our proposed framework can securely capture and validate provenance data that prevents any malicious modification to the captured data as long as the majority of the participants are honest.},
	booktitle = {Proceedings of the {Eighth} {ACM} {Conference} on {Data} and {Application} {Security} and {Privacy}},
	publisher = {Association for Computing Machinery},
	author = {Ramachandran, Aravind and Kantarcioglu, Murat},
	year = {2018},
	note = {event-place: Tempe, AZ, USA},
	keywords = {blockchain platform, data provenance, distributed systems, knowledge management},
	pages = {35--42},
}

@inproceedings{ten_engineering_2022,
	address = {New York, NY, USA},
	series = {{WebSci} '22},
	title = {Engineering {Blockchain} {Enabling} {Win} {A} {Fortune} {Game} among {Novice} through {EAOM}},
	isbn = {978-1-4503-9191-7},
	url = {https://doi.org/10.1145/3501247.3539018},
	doi = {10.1145/3501247.3539018},
	abstract = {Blockchain application development has received much attention nowadays. As development is complex and challenging, a systematic approach is needed to improve the product, services, and process quality. Despite the introduction of techniques, there are still inadequate models for demonstrating the blockchain's internal architecture. Hence, there is a gap when developing the blockchain application, a gap in the modelling environment of a blockchain development application. This paper introduces a new insight into blockchain application development through extended Agent-Oriented Modelling (eAOM). eAOM is a methodology for complex socio-technical system development, and we believe that it can reduce the complexity of implementing the blockchain application. In this paper, the eAOM is used to model a blockchain-based “win a fortune” system, which includes smart contract development. It showcases the feasibility of adopting eAOM to model a blockchain enabling application. A usability survey among the novices has further validated the usability and benefits of eAOM in the blockchain enabling application development.},
	booktitle = {14th {ACM} {Web} {Science} {Conference} 2022},
	publisher = {Association for Computing Machinery},
	author = {Ten, Michellelibin and Cheah, WaiShiang and Sim, Yee Wai},
	year = {2022},
	note = {event-place: Barcelona, Spain},
	keywords = {Agent Oriented Modelling, Blockchain application development, Ethereum Smart Contract, Model-driven Engineering},
	pages = {443--450},
}

@inproceedings{dangelo_blockchain-based_2018,
	address = {New York, NY, USA},
	series = {{CryBlock}'18},
	title = {A {Blockchain}-{Based} {Flight} {Data} {Recorder} for {Cloud} {Accountability}},
	isbn = {978-1-4503-5838-5},
	url = {https://doi.org/10.1145/3211933.3211950},
	doi = {10.1145/3211933.3211950},
	abstract = {Many companies rely on Cloud infrastructures for their computation, communication and data storage requirements. While Cloud services provide some benefits, e.g., replacing high upfront costs for an IT infrastructure with a pay-as-you-go model, they also introduce serious concerns that are notoriously difficult to address. In essence, Cloud customers are storing data and running computations on infrastructures that they can not control directly. Therefore, when problems arise – violations of Service Level Agreements, data corruption, data leakage, security breaches – both customers and Cloud providers face the challenge of agreeing on which party is to be held responsible. In this paper, we review the challenges and requirements for enforcing accountability in Cloud infrastructures, and argue that smart contracts and blockchain technologies might provide a key contribution towards accountable Clouds.},
	booktitle = {Proceedings of the 1st {Workshop} on {Cryptocurrencies} and {Blockchains} for {Distributed} {Systems}},
	publisher = {Association for Computing Machinery},
	author = {D'Angelo, Gabriele and Ferretti, Stefano and Marzolla, Moreno},
	year = {2018},
	note = {event-place: Munich, Germany},
	keywords = {Blockchain, Smart Contracts, Cloud Computing, Accountability},
	pages = {93--98},
}

@inproceedings{zhao_temporal_2021,
	address = {New York, NY, USA},
	series = {{WWW} '21},
	title = {Temporal {Analysis} of the {Entire} {Ethereum} {Blockchain} {Network}},
	isbn = {978-1-4503-8312-7},
	url = {https://doi.org/10.1145/3442381.3449916},
	doi = {10.1145/3442381.3449916},
	abstract = {With over 42 billion USD market capitalization (October 2020), Ethereum is the largest public blockchain that supports smart contracts. Recent works have modeled transactions, tokens, and other interactions in the Ethereum blockchain as static graphs to provide new observations and insights by conducting relevant graph analysis. Surprisingly, there is much less study on the evolution and temporal properties of these networks. In this paper, we investigate the evolutionary nature of Ethereum interaction networks from a temporal graphs perspective. We study the growth rate and model of four Ethereum blockchain networks, active lifespan and update rate of high-degree vertices. We detect anomalies based on temporal changes in global network properties, and forecast the survival of network communities in succeeding months leveraging on the relevant graph features and machine learning models.},
	booktitle = {Proceedings of the {Web} {Conference} 2021},
	publisher = {Association for Computing Machinery},
	author = {Zhao, Lin and Sen Gupta, Sourav and Khan, Arijit and Luo, Robby},
	year = {2021},
	note = {event-place: Ljubljana, Slovenia},
	keywords = {Blockchain, Ethereum, Smart Contract, Temporal Network Analysis},
	pages = {2258--2269},
}

@inproceedings{tripathy_beyond_2021,
	address = {New York, NY, USA},
	series = {{BSCI} '21},
	title = {Beyond {Uber} and {Lyft}: {A} {Decentralized} {Cab} {Consortium} over {Blockchains}},
	isbn = {978-1-4503-8400-1},
	url = {https://doi.org/10.1145/3457337.3457847},
	doi = {10.1145/3457337.3457847},
	abstract = {Car sharing facilitates car owners and renters to share and use their cars conveniently. The popular car-sharing systems like Car2Go or Zipcar provide such facilities; however, they work line an intermediary or broker and thus pose various security and privacy threats. This paper proposes an alternate car-sharing model by constructing a decentralized cab consortium where the car owners and the renters can directly interact and share the car based on certain predefined agreements. We utilize the concept of smart contracts on top of a blockchain platform to realize such a system that provides a secured, tampered-proof, fair, and transparent interface for car sharing. We have implemented the proposed platform over an Ethereum-based environment and show that its runtime cost and performance are within a considerable margin.},
	booktitle = {Proceedings of the 3rd {ACM} {International} {Symposium} on {Blockchain} and {Secure} {Critical} {Infrastructure}},
	publisher = {Association for Computing Machinery},
	author = {Tripathy, Somanath and Aggarwal, Mayank and Chakraborty, Sandip},
	year = {2021},
	note = {event-place: Virtual Event, Hong Kong},
	keywords = {smart contract, ethereum, security, car sharing},
	pages = {97--102},
}

@inproceedings{liu_government_2021,
	address = {New York, NY, USA},
	series = {{ICBCT} '21},
	title = {Government {Data} {Sharing} {Based} on {Blockchain}},
	isbn = {978-1-4503-8962-4},
	url = {https://doi.org/10.1145/3460537.3460562},
	doi = {10.1145/3460537.3460562},
	abstract = {With the development of smart city, the cooperation between government sectors is becoming more and more frequent, breaking the information island and big data sharing has become an inevitable trend. The traditional way of government data sharing is mainly based on one unified data center, which has high construction cost and maintenance cost, and fails to fully consider the sectoral interests, authority, security and traceability, so there are still many barriers in government data sharing. Taking advantage of the features of blockchain technology, such as distributed ledger, smart contract, data trust and traceability, this paper proposes an application model of government data sharing based on blockchain, which uses a unified data sharing model and autonomous authority management to provide efficient and safe bus service for distributed government big data sharing.},
	booktitle = {2021 {The} 3rd {International} {Conference} on {Blockchain} {Technology}},
	publisher = {Association for Computing Machinery},
	author = {Liu, Yu and Zeng, Junfang},
	year = {2021},
	note = {event-place: Shanghai, China},
	keywords = {Authority management, Bus service, City brain, Data sharing model},
	pages = {123--128},
}

@inproceedings{antonino_solidifier_2021,
	address = {New York, NY, USA},
	series = {{SAC} '21},
	title = {Solidifier: {Bounded} {Model} {Checking} {Solidity} {Using} {Lazy} {Contract} {Deployment} and {Precise} {Memory} {Modelling}},
	isbn = {978-1-4503-8104-8},
	url = {https://doi.org/10.1145/3412841.3442051},
	doi = {10.1145/3412841.3442051},
	abstract = {The exploitation of smart-contract vulnerabilities can lead to catastrophic losses. Formal verification can be a useful tool in identifying these vulnerabilities before deployment. We present an encoding of Solidity and the Ethereum blockchain using Boogie, an intermediate verification language. Based on this formalisation, we create Solidifier: a bounded model checker for Solidity. Distinctive features of our encoding are precisely capturing Solidity's unorthodox memory model, a notion of lazy blockchain exploration, and memory-precise verification harnesses. Unlike much of the work in this area, our modus operandi is not matching contracts against specific known behavioural patterns that might lead to vulnerabilities. Rather, we provide a tool to find errors/bad states - be they vulnerabilities or not - that might be reached through behaviours that might not follow such a pattern.},
	booktitle = {Proceedings of the 36th {Annual} {ACM} {Symposium} on {Applied} {Computing}},
	publisher = {Association for Computing Machinery},
	author = {Antonino, Pedro and Roscoe, A. W.},
	year = {2021},
	note = {event-place: Virtual Event, Republic of Korea},
	keywords = {blockchain, smart contracts, ethereum, solidity, formal verification, boogie, bounded model checking, corral},
	pages = {1788--1797},
}

@article{zhao_sigvm_2022,
	title = {{SigVM}: {Enabling} {Event}-{Driven} {Execution} for {Truly} {Decentralized} {Smart} {Contracts}},
	volume = {6},
	url = {https://doi.org/10.1145/3563312},
	doi = {10.1145/3563312},
	abstract = {This paper presents SigVM, the first blockchain virtual machine that extends EVM to support an event-driven execution model, enabling developers to build truly decentralized smart contracts. Contracts in SigVM can emit signal events, on which other contracts can listen. Once an event is triggered, corresponding handler functions are automatically executed as signal transactions. We build an end-to-end blockchain platform SigChain and a contract language compiler SigSolid to realize the potential of SigVM. Experimental results show that our benchmark applications can be reimplemented with SigVM in a truly decentralized way, eliminating the dependency on centralized and unreliable mechanisms like off-chain relay servers. The development effort of reimplementing these contracts with SigVM is small, i.e., we modified on average 3.17\% of the contract code. The runtime and the gas overhead of SigVM on these contracts is negligible.},
	number = {OOPSLA2},
	journal = {Proc. ACM Program. Lang.},
	author = {Zhao, Zihan and Beillahi, Sidi Mohamed and Song, Ryan and Cai, Yuxi and Veneris, Andreas and Long, Fan},
	month = oct,
	year = {2022},
	note = {Place: New York, NY, USA
Publisher: Association for Computing Machinery},
	keywords = {Blockchain, Smart Contracts, Event-Driven, Virtual Machine},
}

@inproceedings{duan_towards_2022,
	address = {New York, NY, USA},
	series = {{CCS} '22},
	title = {Towards {Automated} {Safety} {Vetting} of {Smart} {Contracts} in {Decentralized} {Applications}},
	isbn = {978-1-4503-9450-5},
	url = {https://doi.org/10.1145/3548606.3559384},
	doi = {10.1145/3548606.3559384},
	abstract = {We propose VetSC, a novel UI-driven, program analysis guided model checking technique that can automatically extract contract semantics in DApps so as to enable targeted safety vetting. To facilitate model checking, we extract business model graphs from contract code that capture its intrinsic business and safety logic. To automatically determine what safety specifications to check, we retrieve textual semantics from DApp user interfaces. To exclude untrusted UI text, we also validate the UI-logic consistency and detect any discrepancies. We have implemented VetSC and applied it to 34 real-world DApps. Experiments have demonstrated that VetSC can accurately interpret smart contract code, enable autonomous safety vetting, and discover safety risks in real-world Dapps. Using our tool, we have successfully discovered 19 new safety risks in the wild, such as expired lottery tickets and double voting.},
	booktitle = {Proceedings of the 2022 {ACM} {SIGSAC} {Conference} on {Computer} and {Communications} {Security}},
	publisher = {Association for Computing Machinery},
	author = {Duan, Yue and Zhao, Xin and Pan, Yu and Li, Shucheng and Li, Minghao and Xu, Fengyuan and Zhang, Mu},
	year = {2022},
	note = {event-place: Los Angeles, CA, USA},
	keywords = {smart contracts, decentralized apps, safety verification, semantics},
	pages = {921--935},
}

@inproceedings{ojerinde_integration_2022,
	address = {New York, NY, USA},
	series = {{ICFNDS} 2021},
	title = {Integration {Of} {Consortium} {Blockchain} {Model} {In} {The} {Nigerian} {Banking} {Sector}},
	isbn = {978-1-4503-8734-7},
	url = {https://doi.org/10.1145/3508072.3508110},
	doi = {10.1145/3508072.3508110},
	abstract = {Conventionally, Nigerian banks rely on a less secure and time-consuming centralized clearinghouse where transactions are sorted out and balances are made. This paper presents a model for integrating permission DLT into the Nigerian banking sector. The proposed model has utilized Corda – permissioned DLT, to log transactions between parties on the chain such that those transactions are only visible to the participants of the transaction, thus, combatting fraudulent claims. Participants' details are also verified upon provision of their National Identification Number (NIN) and Bank Verification Number (BVN) as stipulated in the smart contract. This work has also avoided the problems inherent in the public blockchain that requires miners to spend gigantic computer resources and time validating and verifying blocks before being added to the chain. The result obtained is a developed DLT model for logging real-time transactions between banks and their clients.},
	booktitle = {The 5th {International} {Conference} on {Future} {Networks} \&amp; {Distributed} {Systems}},
	publisher = {Association for Computing Machinery},
	author = {Ojerinde, Oluwaseun Adeniyi and Salawu, Jonathan and A. Abisoye, Opeyemi and A. Uduimoh, Andrew},
	year = {2022},
	note = {event-place: Dubai, United Arab Emirates},
	pages = {252--257},
}

@inproceedings{kontogiannis_software_2021,
	address = {USA},
	series = {{CASCON} '21},
	title = {Software {Techniques} for {Engineering} {Cyber}-{Physical} {Systems}},
	abstract = {Cyber-Physical Systems (CPSs) refer to systems comprising software components, physical components, and social entities which monitor, control, and coordinate processes within a physical environment. CPSs apply to a wide range of mission-critical applications that span from the intelligent management of logistics in complex supply chains, advanced manufacturing systems, and smart contracts, all the way to autonomous systems, and systems that support the smart interactions between humans and machines (M2H), or between machines (M2M). In this respect, the engineering of CPSs goes beyond existing Software Engineering concepts, tools, and techniques because of the very nature of CPSs that spans three realms (cyber, physical, social) and therefore needs to address requirements that span these realms. During the workshop, the participants discussed and debated techniques and directions in six main thematic areas on engineering Cyber-Physical Systems. These thematic areas deal with specification and modeling, DevOps processes for CPSs, data management and analytics, infrastructure and event handling, run-time adaptivity, and finally security, trust, and traceability.},
	booktitle = {Proceedings of the 31st {Annual} {International} {Conference} on {Computer} {Science} and {Software} {Engineering}},
	publisher = {IBM Corp.},
	author = {Kontogiannis, Kostas and Amyot, Daniel and Mylopoulos, John},
	year = {2021},
	note = {event-place: Toronto, Canada},
	keywords = {continuous software engineering, fault-proneness prediction, process metrics, software repositories},
	pages = {289--290},
}

@inproceedings{cardenas_robot-human_2018,
	address = {New York, NY, USA},
	series = {{HRI} '18},
	title = {Robot-{Human} {Agreements} and {Financial} {Transactions} {Enabled} by a {Blockchain} and {Smart} {Contracts}},
	isbn = {978-1-4503-5615-2},
	url = {https://doi.org/10.1145/3173386.3177818},
	doi = {10.1145/3173386.3177818},
	abstract = {This paper explores the design of a robot and interaction model that enables a robot to engage in human-like financial transactions, and to enter into agreements with a human counterpart. More explicitly, (1) we bestow the agent with a cryptocurrency wallet and (2) define bilateral and multilateral agreements that can be automated as smart contracts in a distributed ledger. As a use case of a robot with such features, we describe roBU - a traveling robot, that can enter into financial agreements in exchange for assistance in traveling the world. With this effort, we expect to validate the idea of near-future scenarios where autonomous or semi-autonomous agents are endowed with, a type of, social autonomy and the ability to engage in financial transactions. We believe the latter can improve task completion and enable further exploration of robot-human relationships, dependencies and trust.},
	booktitle = {Companion of the 2018 {ACM}/{IEEE} {International} {Conference} on {Human}-{Robot} {Interaction}},
	publisher = {Association for Computing Machinery},
	author = {Cardenas, Irvin Steve and Kim, Jong Hoon},
	year = {2018},
	note = {event-place: Chicago, IL, USA},
	keywords = {blockchain, smart contracts, ethics, human robot interaction, machine agency, trustless systems},
	pages = {337--338},
}

@inproceedings{wu_performance_2022,
	address = {New York, NY, USA},
	series = {{EASE} '22},
	title = {Performance {Modeling} of {Hyperledger} {Fabric} 2.0},
	isbn = {978-1-4503-9613-4},
	url = {https://doi.org/10.1145/3530019.3531341},
	doi = {10.1145/3530019.3531341},
	abstract = {Hyperledger Fabric has become one of the most widely used consortium blockchain frameworks with the ability to execute custom smart contracts. Performance modeling and network evaluation are necessary for performance estimation and optimization of the Fabric blockchain platform. The compatibility and effectiveness of existing performance modeling methods must be improved. For this reason, we proposed a compatible performance modeling method using queuing theory for Fabric considering the limited transaction pool. Taking the 2.0 version of Fabric as a case, we have established the model for the transaction process in the Fabric network. By analyzing the two-dimensional continuous-time Markov process of this model, we solved the system stationary equation and obtained the analytical expressions of performance indicators such as the system throughput, the system steady-state queue length, and the system’s average response time. We collected the required parameter values through the official test suite. An extensive analysis and simulation was performed to verify the accuracy and the effectiveness of the model and formula. We believe that this method can be extended to a wide range of scenarios in other blockchain systems.},
	booktitle = {Proceedings of the {International} {Conference} on {Evaluation} and {Assessment} in {Software} {Engineering} 2022},
	publisher = {Association for Computing Machinery},
	author = {Wu, Ou and Li, Shanshan and Liu, Liwen and Zhang, He and Zhou, Xin and Lu, Qinghua},
	year = {2022},
	note = {event-place: Gothenburg, Sweden},
	keywords = {Blockchain, Hyperledger Fabric, Performance modeling, Queuing theory, Simulation},
	pages = {357--365},
}

@inproceedings{chen_power_2021,
	address = {New York, NY, USA},
	series = {Internetware '20},
	title = {Power {Trading} {Model} for {Distributed} {Power} {Generation} {Systems} {Based} on {Consortium} {Blockchains}},
	isbn = {978-1-4503-8819-1},
	url = {https://doi.org/10.1145/3457913.3457929},
	doi = {10.1145/3457913.3457929},
	abstract = {Distributed power generation systems based on clean energy experience a large development worldwide. However, existing centralized power trading models cannot support direct transactions between distributed power generation systems and power consumers. Existing centralized power trading models suffer from multi-agent untrustworthiness and risk of data tampering. In addition, the direct transactions involve a large number of producers and consumers, thus requiring high efficiency of transaction processing in power trading models. To tackle with the problems, we propose a weakly centralized power trading model based on consortium blockchains in this paper. The trading model facilitate the power trading process by using smart contracts on consortium blockchains. In addition, we propose an approach based on the Hotelling theory to determine the pricing for transaction in our power trading model. The experimental results show that our power trading model provides a stable throughput as the request rate of transactions increases. The power trading model proposed in this paper is more practical than those based on public blockchains.},
	booktitle = {Proceedings of the 12th {Asia}-{Pacific} {Symposium} on {Internetware}},
	publisher = {Association for Computing Machinery},
	author = {Chen, Ran and Zhang, Jiabei and Yuan, Fuquan and Zhou, Bo and Shi, Wei and Zhou, Haiming},
	year = {2021},
	note = {event-place: Singapore, Singapore},
	keywords = {Smart Contract, Hotelling Model, Keyword: Consortium Blockchain, Power Trading},
	pages = {91--98},
}

@inproceedings{norvill_decentralised_2020,
	address = {New York, NY, USA},
	series = {{IECC} '20},
	title = {Decentralised {Compliant} {Data} {Trading} for {Banks}},
	isbn = {978-1-4503-7770-6},
	url = {https://doi.org/10.1145/3409934.3409947},
	doi = {10.1145/3409934.3409947},
	abstract = {Banks must comply with a complex set of regulatory and legislative requirements in order to be sure they know who they are doing business with. Current Know Your Customer processes are inefficient and costly, often being repeated by multiple banks. As such, financial institutions have a need to reduce the cost of compliance. Banks can reduce their costs through inter-bank Know Your Customer data trading. In this paper, we build upon an industry-strength, blockchain-based, Know Your Customer data sharing platform to facilitate a novel data marketplace by detailing a method of pricing data such that banks save money and are suitably incentivised to trade their data. The pricing model we detail enables banks to reduce the cost of document acquisition and verification by at least 45\%, and even profit by providing documents. In addition, we discuss how decentralised pricing is realised through the use of smart contracts.},
	booktitle = {Proceedings of the 2nd {International} {Electronics} {Communication} {Conference}},
	publisher = {Association for Computing Machinery},
	author = {Norvill, Robert and Hilger, Jean and Awan, Irfan and Cullen, Andrea and State, Radu},
	year = {2020},
	note = {event-place: Singapore, Singapore},
	keywords = {Blockchain, Data Sharing, Banking, Data Pricing, FinTech, KYC},
	pages = {121--128},
}

@inproceedings{hammoudeh_bringing_2022,
	address = {New York, NY, USA},
	series = {{ICFNDS} 2021},
	title = {Bringing {Coordination} {Languages} {Back} to the {Future} {Using} {Blockchain} {Smart} {Contracts}},
	isbn = {978-1-4503-8734-7},
	url = {https://doi.org/10.1145/3508072.3508117},
	doi = {10.1145/3508072.3508117},
	abstract = {This paper presents a blockchain extension of the run-time Sensing as a Service SOA (3SOA) approach presented in\&nbsp;[5]. 3SOA defines a practical approach for implementing service-oriented Internet of Things (IoT) using coordination languages to integrate and program individual IoT objects to compose into full IoT system. We believe that the modularity, reuse, interoperability and portability of this model has much to offer, but that there exist some challenges in overcoming the performance issues inherent in the approach, and extending the range of applications to which it is suited. We are particularly interested in applying the coordination languages to decentralized systems. To this end, blockchain smart contracts are proposed to offer a decentralized trustable method to automatically verify compliance with pre-defined conditions before executing a transaction involving multiple parties. To validate our proposal, we demonstrate a healthcare functional prototypes as a proof of concept.},
	booktitle = {The 5th {International} {Conference} on {Future} {Networks} \&amp; {Distributed} {Systems}},
	publisher = {Association for Computing Machinery},
	author = {Hammoudeh, Mohammad and Adebisi, Bamidele and Unal, Devrim and Laouid, Abdelkader},
	year = {2022},
	note = {event-place: Dubai, United Arab Emirates},
	keywords = {blockchain, smart contracts, Internet of Things, service-oriented},
	pages = {299--304},
}

@inproceedings{zhang_blockchain_2022,
	address = {New York, NY, USA},
	series = {{ICBCT}'22},
	title = {A {Blockchain} {Enhanced} {Book} {Lending} {System} for {College} {Library}},
	isbn = {978-1-4503-9576-2},
	url = {https://doi.org/10.1145/3532640.3532663},
	doi = {10.1145/3532640.3532663},
	abstract = {The limited storage space of the library cannot support the continuous expansion of the book stock. Based on the contradiction between the collection and use of books, "collecting books for the people" may be a solution. A discrete lending model is built by blockchain technology to break through the library space for book lending. The system automatically executes the lending incentive mechanism on the smart contracts and uses the tokens in the blockchain platform as assets to complete the transaction. An auction mechanism model is proposed based on tokens and the discrete space of users to solve the problem of discretized borrowing of readers. Meanwhile, a queuing model is used to verify the feasibility of the system. Results show that the blockchain-based lending system shortens the average waiting time than traditional lending services. The blockchain lending method helps solve the shortage of library space resources and improves users' lending experience.},
	booktitle = {The 2022 4th {International} {Conference} on {Blockchain} {Technology}},
	publisher = {Association for Computing Machinery},
	author = {Zhang, Xuming and Zhang, Xiao and Li, Rende},
	year = {2022},
	note = {event-place: Shanghai, China},
	keywords = {Blockchain, Auction mechanism, Book Circulation},
	pages = {160--165},
}

@inproceedings{pan_blockchain_2021,
	address = {New York, NY, USA},
	series = {{ICBCT} '21},
	title = {Blockchain {Based} {Transaction} {Management} {System} for {IC} {Industry}},
	isbn = {978-1-4503-8962-4},
	url = {https://doi.org/10.1145/3460537.3460539},
	doi = {10.1145/3460537.3460539},
	abstract = {With the development of Internet technology, all walks of life are undergoing industrial revolution and upgrading. Nowadays, many transactions in the integrated circuit (IC) industry chain have moved from offline to online, most of which are completed through trusted third-party platforms as the transaction medium. This transaction model, which relies on centralized institutions, is vulnerable to malicious cyberattacks, poses a risk of core technology theft for technology-intensive industries, and lacks the ability to trace the trajectory of transactions. To solve the above problems, this paper proposes a consortium chain-based transaction management system for the IC industry chain based on the transaction characteristics of commodities in the IC industry chain, designs an improved Raft consensus mechanism based on stability, credibility and contribution factors, a Prometheus-based data monitoring mechanism, and a set of smart contracts for on-chain transactions, implements a prototype system and tests its performance. The results show that the system can solve the above problems well and has high credibility and stability.},
	booktitle = {2021 {The} 3rd {International} {Conference} on {Blockchain} {Technology}},
	publisher = {Association for Computing Machinery},
	author = {Pan, Lei and Wu, Yue and Zhou, Min and Yu, Faxin and Lu, Zheming and Chen, Hua},
	year = {2021},
	note = {event-place: Shanghai, China},
	keywords = {Blockchain, Smart contract, Consensus mechanism, Data monitoring, IC industry, Transaction management},
	pages = {60--66},
}

@inproceedings{abreu_blockchain-based_2020,
	address = {New York, NY, USA},
	series = {{SBCARS} '20},
	title = {A {Blockchain}-{Based} {Architecture} for {Query} and {Registration} of {Student} {Degree} {Certificates}},
	isbn = {978-1-4503-8754-5},
	url = {https://doi.org/10.1145/3425269.3425285},
	doi = {10.1145/3425269.3425285},
	abstract = {Blockchain is an emerging technology that has piqued the interest of researchers and industry today. Following the success of this technology in the financial market with virtual currencies, blockchain begins to be used by different domains such as government and education as it provides a reliable, scalable and unchanging distributed environment for conducting and storing transactions on a network. Higher education is a system with many challenges that could be solved by adopting this technology. Protecting data transactions that involve student degrees is one of the challenges considered by educational institutions. Thus, this paper presents a reference architecture proposal based on blockchain technology and a proof of concept to register and consult student certificates issued by higher education institutions. With this architecture, we intend to evaluate a new business model in this technology applied to the educational domain. As a proof of concept, we presented a prototype implementation using smart contracts based on the Ethereum platform and an evaluation made by experts in high education.},
	booktitle = {Proceedings of the 14th {Brazilian} {Symposium} on {Software} {Components}, {Architectures}, and {Reuse}},
	publisher = {Association for Computing Machinery},
	author = {Abreu, Antonio Welligton S. and Coutinho, Emanuel F. and Bezerra, Carla I. M.},
	year = {2020},
	note = {event-place: Natal, Brazil},
	keywords = {blockchain, smart contracts, architectures, education},
	pages = {151--160},
}

@inproceedings{babel_strategic_2022,
	address = {New York, NY, USA},
	series = {{DeFi}'22},
	title = {Strategic {Peer} {Selection} {Using} {Transaction} {Value} and {Latency}},
	isbn = {978-1-4503-9882-4},
	url = {https://doi.org/10.1145/3560832.3563440},
	doi = {10.1145/3560832.3563440},
	abstract = {Many blockchains utilize public peer-to-peer networks to communicate transactions. As activity on blockchain-based DeFi protocols has increased, there has been a sharp rise in strategic behaviour from bots and miners, commonly captured by the notion of Maximal Extractable Value (MEV). While many works have focused on MEV arising from the smart contract layer or consensus layer, in this work we study how a strategic agent can maximise realisable MEV through the optimal choice of network peers. Specifically, we study how existing definitions and algorithms for latency optimization can be augmented with information about the transactions themselves in order to optimize peering algorithms. We formally model this optimization objective for two classes of consensus protocols : 1) time-based ("fair ordering") protocols and 2) single leader-based protocols. We present an efficient local algorithm for choosing peers strategically, and evaluate our algorithm on real world data to show that it outperforms benchmark algorithms that either choose peers randomly or do not exploit information about blockchain transactions.},
	booktitle = {Proceedings of the 2022 {ACM} {CCS} {Workshop} on {Decentralized} {Finance} and {Security}},
	publisher = {Association for Computing Machinery},
	author = {Babel, Kushal and Baker, Lucas},
	year = {2022},
	note = {event-place: Los Angeles, CA, USA},
	keywords = {blockchains, latency, mev, p2p networks, strategic behaviour},
	pages = {9--14},
}

@inproceedings{goyal_blockchain_2021,
	address = {New York, NY, USA},
	series = {{SenSys} '21},
	title = {A {Blockchain} and {Machine} {Learning} {Based} {Framework} for {Efficient} {Health} {Insurance} {Management}},
	isbn = {978-1-4503-9097-2},
	url = {https://doi.org/10.1145/3485730.3493685},
	doi = {10.1145/3485730.3493685},
	abstract = {Having a health insurance is important for everybody, bearing in mind the increasing medical costs. Medical emergencies can have a severe financial and emotional impact. However, the current insurance system is very expensive and the claim settlement process is excessively lengthy, making it tedious. This results in policyholders not being able to successfully make a claim with their insurance company. In this paper, we focus on developing a fast and cost-effective framework based on blockchain technology and machine learning for the health insurance industry. Blockchain is capable of removing all third-party organisations by forming a smart contract, making the entire process more smooth, secure, and efficient. The contract settles the claim on documents submitted by the claimant. A ridge regression model is used for computing the premiums optimally, based on the total amount claimed under the current policy tenure, along with several other factors. A random forest classifier is applied for predicting the risk that helps in the computation of risk-rated premium rebate.},
	booktitle = {Proceedings of the 19th {ACM} {Conference} on {Embedded} {Networked} {Sensor} {Systems}},
	publisher = {Association for Computing Machinery},
	author = {Goyal, Adit and Elhence, Anubhav and Chamola, Vinay and Sikdar, Biplab},
	year = {2021},
	note = {event-place: Coimbra, Portugal},
	keywords = {Blockchain, Smart contract, Insurance, Machine Learning, Random Forest},
	pages = {511--515},
}

@inproceedings{shariar_decentralized_2020,
	address = {New York, NY, USA},
	series = {{ICCA} 2020},
	title = {A {Decentralized} {Computational} {System} {Built} on {Blockchain} for {Educational} {Institutions}},
	isbn = {978-1-4503-7778-2},
	url = {https://doi.org/10.1145/3377049.3377058},
	doi = {10.1145/3377049.3377058},
	abstract = {An educational institute demands significant computational resources for which it mostly relies on centralized servers, networks and storage facilities. Currently these systems are built around the centralized model which exposes it to risks of data breach, low fault tolerance and the numerous pitfalls of a centralized system. Furthermore, the maintenance of these systems incur significant costs for the institute. The purpose of this research is to introduce a decentralized model of computational system built on blockchain for educational institutions which can mitigate the several drawbacks of a centralized system and further explore the possibilities of introducing a cryptocurrency within the network of the institute. This model proposes to utilize the computational power of devices of the members of the institute by allowing them to be participant nodes in the network. Using the Ethereum blockchain, this study proposes a Smart Contract based system and introduces a cryptocurrency to incentivize the participants of the network.},
	booktitle = {Proceedings of the {International} {Conference} on {Computing} {Advancements}},
	publisher = {Association for Computing Machinery},
	author = {Shariar, Abrar and Imran, Md. Ashique and Paul, Pial and Rahman, Azizur},
	year = {2020},
	note = {event-place: Dhaka, Bangladesh},
	keywords = {Ethereum, blockchain, smart contract, cryptocurrency, Decentralized computational systems, mesh network, P2P BitTorrent},
}

@inproceedings{jacobsen_blockchain_2018,
	address = {New York, NY, USA},
	series = {Middleware '18},
	title = {Blockchain {Landscape} and {AI} {Renaissance}: {The} {Bright} {Path} {Forward}},
	isbn = {978-1-4503-6073-9},
	url = {https://doi.org/10.1145/3279945.3279947},
	doi = {10.1145/3279945.3279947},
	abstract = {Known for powering cryptocurrencies such as Bitcoin and Ethereum, blockchain is seen as a disruptive technology capable of revolutionizing a wide variety of domains, ranging from finance to governance, by offering superior security, reliability, and transparency founded upon a decentralized and democratic computational model. In this tutorial, we first present the original Bitcoin design, along with Ethereum and Hyperledger, and reflect on their design choices through the academic lens. We further provide an overview of potential applications and associated research challenges, as well as a survey of ongoing research directions related to byzantine fault-tolerance consensus protocols. We highlight the new opportunities blockchain creates for building the next generation of secure middleware platforms and explore the possible interplay between AI and blockchains, or more specifically, how blockchain technology can enable the notion of "decentralized intelligence." We conclude with a walkthrough demonstrating the process of developing a decentralized application using a popular Smart Contract language (Solidity) over the Ethereum platform},
	booktitle = {Proceedings of the 19th {International} {Middleware} {Conference} {Tutorials}},
	publisher = {Association for Computing Machinery},
	author = {Jacobsen, Hans-Arno and Sadoghi, Mohammad and Tabatabaei, Mohammad Hossein and Vitenberg, Roman and Zhang, Kaiwen},
	year = {2018},
	note = {event-place: Rennes, France},
	keywords = {Blockchain, Ethereum, Consensus, Bitcoin, Hyperledger},
}

@inproceedings{yu_design_2022,
	address = {New York, NY, USA},
	series = {{BDE} '22},
	title = {Design and {Implementation} of a {Blockchain}-{Based} {Road} {Damage} {Approval} {System}},
	isbn = {978-1-4503-9563-2},
	url = {https://doi.org/10.1145/3538950.3538963},
	doi = {10.1145/3538950.3538963},
	abstract = {In the traditional centralised e-government approval system, the databases of different government departments are independent of each other, with varying degrees of construction, and the fragmentation of information is relatively serious, making the approval of government data inefficient and difficult to share. The emergence of blockchain provides a new idea to solve the difficulties of sharing and managing government data. Based on the characteristics of blockchain such as non-tamperability and traceability, the article adopts FISCO BCOS, a federated chain whose participating members' identities are audited by the system, as the underlying architecture, and conducts research around the road damage approval process, designing, implementing and verifying a blockchain technology-based road damage approval model, as well as designing the corresponding smart contract, so as to complete efficient government approval and secure data sharing. The article concludes with qualitative and quantitative testing of the approval system, demonstrating that the system designed is usable, easy to use and secure.},
	booktitle = {Proceedings of the 4th {International} {Conference} on {Big} {Data} {Engineering}},
	publisher = {Association for Computing Machinery},
	author = {Yu, Shoujian and Zhang, Ting and Huang, Xiaoxiao and Xia, Xiaoling},
	year = {2022},
	note = {event-place: Beijing, China},
	keywords = {blockchain, smart contracts, approval, Petri net},
	pages = {94--103},
}

@inproceedings{gudgeon_defi_2020,
	address = {New York, NY, USA},
	series = {{AFT} '20},
	title = {{DeFi} {Protocols} for {Loanable} {Funds}: {Interest} {Rates}, {Liquidity} and {Market} {Efficiency}},
	isbn = {978-1-4503-8139-0},
	url = {https://doi.org/10.1145/3419614.3423254},
	doi = {10.1145/3419614.3423254},
	abstract = {We coin the term Protocols for Loanable Funds (PLFs) to refer to protocols which establish distributed ledger-based markets for loanable funds. PLFs are emerging as one of the main applications within Decentralized Finance (DeFi), and use smart contract code to facilitate the intermediation of loanable funds. In doing so, these protocols allow agents to borrow and save programmatically. Within these protocols, interest rate mechanisms seek to equilibrate the supply and demand for funds. In this paper, we review the methodologies used to set interest rates on three prominent DeFi PLFs, namely Compound, Aave and dYdX. We provide an empirical examination of how these interest rate rules have behaved since their inception in response to differing degrees of liquidity. We then investigate the market efficiency and inter-connectedness between multiple protocols, examining first whether Uncovered Interest Parity holds within a particular protocol and second whether the interest rates for a particular token market show dependence across protocols, developing a Vector Error Correction Model for the dynamics.},
	booktitle = {Proceedings of the 2nd {ACM} {Conference} on {Advances} in {Financial} {Technologies}},
	publisher = {Association for Computing Machinery},
	author = {Gudgeon, Lewis and Werner, Sam and Perez, Daniel and Knottenbelt, William J.},
	year = {2020},
	note = {event-place: New York, NY, USA},
	keywords = {Ethereum, Borrowing, Cryptocurrencies, DeFi Blockchain, Lending, Protocols for Loanable Funds},
	pages = {92--112},
}

@inproceedings{yan_confidentiality_2020,
	address = {New York, NY, USA},
	series = {{SIGMOD} '20},
	title = {Confidentiality {Support} over {Financial} {Grade} {Consortium} {Blockchain}},
	isbn = {978-1-4503-6735-6},
	url = {https://doi.org/10.1145/3318464.3386127},
	doi = {10.1145/3318464.3386127},
	abstract = {Confidentiality is an indispensable requirement in financial applications of blockchain technology, and supporting it along with high performance and friendly programmability is technically challenging. In this paper, we present a system design called CONFIDE to support on-chain confidentiality by leveraging Trust Execution Environment (TEE). CONFIDE's secure data transmission protocol and data encryption protocol, together with a highly efficient virtual machine run in TEE, guarantee the confidentiality in the life cycle of a transaction from end to end. CONFIDE proposes a secure data model along with an application-driven secure protocol to guarantee data confidentiality and integrity. Its smart contract language extension offers users the flexibility to define complex confidentiality models. CONFIDE is implemented as a plugin module to Antfin Blockchain's proprietary platform, and can be plugged into other blockchain platforms as well with its universal interface design. Nowadays, CONFIDE is supporting millions of commercial transactions daily on consortium blockchain running financial applications including supply chain finance, ABS, commodity provenance, and cold-chain logistics.},
	booktitle = {Proceedings of the 2020 {ACM} {SIGMOD} {International} {Conference} on {Management} of {Data}},
	publisher = {Association for Computing Machinery},
	author = {Yan, Ying and Wei, Changzheng and Guo, Xuepeng and Lu, Xuming and Zheng, Xiaofu and Liu, Qi and Zhou, Chenhui and Song, Xuyang and Zhao, Boran and Zhang, Hui and Jiang, Guofei},
	year = {2020},
	note = {event-place: Portland, OR, USA},
	keywords = {blockchain, confidentiality, trusted execution environment},
	pages = {2227--2240},
}

@inproceedings{ming_he_absa_2022,
	address = {New York, NY, USA},
	series = {{ICICSE} 2021},
	title = {{ABSA}: {A} {Blockchain}-{Based} {SDN} {Device} {Access} {Control} {Scheme}},
	isbn = {978-1-4503-8495-7},
	url = {https://doi.org/10.1145/3485314.3485324},
	doi = {10.1145/3485314.3485324},
	abstract = {Aiming at the problem of the lack of effective access control for the source of access devices in the software-defined network (SDN), based on this, based on the ABAC model, a blockchain-based access control scheme for terminal access in the SDN network is proposed. First, the blockchain technology and ABAC mechanism are described, and the attribute-based access control model is formally defined; secondly, the access control architecture of the SDN network access terminal based on the blockchain technology is proposed, and the access control the basic framework and process of SDN are elaborated and analyzed in detail. Finally, an access control method based on smart contracts is used to achieve full-process transparent, dynamic, and automated access control for terminal access in the SDN network to ensure that the access control information cannot be tampered with. Auditability and verifiability. Finally, simulation experiments are conducted to verify the effectiveness of the scheme, which ensures the source of access equipment is safe and reliable and makes the SDN network safe and controllable. The research content is summarized and prospected.},
	booktitle = {2021 10th {International} {Conference} on {Internet} {Computing} for {Science} and {Engineering}},
	publisher = {Association for Computing Machinery},
	author = {Ming He, Liu and He, Qian and Ya Guo, Nan and Kuang Qin, Yu},
	year = {2022},
	note = {event-place: Guilin, China},
	keywords = {Blockchain, Smart Contract, ABAC Model, Access Controller, SDN Security},
	pages = {40--44},
}

@inproceedings{krol_shard_2021,
	address = {New York, NY, USA},
	series = {{AFT} '21},
	title = {Shard {Scheduler}: {Object} {Placement} and {Migration} in {Sharded} {Account}-{Based} {Blockchains}},
	isbn = {978-1-4503-9082-8},
	url = {https://doi.org/10.1145/3479722.3480989},
	doi = {10.1145/3479722.3480989},
	abstract = {We propose Shard Scheduler, a system for object placement and migration in account-based sharded blockchains. Our system calculates optimal placement and decides on object migrations across shards. It supports complex multi-account transactions caused by smart contracts. Placement and migration decisions made by Shard Scheduler are fully deterministic, verifiable, and can be made part of the consensus protocol. Shard Scheduler reduces the number of costly cross-shard transactions, ensures balanced load distribution and maximizes the number of processed transactions for the blockchain as a whole. To this end, it leverages a novel incentive model motivating miners to maximize the global throughput of the entire blockchain rather than the throughput of a specific shard. In our simulations, Shard Scheduler can reduce the number of costly cross-shard transactions by half while ensuring equal load and increasing throughput more than 2 fold when using 60 shards. We also implement and evaluate Shard Scheduler on Chainspace, more than doubling its throughput and reducing user-perceived latency by 70\% when using 10 shards.},
	booktitle = {Proceedings of the 3rd {ACM} {Conference} on {Advances} in {Financial} {Technologies}},
	publisher = {Association for Computing Machinery},
	author = {Król, Micha{\textbackslash}l and Ascigil, Onur and Rene, Sergi and Sonnino, Alberto and Al-Bassam, Mustafa and Rivière, Etienne},
	year = {2021},
	note = {event-place: Arlington, Virginia},
	keywords = {blockchain, performance, distributed system, economics, sharding},
	pages = {43--56},
}

@inproceedings{liu_hyperservice_2019,
	address = {New York, NY, USA},
	series = {{CCS} '19},
	title = {{HyperService}: {Interoperability} and {Programmability} {Across} {Heterogeneous} {Blockchains}},
	isbn = {978-1-4503-6747-9},
	url = {https://doi.org/10.1145/3319535.3355503},
	doi = {10.1145/3319535.3355503},
	abstract = {Blockchain interoperability, which allows state transitions across different blockchain networks, is critical functionality to facilitate major blockchain adoption. Existing interoperability protocols mostly focus on atomic token exchanges between blockchains. However, as blockchains have been upgraded from passive distributed ledgers into programmable state machines (thanks to smart contracts), the scope of blockchain interoperability goes beyond just token exchanges. In this paper, we present HyperService, the first platform that delivers interoperability and programmability across heterogeneous blockchains. HyperService is powered by two innovative designs: (i) a developer-facing programming framework that allows developers to build cross-chain applications in a unified programming model; and (ii) a secure blockchain-facing cryptography protocol that provably realizes those applications on blockchains. We implement a prototype of HyperService in approximately 35,000 lines of code to demonstrate its practicality. Our experiments show that (i) HyperService imposes reasonable latency, in order of seconds, on the end-to-end execution of cross-chain applications; (ii) the HyperService platform is scalable to continuously incorporate new large-scale production blockchains.},
	booktitle = {Proceedings of the 2019 {ACM} {SIGSAC} {Conference} on {Computer} and {Communications} {Security}},
	publisher = {Association for Computing Machinery},
	author = {Liu, Zhuotao and Xiang, Yangxi and Shi, Jian and Gao, Peng and Wang, Haoyu and Xiao, Xusheng and Wen, Bihan and Hu, Yih-Chun},
	year = {2019},
	note = {event-place: London, United Kingdom},
	keywords = {smart contract, blockchain interoperability, cross-chain dapps},
	pages = {549--566},
}

@inproceedings{hu_ship_2021,
	address = {New York, NY, USA},
	series = {{DSIT} 2021},
	title = {Ship {Identity} {Authentication} {Security} {Model} {Based} on {Blockchain}},
	isbn = {978-1-4503-9024-8},
	url = {https://doi.org/10.1145/3478905.3478933},
	doi = {10.1145/3478905.3478933},
	abstract = {The accuracy of ship information directly determines the efficiency of ship management and the safety of navigation, which are important in shipping management for ensuring the truthfulness, reliability and credibility of ship information. Therefore, to meet the needs of shipowners, shipping authorities and third-party users, this paper studies the ship information authentication system based on the blockchain smart contracts and security mechanisms and proposes a framework for storing and sharing ship information based on blockchain in multichannel mode. In the framework, token-based authentication, attribute-based fine-grained permission control, and a combined security model based on the transmission encryption of double asymmetric certificates are developed to authentication the identity of each agent and control the access rights of ship information in the blockchain data storage mode. We use the automated verification tool Automated Validation of Internet Security Protocols and Applications to verify the security of the modeladditionally, the performance of the system is tested and analyzed, and the optimal parameter range is obtained. The proposed system can solve the long-standing trust and security problems of ship communication while guaranteeing performance.},
	booktitle = {2021 4th {International} {Conference} on {Data} {Science} and {Information} {Technology}},
	publisher = {Association for Computing Machinery},
	author = {Hu, Qing and Han, Wenshuo and Zhang, Hao},
	year = {2021},
	note = {event-place: Shanghai, China},
	keywords = {Blockchain, Security, Hyperledger Fabric, Access control, Identity authentication, Shipping},
	pages = {135--142},
}

@article{qi_hybrid_2022,
	title = {A {Hybrid} {Incentive} {Mechanism} for {Decentralized} {Federated} {Learning}},
	volume = {1},
	issn = {2769-6472},
	url = {https://doi.org/10.1145/3538226},
	doi = {10.1145/3538226},
	abstract = {Federated Learning (FL) presents a privacy-compliant approach by sharing model parameters instead of raw data. However, how to motivate data owners to participate in and stay within an FL ecosystem by continuously contributing their data to the FL model remains a challenge. In this article, we propose a hybrid incentive mechanism based on blockchain to address the above challenge. The proposed mechanism comprises two primary smart contract-based modules, namely the reputation module and the reverse auction module. The former is used to dynamically calculate the reputation score of each FL participant. It employs a trust-jointed reputation scheme to balance the weights between trust values of parameters and bid prices. The latter is responsible for initiating FL auction tasks, calculating price rankings, and assigning corresponding token rewards. Experiments are conducted to evaluate the feasibility and performance of the proposed mechanism against the three typical threats. Experimental results indicate that our mechanism can successfully reduce incentive costs while preventing participants from colluding and over-bidding in the data sharing auction.},
	number = {1},
	journal = {Distrib. Ledger Technol.},
	author = {Qi, Minfeng and Wang, Ziyuan and Chen, Shiping and Xiang, Yang},
	month = sep,
	year = {2022},
	note = {Place: New York, NY, USA
Publisher: Association for Computing Machinery},
	keywords = {data sharing, Federated Learning, Incentive},
}

@inproceedings{missier_mind_2017,
	address = {New York, NY, USA},
	series = {{IoT} '17},
	title = {Mind {My} {Value}: {A} {Decentralized} {Infrastructure} for {Fair} and {Trusted} {IoT} {Data} {Trading}},
	isbn = {978-1-4503-5318-2},
	url = {https://doi.org/10.1145/3131542.3131564},
	doi = {10.1145/3131542.3131564},
	abstract = {Internet of Things (IoT) data are increasingly viewed as a new form of massively distributed and large scale digital assets, which are continuously generated by millions of connected devices. The real value of such assets can only be realized by allowing IoT data trading to occur on a marketplace that rewards every single producer and consumer, at a very granular level. Crucially, we believe that such a marketplace should not be owned by anybody, and should instead fairly and transparently self-enforce a well defined set of governance rules. In this paper we address some of the technical challenges involved in realizing such a marketplace. We leverage emerging blockchain technologies to build a decentralized, trusted, transparent and open architecture for IoT traffic metering and contract compliance, on top of the largely adopted IoT brokered data infrastructure. We discuss an Ethereum-based prototype implementation and experimentally evaluate the overhead cost associated with Smart Contract transactions, concluding that a viable business model can indeed be associated with our technical approach.},
	booktitle = {Proceedings of the {Seventh} {International} {Conference} on the {Internet} of {Things}},
	publisher = {Association for Computing Machinery},
	author = {Missier, Paolo and Bajoudah, Shaimaa and Capossele, Angelo and Gaglione, Andrea and Nati, Michele},
	year = {2017},
	note = {event-place: Linz, Austria},
}

@inproceedings{klenik_porting_2022,
	address = {New York, NY, USA},
	series = {{SAC} '22},
	title = {Porting a {Benchmark} with a {Classic} {Workload} to {Blockchain}: {TPC}-{C} on {Hyperledger} {Fabric}},
	isbn = {978-1-4503-8713-2},
	url = {https://doi.org/10.1145/3477314.3507006},
	doi = {10.1145/3477314.3507006},
	abstract = {Many cross-organization cooperation applications of blockchain-based distributed ledger technologies (DLT) do not aim at innovation at the cooperation pattern level: essentially the same "business" is conducted by the parties, but this time without a central party to be trusted with bookkeeping. The migration to DLT is expected to have a negative performance impact, but some DLTs, such as Hyperledger Fabric, are accepted to be much better suited performance-wise to such use cases than others. However, with the somewhat surprising, but ongoing absence of application-level performance benchmarks for DLTs, cross-DLT comparison for "classic" workloads and the evaluation of the performance impact of "blockchainification" is still ill-supported. We present the design and Hyperledger Caliper-based open implementation of a full port of the classic TPC-C benchmark to Hyperledger Fabric, complete with a structured approach for transforming the original database schema to a smart contract data model. Initial measurements about the workload characteristics that will affect the design of large-scale performance evaluations are also included.},
	booktitle = {Proceedings of the 37th {ACM}/{SIGAPP} {Symposium} on {Applied} {Computing}},
	publisher = {Association for Computing Machinery},
	author = {Klenik, Attila and Kocsis, Imre},
	year = {2022},
	note = {event-place: Virtual Event},
	keywords = {blockchain, hyperledger fabric, benchmarking, DLT, TPC-C},
	pages = {290--298},
}

@inproceedings{xiaoju_ebtree_2020,
	address = {New York, NY, USA},
	series = {{ASSE} '20},
	title = {{EBTree}: {A} {B}-plus {Tree} {Based} {Index} for {Ethereum} {Blockchain} {Data}},
	isbn = {978-1-4503-7710-2},
	url = {https://doi.org/10.1145/3399871.3399892},
	doi = {10.1145/3399871.3399892},
	abstract = {The emergence of smart contract promotes the popularity of blockchain applications, leading the dramatically growth of Ethereum blockchain data size. The analysis on blockchain data is urgently needed for users, e.g., collecting statistics of tokens, monitoring the status of Ethereum blockchain. However, Ethereum could only support simple searches on blockchain data on account of its storage model. This paper proposes the EBTree, an index for Ethereum blockchain Data, and implements it based on Ethereum client (Geth1.8). With the properties of B+ tree, EBTree could support real-time top-k, range, equivalent search on Ethereum blockchain data. Besides, EBTree takes up relatively small s-torage space because it only stores the identifiers of blockchain data. Meanwhile, considering of the time intervals of mining block and synchronizing data from Ethereum network, the time of insertion in EBTree has little influence on the performance of Ethereum client. We conduct experiments to evaluate the performance of EBTree. According to the result of experiments, EBTree shows great performance on searches and insertion at low cost of storage.},
	booktitle = {Proceedings of the 2020 {Asia} {Service} {Sciences} and {Software} {Engineering} {Conference}},
	publisher = {Association for Computing Machinery},
	author = {XiaoJu, Huang and XueQing, Gong and ZhiGang, Huang and LiMei, Zhao and Kun, Gao},
	year = {2020},
	note = {event-place: Nagoya, Japan},
	keywords = {Blockchain, Ethereum, B+ Tree, Complex Search},
	pages = {83--90},
}

@inproceedings{chunbo_application_2021,
	address = {New York, NY, USA},
	series = {{EITCE} '20},
	title = {The {Application} of {Blockchain} in {Intelligent} {Power} {Data} {Exchange}},
	isbn = {978-1-4503-8781-1},
	url = {https://doi.org/10.1145/3443467.3443725},
	doi = {10.1145/3443467.3443725},
	abstract = {The State Grid ETL(SG-ETL) tool, based on Extract, Transform and Load(ETL) technology, has important application value in intelligent power data exchange. As an important part of the transmission component in the power grid system, it realizes the data exchange between power systems, but in the process of data exchange, problems are gradually exposed such as unguaranteed data quality and uncontrolled business process. In this respect, this thesis studies the blockchain technology and analyzes its feasibility in the application of intelligent power data exchange, optimizes the power transaction order management business process from the blockchain perspective as example, proposes the Decentralized Transaction credit model based on Blockchain P2P(DTBP) according to the process, and describes its evaluation algorithm, introduces the idea of "chain on the chain" to plan the scheme of data to chain in the data exchange process, designs the smart contract life cycle, formulates contract rules and interface function conventions, uses the JSPIN tool to design the third convention's Promela mode, verifies the data and analyse the result to solve the data exchange problems finally.},
	booktitle = {Proceedings of the 2020 4th {International} {Conference} on {Electronic} {Information} {Technology} and {Computer} {Engineering}},
	publisher = {Association for Computing Machinery},
	author = {Chunbo, Ju and Gang, Li and Diantao, Sun},
	year = {2021},
	note = {event-place: Xiamen, China},
	keywords = {Blockchain, Smart contract, Data exchange, DTBP trust model, Power transaction},
	pages = {30--35},
}

@inproceedings{rupasinghe_towards_2019,
	address = {New York, NY, USA},
	series = {{ACSW} '19},
	title = {Towards a {Blockchain} {Based} {Fall} {Prediction} {Model} for {Aged} {Care}},
	isbn = {978-1-4503-6603-8},
	url = {https://doi.org/10.1145/3290688.3290736},
	doi = {10.1145/3290688.3290736},
	abstract = {Falls are one of the major health concerns for the elderly people. These falls often result in severe injuries which lead into huge medical expenses. Over the recent years, many ICT based fall detection and fall prevention solutions emerged to address the risk factors associated with falls. However, despite of these research studies, predicting the likelihood of falls still remains as a huge challenge in both medical and IT research domains. Data related to these risk factors being scattered among different healthcare providers can be attributed as a main reason for this challenge. This is further amplified by healthcare providers being reluctant to disseminate the data beyond their entities due to the security and privacy concerns. However, in recent years, blockchain has been proven as a promising technology to address the security and privacy challenges in healthcare data exchange as it provides a shared, immutable, and transparent audit trail for accessing data. Therefore, in this paper, we are going to propose a conceptual blockchain based fall prediction model leveraging smart contracts and FHIR (Fast Healthcare Interoperability Resources) standard to identify the elderly people who are at a higher risk of falling.},
	booktitle = {Proceedings of the {Australasian} {Computer} {Science} {Week} {Multiconference}},
	publisher = {Association for Computing Machinery},
	author = {Rupasinghe, Tharuka and Burstein, Frada and Rudolph, Carsten and Strange, Steven},
	year = {2019},
	note = {event-place: Sydney, NSW, Australia},
	keywords = {Smart Contracts, Healthcare, Blockchain Technology, Fall Prediction},
}

@inproceedings{al-bassam_scpki_2017,
	address = {New York, NY, USA},
	series = {{BCC} '17},
	title = {{SCPKI}: {A} {Smart} {Contract}-{Based} {PKI} and {Identity} {System}},
	isbn = {978-1-4503-4974-1},
	url = {https://doi.org/10.1145/3055518.3055530},
	doi = {10.1145/3055518.3055530},
	abstract = {The Public Key Infrastructure (PKI) in use today on the Internet to secure communications has several drawbacks arising from its centralised and non-transparent design. In the past there has been instances of certificate authorities publishing rogue certificates for targeted attacks, and this has been difficult to immediately detect as certificate authorities are not transparent about the certificates they issue. Furthermore, the centralised selection of trusted certificate authorities by operating system and browser vendors means that it is not practical to untrust certificate authorities that have issued rogue certificates, as this would disrupt the TLS process for many other hosts.SCPKI is an alternative PKI system based on a decentralised and transparent design using a web-of-trust model and a smart contract on the Ethereum blockchain, to make it easily possible for rogue certificates to be detected when they are published. The web-of-trust model is designed such that an entity or authority in the system can verify (or vouch for) fine-grained attributes of another entity's identity (such as company name or domain name), as an alternative to the centralised certificate authority identity verification model.},
	booktitle = {Proceedings of the {ACM} {Workshop} on {Blockchain}, {Cryptocurrencies} and {Contracts}},
	publisher = {Association for Computing Machinery},
	author = {Al-Bassam, Mustafa},
	year = {2017},
	note = {event-place: Abu Dhabi, United Arab Emirates},
	pages = {35--40},
}

@inproceedings{karanjai_privacy_2021,
	address = {New York, NY, USA},
	series = {Middleware '21},
	title = {Privacy {Preserving} {Event} {Based} {Transaction} {System} in a {Decentralized} {Environment}},
	isbn = {978-1-4503-8534-3},
	url = {https://doi.org/10.1145/3464298.3493401},
	doi = {10.1145/3464298.3493401},
	abstract = {In this paper, we present the design and implementation of a privacy preserving event based UTXO (Unspent Transaction Output) transaction system. Unlike the existing approaches that often depend on smart contracts where digital assets are first locked in a vault, and then released according to event triggers, the event based transaction system encodes event outcome as part of the UTXO note and safeguards event privacy by shielding it with zero-knowledge proof based protocols such that associations between UTXO notes and events are hidden from the validators. Without relying on any triggering mechanism, the proposed transaction system separates event processing from the transaction processing where confidential event based UTXO notes (event based UTXOs or conditional UTXOs) can be transferred freely with full privacy in an asynchronous manner, only with their asset values conditional to the linked event outcomes. The main advantage of such design is that it enables free trade of event based digital assets and prevents the assets from being locked. We implemented the proposed transaction system by extending the Zerocoin data model and protocols. The system is implemented and evaluated using xJsnark.},
	booktitle = {Proceedings of the 22nd {International} {Middleware} {Conference}},
	publisher = {Association for Computing Machinery},
	author = {Karanjai, Rabimba and Xu, Lei and Gao, Zhimin and Chen, Lin and Kaleem, Mudabbir and Shi, Weidong},
	year = {2021},
	note = {event-place: Québec city, Canada},
	keywords = {privacy, distributed ledger, UTXO, zero-knowledge proof},
	pages = {286--297},
}

@article{gai_blockchain-based_2022,
	title = {A {Blockchain}-{Based} {Access} {Control} {Scheme} for {Zero} {Trust} {Cross}-{Organizational} {Data} {Sharing}},
	issn = {1533-5399},
	url = {https://doi.org/10.1145/3511899},
	doi = {10.1145/3511899},
	abstract = {Multi-organization data sharing is becoming increasing prevalent due to the interconnectivity of systems and the need for collaboration across organizations (e.g., exchange of data in a supply-chain involving multiple upstream and downstream vendors). There are, however, data security concerns due to lack of trust between organizations that may be located in jurisdictions with varying security and privacy legislation and culture (also referred to as a zero trust environment). Hence, in such a zero trust setting, one should introduce strengthened, yet efficient, access control mechanism to facilitate cross-organizational data access and exchange requests. Contemporary access control schemes generally focus on protecting a single objective rather than multiple parties, due to higher security costs. In this paper, we propose a blockchain-based access control scheme, designed to facilitate lightweight data sharing among different organizations. Specifically, our approach utilizes the consortium blockchain to establish a trustworthy environment, in which a Role-Based Access Control (RBAC) model is then deployed using our proposed multi-signature protocol and smart contract methods. Evaluation of our proposed approach is performed on the HyperLedger Fabric consortium blockchain platform using both Caliper and BFT-SMaRT benchmarks, and the findings demonstrate the utility of our approach.},
	journal = {ACM Trans. Internet Technol.},
	author = {Gai, Keke and She, Yufeng and Zhu, Liehuang and Choo, Kim-Kwang Raymond and Wan, Zhiguo},
	month = jul,
	year = {2022},
	note = {Place: New York, NY, USA
Publisher: Association for Computing Machinery},
	keywords = {access control, Consortium blockchain, multi-organizational data sharing, multi-signature, zero trust},
	annote = {Just Accepted},
}

@inproceedings{cui_zero-shot_2022,
	address = {New York, NY, USA},
	series = {{ICPC} '22},
	title = {Zero-{Shot} {Program} {Representation} {Learning}},
	isbn = {978-1-4503-9298-3},
	url = {https://doi.org/10.1145/3524610.3527888},
	doi = {10.1145/3524610.3527888},
	abstract = {Learning program representations has been the core prerequisite of code intelligence tasks (e.g., code search and code clone detection). The state-of-the-art pre-trained models such as CodeBERT require the availability of large-scale code corpora. However, gathering training samples can be costly and infeasible for domain-specific languages such as Solidity for smart contracts. In this paper, we propose Zecoler, a zero-shot learning approach for code representations. Zecoler is built upon a pre-trained programming language model. In order to elicit knowledge from the pre-trained models efficiently, Zecoler casts the downstream tasks to the same form of pre-training tasks by inserting trainable prompts into the original input. Then, it employs the prompt learning technique to optimize the pre-trained model by merely adjusting the original input. This enables the representation model to efficiently fit the scarce task-specific data while reusing pre-trained knowledge. We evaluate Zecoler in three code intelligence tasks in two programming languages that have no training samples, namely, Solidity and Go, with model trained in corpora of common languages such as Java. Experimental results show that our approach significantly outperforms baseline models in both zero-shot and few-shot settings.},
	booktitle = {Proceedings of the 30th {IEEE}/{ACM} {International} {Conference} on {Program} {Comprehension}},
	publisher = {Association for Computing Machinery},
	author = {Cui, Nan and Jiang, Yuze and Gu, Xiaodong and Shen, Beijun},
	year = {2022},
	note = {event-place: Virtual Event},
	keywords = {code intelligence, learning program representations, prompt learning, zero-shot learning},
	pages = {60--70},
}

@inproceedings{palacios_auditable_2021,
	address = {New York, NY, USA},
	series = {{BiDEDE} '21},
	title = {Auditable {Serverless} {Computing} for {Farm} {Management}},
	isbn = {978-1-4503-8465-0},
	url = {https://doi.org/10.1145/3460866.3461770},
	doi = {10.1145/3460866.3461770},
	abstract = {Currently, a multitude of applications that target farm management activities has been proposed. Unfortunately, those applications do not interoperate and require that the farmer utilize several of them, making operations and task management cumbersome. Similarly, those applications require a tiered pricing model ranging from a restricted/limited free tier to several thousand dollars per year—mainly in a software as a service SaaS model.In this paper, we propose a novel mix of serverless functions, shared ledgers, webhooks, and REST APIs to enhance Agriculture/Farm Management Systems, providing an integrated solution for Task, User, and Field Management that exploits a fine-grained pricing model. Further, our technique utilizes serverless oblivious smart contracts as a building block. To the best of our knowledge, this is the first solution that leverages serverless functions and shared ledgers to provide an elastic, pay-as-you-go, and auditable task management system for the AG industry.Our work has a significant impact on providing an open-source solution released and used in production that can pave the way for future relevant ideas in the AG industry. Therefore, we demonstrate the system feasibility exposing evidence of the system performance for auditable task creation and chat mirroring.},
	booktitle = {Proceedings of the {International} {Workshop} on {Big} {Data} in {Emergent} {Distributed} {Environments}},
	publisher = {Association for Computing Machinery},
	author = {Palacios, Servio and Zabrocki, Drew and Bhargava, Bharat and Aggarwal, Vaneet},
	year = {2021},
	note = {event-place: Virtual Event, China},
	keywords = {auditable farm management, auditable serverless computing, farm management, serverless computing, serverless functions, serverless oblivious smart contracts},
}

@article{barati_compliance_2023,
	title = {Compliance {Checking} of {Cloud} {Providers}: {Design} and {Implementation}},
	issn = {2769-6472},
	url = {https://doi.org/10.1145/3585538},
	doi = {10.1145/3585538},
	abstract = {The recognition of capabilities supplied by cloud systems is presently growing up. Collecting or sharing healthcare data and sensitive information especially during Covid-19 pandemic has motivated organizations and enterprises to leverage the upsides coming from cloud-based applications. However, the privacy of electronic data in such applications remains a significant challenge for cloud vendors to adapt their solutions with existing privacy legislation standards such as general data protection regulation (GDPR). This paper, first, proposes a formal model and verification for data usage requests of providers in a cloud composite service using a model checking tool. A cloud pharmacy scenario is presented to illustrate the connectivity of providers in the composite service and the stream of their requests for both collection and movement of patient data. A set of verification is, then, undertaken over the pharmacy service in accordance with three significant GDPR obligations, namely user consent, data access and data transfer. Following that, the paper designs and implements a cloud container virtualization based on the verified formal model realising GDPR requirements. The container makes use of some enforcement smart contracts to only proceed the providers’ requests, which are compliant with GDPR. Finally, several experiments are provided to investigate the performance of our approach in terms of time, memory and cost.},
	journal = {Distrib. Ledger Technol.},
	author = {Barati, Masoud and Adu-Duodu, Kwabena and Rana, Omer and Aujla, GaganGeet Singh and Ranjan, Rajiv},
	month = feb,
	year = {2023},
	note = {Place: New York, NY, USA
Publisher: Association for Computing Machinery},
	keywords = {blockchain, general data protection regulation, cloud services, container, data privacy, transition systems},
	annote = {Just Accepted},
}

@inproceedings{zhou_trustworthy_2022,
	address = {New York, NY, USA},
	series = {{BIOTC} '22},
	title = {A {Trustworthy} {Ciphertext}-{Policy} {Attribute}-{Based} {Encryption} {Access} {Control} {Method} {Based} on {FAME} and {Blockchain}},
	isbn = {978-1-4503-9662-2},
	url = {https://doi.org/10.1145/3559795.3559801},
	doi = {10.1145/3559795.3559801},
	abstract = {Ciphertext-policy attribute-based encryption (CP-ABE) has been extensively applied in various types of conditional access control systems since its introduction because of its ability to provide fine-grained and flexible access control to confidential data, thus offering a safe and effective data sharing environment. However, while developing rapidly, the existing CP-ABE access schemes also face some problems, such as trustworthiness issues involving third-party intermediary entities, secret key management problems brought by single attribute authorization centers, and privacy leakage of attributes. How to achieve safe and effective decentralized access control has been a problem to be explored and solved. In this paper, a trustworthy, secure, and efficient ABE(TSE ABE) based on blockchain and fast attribute-based message encryption (FAME) is proposed by us. First, we combine blockchain and FAME and optimize them to make CP-ABE perform better. Second, we implement a trusted authorization model with multiple entities based on the BLS signature and smart contracts to address key privacy issues. Finally, we protect the privacy of attributes in the authorization matching process by RSA encryption algorithm. Through the experimental results, it can be found that the scheme not only has good security and execution performance but also achieves effective protection of user privacy.},
	booktitle = {Proceedings of the 2022 4th {Blockchain} and {Internet} of {Things} {Conference}},
	publisher = {Association for Computing Machinery},
	author = {Zhou, Zijian and Bai, Fenhua and Liu, Yingli and Zhang, Chi and Shen, Tao},
	year = {2022},
	note = {event-place: Tokyo, China},
	pages = {38--45},
}

@inproceedings{smahi_efficient_2021,
	address = {New York, NY, USA},
	series = {{ICMAI} 2021},
	title = {An {Efficient} and {Secure} {Blockchain}-{Based} {SVM} {Classification} for a {COVID}-19 {Healthcare} {System}},
	isbn = {978-1-4503-8946-4},
	url = {https://doi.org/10.1145/3460569.3460587},
	doi = {10.1145/3460569.3460587},
	abstract = {The recent coronavirus (COVID-19) pandemic has brought the world to an apocalyptic standstill with huge economic burden and catastrophic healthcare consequences. COVID-19 pandemic has neither clinically proven vaccine nor drugs so far. It is now obvious that the world is in dire need for non-clinical, real-time, faster and cost-effective and secure smart solutions for monitoring, contact tracing, and diagnosing/detecting COVID-19 patients and hence mitigating the burden on healthcare systems. Therefore, Machine learning approaches can be leveraged in all aspects that could impact the patients and the future care guidelines. However, ensuring the data privacy, security and the conformity to data protection regulations will become even more of a challenge. This leads to the requirement for secured and privacy-preserving machine learning mechanisms for COVID-19-based healthcare applications. In this paper, we present a blockchain-based privacy-preserving support vector machine (SVM) classification over vertically partitioned IoMT data for a clinical decision support (CDS) system. The proposed system does not require any intervention or direct interactions between data owners. Both local training and building the global classification model run on verifiable and private smart contracts rather than relying on untrusted third parties. We find that the proposed system is more secure and efficient.},
	booktitle = {2021 6th {International} {Conference} on {Mathematics} and {Artificial} {Intelligence}},
	publisher = {Association for Computing Machinery},
	author = {Smahi, Abla and Xia, Qi and Gao, Jianbin and Xia, Hu},
	year = {2021},
	note = {event-place: Chengdu, China},
	keywords = {smart contract, formal verification, Covid-19, secure sum protocol, SVM, vertically partitioned data},
	pages = {122--129},
}

@inproceedings{six_using_2022,
	address = {New York, NY, USA},
	series = {{SPLC} '22},
	title = {Using {Software} {Product} {Lines} to {Create} {Blockchain} {Products}: {Application} to {Supply} {Chain} {Traceability}},
	isbn = {978-1-4503-9443-7},
	url = {https://doi.org/10.1145/3546932.3547001},
	doi = {10.1145/3546932.3547001},
	abstract = {In recent years, blockchain has been growing rapidly from a niche technology to a promising solution for many sectors, due to its unique properties that empower the design of innovative applications. Nevertheless, the development of blockchain applications is still a challenge. Due to the technological novelty, only a few developers are familiar with blockchain technologies and smart contracts. Others might face a steep learning curve or difficulties to reuse existing code to build blockchain applications. This study proposes a novel approach to tackle these issues, through software product line engineering. To support the approach, a web platform to configure and generate a blockchain application for on-chain traceability is introduced. First, a feature model has been designed to model core features of the chosen domain, based on the existing literature. Then, a configurator has been implemented to support the feature selection phase. Finally, a generator is able to ingest such configurations to generate on-the-shelf blockchain products. The generalizability of the contribution is validated by reproducing on-chain traceability applications proposed in the literature by using the platform. This work provides the first evidence that the implementation of blockchain applications using software product lines enhances the quality of produced applications and reduces the time to market.},
	booktitle = {Proceedings of the 26th {ACM} {International} {Systems} and {Software} {Product} {Line} {Conference} - {Volume} {A}},
	publisher = {Association for Computing Machinery},
	author = {Six, Nicolas and Herbaut, Nicolas and Lopez-Herrejon, Roberto Erick and Salinesi, Camille},
	year = {2022},
	note = {event-place: Graz, Austria},
	keywords = {blockchain, code generation, software product line},
	pages = {97--107},
}

@inproceedings{qin_research_2021,
	address = {New York, NY, USA},
	series = {{ICBCT} '21},
	title = {Research on {Design} and {Application} of {Power} {Dispatch} {Based} on {Blockchain}},
	isbn = {978-1-4503-8962-4},
	url = {https://doi.org/10.1145/3460537.3460564},
	doi = {10.1145/3460537.3460564},
	abstract = {With the large-scale access of renewable energy and the rapid development of electricity market operation, power dispatch urgently needs to improve the level of instant information sharing and service management capabilities. Through the blockchain technology, it can realize the credible sharing and traceability of key data, and further promote the efficiency of power dispatch collaboration management as well as the openness and transparency of the process of power dispatch. In this paper, the adaptability of blockchain and power dispatch business is analyzed, a power dispatch model with hierarchical management and hierarchical storage based on blockchain is proposed, and a fully functional dispatch blockchain platform is developed. Customized smart contracts are used to realize the automatic execution of the dispatch assessment and evaluation, and a consistency check mechanism is designed for the key data of the security and stability control device. Finally, two typical scenarios of dispatch management assessment and dispatch data management are selected for application research. The results show that the power dispatch model based on blockchain can significantly improve the transparency and operation efficiency of power dispatch, reduce the impact of the misoperation of the security and stability control device on the power grid, and promote the safe and stable operation of power grid.},
	booktitle = {2021 {The} 3rd {International} {Conference} on {Blockchain} {Technology}},
	publisher = {Association for Computing Machinery},
	author = {Qin, Rizhen and Zhao, Lihua and Li, Da and Yang, Ke and Xuan, Jiaxing and Wang, Hejian},
	year = {2021},
	note = {event-place: Shanghai, China},
	keywords = {Blockchain, Smart Contract, Dispatch Data Management, Dispatch Management Assessment, Power Dispatch},
	pages = {155--162},
}

@inproceedings{wang_blockchain-based_2022,
	address = {New York, NY, USA},
	series = {{BSCI} '22},
	title = {Blockchain-{Based} {Secure} {Medical} {Data} {Management} and {Disease} {Prediction}},
	isbn = {978-1-4503-9175-7},
	url = {https://doi.org/10.1145/3494106.3528678},
	doi = {10.1145/3494106.3528678},
	abstract = {Healthcare systems based on the Internet of Things have an increasing demand for health sensing technology. To manage the data collected and sampled by medical devices, traditional centralized data management will lead to attacks such as single point of failure, which pose a security threat. Aiming at the problems of low data trust and uncontrolled data sharing in telemedicine, we proposed blockchain-based secure medical data management and disease prediction. To securely manage healthcare data, we carefully designed three-tier architecture. Specifically, in the user sensor layer, medical sensors monitor the patient status in real-time. In the storage layer, to protect the privacy of patients, we stored their data in blocks and quantified the medical data by using information entropy technology. In addition, in the blockchain layer, we also used smart contracts for application, authorization, and access control of health data to eliminate privacy leaks caused by internal and external security risks. The information summary is recorded on the blockchain to ensure the integrity of backtracking and anti-repudiation. We designed an extensible machine learning algorithm to predict disease types using a disease prediction model algorithm based on transfer learning. Security analysis and numerical results showed that the proposed scheme can effectively manage the safety data of telemedicine and predict the patient's future condition.},
	booktitle = {Proceedings of the {Fourth} {ACM} {International} {Symposium} on {Blockchain} and {Secure} {Critical} {Infrastructure}},
	publisher = {Association for Computing Machinery},
	author = {Wang, Meiquan and Zhang, Huiru and Wu, Haoyang and Li, Guangshun and Gai, Keke},
	year = {2022},
	note = {event-place: Nagasaki, Japan},
	keywords = {blockchain, smart contract, disease prediction, information entropy, sensor data, transfer learning},
	pages = {71--82},
}

@inproceedings{ren_is_2021,
	address = {New York, NY, USA},
	series = {{ICICM} '21},
	title = {Is {All}-{Win} {Possible}? {A} {Novel} {Smart} {Contracts}-{Based} {Music} {Recommendation} {System}},
	isbn = {978-1-4503-9019-4},
	url = {https://doi.org/10.1145/3484399.3484402},
	doi = {10.1145/3484399.3484402},
	abstract = {The current streaming music ecosystem provides a mature and prevalent platform for artists to publish music products and for listeners to consume music services. However, as the main power of streaming content producers, artists have little to no control over their musical works after assigning their copyrights and management to third parties, especially for long-tail artists. The booming development of blockchain technology in recent years brings a fresh change to the music industry. The clear copyrights recorded on-chain attract more and more artists to stand in line, although blockchain-based music platforms are still in their early stage of development. As the number of users and artists keeps increasing, some platforms continue to use the recommendation design of the current streaming music ecosystem. The shortage in this system could cause a long-tail phenomenon again. In this work, we proposed a novel music recommendation system by considering the value of three parties on the platform. Through designing two scheme-based recommendations by leveraging the flexible agreement design of smart contracts, we proposed an effective music promotion strategy for the blockchain-based music platform. It has been verified that the new model has attained significant improvement in the loyalty enhancement of platform users.},
	booktitle = {Proceedings of the 11th {International} {Conference} on {Information} {Communication} and {Management}},
	publisher = {Association for Computing Machinery},
	author = {Ren, Jing and Zhang, Yimiao},
	year = {2021},
	note = {event-place: Tokyo, Japan},
	keywords = {Smart contracts, All-Win, Music recommendation, Referral rewards, Two-sided Value},
	pages = {18--23},
}

@inproceedings{mishra_pdv_2021,
	address = {New York, NY, USA},
	series = {{BIOTC} '21},
	title = {{PDV}: {Permissioned} {Blockchain} {Based} {Personal} {Data} {Vault} {Using} {Predictive} {Prefetching}},
	isbn = {978-1-4503-8951-8},
	url = {https://doi.org/10.1145/3475992.3476001},
	doi = {10.1145/3475992.3476001},
	abstract = {We predict that in the not-so-distant future, most if not all documents will no longer be available in paper format. We envision a world in which one can store the entirety of their digital documents not unlike a filing cabinet storing paper documents but with the additional security, safety, and integrity. The vision is encapsulated in our Personal Data Vault (PDV). The PDV is a framework for storing, saving, protecting, and sharing a person’s life-time digital documents in a verifiable secure manner that can ascertain a document’s authenticity and integrity and afford its owner to share it securely. In PDV, each document is encrypted, compressed, and securely stored in the cloud, and indexes are entered in disturbed ledger of a Permissioned Blockchain (Hyperledger Iroha), which significantly prevents data leakage, and the ledger is immutable and tamper-proof to maintain integrity. All access rights are written in the form of an access-list in Smart Contracts, which are later used for verification. We used the concept of predictive prefetching in combination with the Markov tree to design a model that successfully predicts the next (or sequence of next) requests that may occur and pre-executes (execute before the request has occurred)},
	booktitle = {Proceedings of the 2021 3rd {Blockchain} and {Internet} of {Things} {Conference}},
	publisher = {Association for Computing Machinery},
	author = {Mishra, Neha and Levkowitz, Haim},
	year = {2021},
	note = {event-place: Ho Chi Minh City, Vietnam},
	keywords = {Access-list, Hyperledger Iroha, Predictive Prefetching, Smart-Contract},
	pages = {59--69},
}

@inproceedings{sohrabi_bacc_2020,
	address = {New York, NY, USA},
	series = {{ACSW} '20},
	title = {{BACC}: {Blockchain}-{Based} {Access} {Control} {For} {Cloud} {Data}},
	isbn = {978-1-4503-7697-6},
	url = {https://doi.org/10.1145/3373017.3373027},
	doi = {10.1145/3373017.3373027},
	abstract = {Controlling the access over the stored data in the cloud is one of the fundamental security requirements, especially with the wide usage of cloud storage servers for nearly most of the enterprise applications. Traditional cloud-based access control solutions are based on a centralized approach (i.e. a cloud server becomes the central authority to control accesses to the data), which makes it difficult to prevent malicious cloud servers from disclosing user’s data; and therefore compromising the privacy of the stored data. Additionally, the centralization of authority can cause a single point of failure. Furthermore, to provide confidentiality, which is one of the essential security requirements, user’s data is encrypted before it is stored on the cloud. Most of the cloud servers store the decryption keys, after they encrypt the data, in their premises. This compromises data privacy. In this paper we propose a new model that addresses the aforementioned issues. To address the centralization problem, we distributed the access control tasks to smart contracts over a decentralized network, i.e. blockchain. To address the latter, we used Shamir secret sharing scheme to manage the encryption keys. Then we introduced a new type of node, called master node, to our blockchain platform, to store the decryption key parts.},
	booktitle = {Proceedings of the {Australasian} {Computer} {Science} {Week} {Multiconference}},
	publisher = {Association for Computing Machinery},
	author = {Sohrabi, Nasrin and Yi, Xun and Tari, Zahir and Khalil, Ibrahim},
	year = {2020},
	note = {event-place: Melbourne, VIC, Australia},
	keywords = {Blockchain, Smart Contract, Cloud Computing, Access Control, Shamir Secret Sharing Scheme},
}

@inproceedings{desai_blockfla_2021,
	address = {New York, NY, USA},
	series = {{CODASPY} '21},
	title = {{BlockFLA}: {Accountable} {Federated} {Learning} via {Hybrid} {Blockchain} {Architecture}},
	isbn = {978-1-4503-8143-7},
	url = {https://doi.org/10.1145/3422337.3447837},
	doi = {10.1145/3422337.3447837},
	abstract = {Federated Learning (FL) is a distributed, and decentralized machine learning protocol. By executing FL, a set of agents can jointly train a model without sharing their datasets with each other, or a third-party. This makes FL particularly suitable for settings where data privacy is desired.At the same time, concealing training data gives attackers an opportunity to inject backdoors into the trained model. It has been shown that an attacker can inject backdoors to the trained model during FL, and then can leverage the backdoor to make the model misclassify later. Several works tried to alleviate this threat by designing robust aggregation functions. However, given more sophisticated attacks are developed over time, which by-pass the existing defenses, we approach this problem from a complementary angle in this work. Particularly, we aim to discourage backdoor attacks by detecting, and punishing the attackers, possibly after the end of training phase.To this end, we develop a hybrid blockchain-based FL framework that uses smart contracts to automatically detect, and punish the attackers via monetary penalties. Our framework is general in the sense that, any aggregation function, and any attacker detection algorithm can be plugged into it. We conduct experiments to demonstrate that our framework preserves the communication-efficient nature of FL, and provide empirical results to illustrate that it can successfully penalize attackers by leveraging our novel attacker detection algorithm.},
	booktitle = {Proceedings of the {Eleventh} {ACM} {Conference} on {Data} and {Application} {Security} and {Privacy}},
	publisher = {Association for Computing Machinery},
	author = {Desai, Harsh Bimal and Ozdayi, Mustafa Safa and Kantarcioglu, Murat},
	year = {2021},
	note = {event-place: Virtual Event, USA},
	keywords = {ethereum, hyperledger, backdoor attacks, federated averaging, federated learning, hybrid blockchain, machine learning},
	pages = {101--112},
}

@inproceedings{corradini_engineering_2020,
	address = {New York, NY, USA},
	series = {{SAC} '20},
	title = {Engineering {Trustable} {Choreography}-{Based} {Systems} {Using} {Blockchain}},
	isbn = {978-1-4503-6866-7},
	url = {https://doi.org/10.1145/3341105.3373988},
	doi = {10.1145/3341105.3373988},
	abstract = {The adoption of model-driven engineering methodologies contributes to reduce the complexity of developing distributed systems. A key point to master such complexity is the use of modelling languages, such as the BPMN standard. This permits to specify choreography diagrams describing, from a global point of view, the interactions that should occur among distributed components in order to reach given goals. Even though BPMN choreographies are promising to increase business possibilities, their concrete adoption has been challenging and faced complex hurdles. On the one hand, there is a lack of concrete support to the different phases of the choreography life-cycle, especially in relation to the choreography execution. Another obstacle consists in the lack of distributed infrastructures allowing the participants involved in the cooperation to trust each other, and in particular to get enough guarantees that all of them will behave as prescribed by the choreography model.In this paper, we face such challenges by proposing a methodology and a related model-driven framework, named ChorChain, that are based on the blockchain technology. We provide support to the whole life-cycle of choreographies, from their modelling to their distributed execution. More specifically, ChorChain takes as input a BPMN choreography model and automatically translates it in a Solidity smart contract. Such a contract will permit to enforce the interactions among the cooperating participants, so to satisfy the prescriptions reported in the starting model. The methodology and the framework have been evaluated through experiments conducted on the Rinkeby Ethereum Testnet.},
	booktitle = {Proceedings of the 35th {Annual} {ACM} {Symposium} on {Applied} {Computing}},
	publisher = {Association for Computing Machinery},
	author = {Corradini, F. and Marcelletti, A. and Morichetta, A. and Polini, A. and Re, B. and Tiezzi, F.},
	year = {2020},
	note = {event-place: Brno, Czech Republic},
	pages = {1470--1479},
}

@inproceedings{androulaki_hyperledger_2018,
	address = {New York, NY, USA},
	series = {{EuroSys} '18},
	title = {Hyperledger {Fabric}: {A} {Distributed} {Operating} {System} for {Permissioned} {Blockchains}},
	isbn = {978-1-4503-5584-1},
	url = {https://doi.org/10.1145/3190508.3190538},
	doi = {10.1145/3190508.3190538},
	abstract = {Fabric is a modular and extensible open-source system for deploying and operating permissioned blockchains and one of the Hyperledger projects hosted by the Linux Foundation (www.hyperledger.org).Fabric is the first truly extensible blockchain system for running distributed applications. It supports modular consensus protocols, which allows the system to be tailored to particular use cases and trust models. Fabric is also the first blockchain system that runs distributed applications written in standard, general-purpose programming languages, without systemic dependency on a native cryptocurrency. This stands in sharp contrast to existing block-chain platforms that require "smart-contracts" to be written in domain-specific languages or rely on a cryptocurrency. Fabric realizes the permissioned model using a portable notion of membership, which may be integrated with industry-standard identity management. To support such flexibility, Fabric introduces an entirely novel blockchain design and revamps the way blockchains cope with non-determinism, resource exhaustion, and performance attacks.This paper describes Fabric, its architecture, the rationale behind various design decisions, its most prominent implementation aspects, as well as its distributed application programming model. We further evaluate Fabric by implementing and benchmarking a Bitcoin-inspired digital currency. We show that Fabric achieves end-to-end throughput of more than 3500 transactions per second in certain popular deployment configurations, with sub-second latency, scaling well to over 100 peers.},
	booktitle = {Proceedings of the {Thirteenth} {EuroSys} {Conference}},
	publisher = {Association for Computing Machinery},
	author = {Androulaki, Elli and Barger, Artem and Bortnikov, Vita and Cachin, Christian and Christidis, Konstantinos and De Caro, Angelo and Enyeart, David and Ferris, Christopher and Laventman, Gennady and Manevich, Yacov and Muralidharan, Srinivasan and Murthy, Chet and Nguyen, Binh and Sethi, Manish and Singh, Gari and Smith, Keith and Sorniotti, Alessandro and Stathakopoulou, Chrysoula and Vukolić, Marko and Cocco, Sharon Weed and Yellick, Jason},
	year = {2018},
	note = {event-place: Porto, Portugal},
}

@inproceedings{binbusayyyis_blockchain-based_2022,
	address = {New York, NY, USA},
	series = {{ICBTA} 2021},
	title = {Blockchain-{Based} {Services} for {Sharing} {Education} {Records} in {Industrial} {IoT} {Environment}},
	isbn = {978-1-4503-8746-0},
	url = {https://doi.org/10.1145/3510487.3510507},
	doi = {10.1145/3510487.3510507},
	abstract = {The path towards Industry 4.0 have pushed the workforce to continuously develop their skills to stay at the forefront of their careers and remain attractive to their employers. In this case, the electronic portfolio is designed as a promising tool for professionals and employers, in assessing and presenting guidance for further learning in the workplace environment. However, the implementation of electronic portfolios faces huge challenges, especially due to the lack of interoperability to collect and share competition evidence among multiple organizations and institutions. The growing trend of professional (learning) interoperability has brought other challenges that must be addressed in order to fully utilize the potential of the electronic product portfolio in the context of the fourth industry. This article proposes a framework taking the benefits of blockchain, decentralized storage systems, smart contracts and session management in achieving professional-centric interoperability while creating electronic portfolio and share evidences among multiple organizations without giving up the confidentiality, integrity and availability of shared evidence. The simulation of the proposed model for proof of concept on Ethereum proved its viability in real world practice. In expansion, the assessment of the proposed model proved its effectiveness in terms of cost, storage space and security as a possible solution in electronic portfolios implementation and assisting professionals to stay competitive in global labor market.},
	booktitle = {2021 4th {International} {Conference} on {Blockchain} {Technology} and {Applications}},
	publisher = {Association for Computing Machinery},
	author = {Binbusayyyis, Adel},
	year = {2022},
	note = {event-place: Xi'an, China},
	keywords = {Blockchain, Smart Contract, Data sharing, IPFS, Learner-centered interoperability, Lifelong learning, Session management},
	pages = {135--143},
}

@inproceedings{akram_bc-iodt_2022,
	address = {New York, NY, USA},
	series = {{DroneCom} '22},
	title = {{BC}-{IoDT}: {Blockchain}-{Based} {Framework} for {Authentication} in {Internet} of {Drone} {Things}},
	isbn = {978-1-4503-9514-4},
	url = {https://doi.org/10.1145/3555661.3560874},
	doi = {10.1145/3555661.3560874},
	abstract = {We leverage blockchain technology for drone node authentication in internet of drone things (IoDT). During the authentication procedure, the credentials of drone nodes are examined to remove malicious nodes from the system. In IoDT, drones are responsible for gathering data and transmitting it to cluster heads (CHs) for further processing. The CH collects and organizes data. Due to computational load, their energy levels rapidly deplete. To overcome this problem, we present a low-energy adaptive clustering hierarchy (R2D) protocol based on distance, degree, and residual energy. R2D is used to replace CHs with normal nodes based on the biggest residual energy, the degree, and the shortest distance from BS. The cost of keeping a big volume of data on the blockchain is high. We employ the Interplanetary File System (IPFS), to address this issue. Moreover, IPFS protects user data using the industry-standard encryption technique AES-128. This standard compares well to other current encryption methods. Using a consensus mechanism based on proof of work requires a high amount of computing resources for transaction verification. The suggested approach leverages a consensus mechanism known as proof of authority (PoA) to address this problem. The results of the simulations indicate that the suggested system model functions effectively and efficiently. A formal security analysis is conducted to assess the smart contract's resistance to attacks.},
	booktitle = {Proceedings of the 5th {International} {ACM} {Mobicom} {Workshop} on {Drone} {Assisted} {Wireless} {Communications} for {5G} and {Beyond}},
	publisher = {Association for Computing Machinery},
	author = {Akram, Junaid and Akram, Awais and Jhaveri, Rutvij H. and Alazab, Mamoun and Chi, Haoran},
	year = {2022},
	note = {event-place: Sydney, NSW, Australia},
	keywords = {access control, security, consensus, cluster head, IoDT},
	pages = {115--120},
}

@article{yan_collusion-free_2021,
	title = {Collusion-{Free} for {Cloud} {Verification} toward the {View} of {Game} {Theory}},
	volume = {22},
	issn = {1533-5399},
	url = {https://doi.org/10.1145/3423558},
	doi = {10.1145/3423558},
	abstract = {At present, clients can outsource lots of complex and abundant computation, e.g., Internet of things (IoT), tasks to clouds by the “pay as you go” model. Outsourcing computation can save costs for clients and fully utilize the existing cloud infrastructures. However, it is hard for clients to trust the clouds even if blockchain is used as the trusted platform. In this article, we utilize the verification method as SETI@home by only two rational clouds, who hope to maximize their utilities. Utilities are defined as the incomes of clouds when they provide computation results to clients. More specifically, one client outsources two jobs to two clouds and each job contains n tasks, which include k identical sentinels. Two clouds can either honestly compute each task or collude on the identical sentinel tasks by agreeing on random values. If the results of identical sentinels are identical, then client regards the jobs as correctly computed without verification. Obviously, rational clouds have incentives to deviate by collusion and provide identical random results for a higher income. We discuss how to prevent collusion by using deposits, e.g., bit-coins. Furthermore, utilities for each cloud can be automatically assigned by a smart contract. We prove that, given proper parameters, two rational clouds will honestly send correct results to the client without collusion.},
	number = {2},
	journal = {ACM Trans. Internet Technol.},
	author = {Yan, Hongyang and Jiang, Nan and Li, Kang and Wang, Yilei and Yang, Guoyu},
	month = nov,
	year = {2021},
	note = {Place: New York, NY, USA
Publisher: Association for Computing Machinery},
	keywords = {blockchain, IoT, Cloud computing, collusion free, game theory, sequential equilibrium},
}

@article{shabir_blockqos_2023,
	title = {{BlockQoS}: {Fair} {Monetization} of {On}-{Demand} {Quality}-of-{Service} {Using} {Blockchains}},
	issn = {2769-6472},
	url = {https://doi.org/10.1145/3580284},
	doi = {10.1145/3580284},
	abstract = {Video conferencing has become an essential tool for working from home. However, poor audio/video quality resulting from unstable Internet connections undermines the productivity of important tasks. Additionally, the static monetization model for ISP networks, which employs third parties, cannot support on-demand and dynamic Quality-of-Service sessions that are necessary to maximize the Quality-of-Experience of video conferencing. To address this, we introduce BlockQoS: Fair Monetization of On-Demand Quality-of-Service using Blockchains. BlockQoS allows clients to request and manage their Quality-of-Service requirements through a blockchain-based platform operating using a smart contract. It implements a decentralized monetization model to eliminate third parties, enforce transparency in service level agreements, and reduce blockchain operating costs by utilizing off-chain billing validated using zero-knowledge proofs (zk-SNARK). Additionally, we propose a Quality-of-Service delivery verification mechanism that enforces service level agreements on the hardware external to the blockchain, and a dynamic evaluation method based on the concept of Nash equilibrium in game theory that prevents malicious behavior by ISPs and users. We implemented BlockQoS over Ethereum with a Ryu controller, zk-SNARK, and SGX. Our experiments show that BlockQoS offers transaction cost reduction of up to 88\% (gas cost) and latency reduction of up to 87\% compared to the state-of-the-art on-chain solutions.},
	journal = {Distrib. Ledger Technol.},
	author = {Shabir, Muhammad Muneem and Danish, Syed Muhammad and Zhang, Kaiwen},
	month = jan,
	year = {2023},
	note = {Place: New York, NY, USA
Publisher: Association for Computing Machinery},
	keywords = {blockchain, smart contracts, QoS provisioning, zero knowledge proof},
	annote = {Just Accepted},
}

@inproceedings{song_traceability_2023,
	address = {New York, NY, USA},
	series = {{AISS} '22},
	title = {Traceability of {Product} {Supply} {Chain} {Based} on {Hyperledger} {Fabric}},
	isbn = {978-1-4503-9793-3},
	url = {https://doi.org/10.1145/3573834.3574546},
	doi = {10.1145/3573834.3574546},
	abstract = {Abstract: At present, more and more consumers and manufacturers are aware of the importance of product traceability, so it is very important to strengthen the traceability in the supply chain. The existing centralized database system has isolated data storage, and many parties involved in data query lack mutual trust. Based on the distributed ledger of the blockchain, this paper attempts to solve this problem by transforming the traceability information of physical goods into the digital of the blockchain, so as to realize the collaborative traceability of entities in the supply chain. At present, the relationship between components and products in manufacturing process cannot be captured, which limits the ability to track the source of products. This paper proposes a supply chain traceability model based on blockchain, which uses smart contracts tocomplete multi-party agreements on the chain. In the contract, the products produced by the manufacturer are transferred in the specified alliance chain entity, and in each transfer process, the products will be marked with new traceability information in the form of digital authentication. This mechanism retains the possibility of products being traced. The model is tested under the framework of hyperledger fabric. By building a blockchain network, the entity objects participating in the supply chain can be authenticated to ensure the closed-loop circulation of goods. It also indirectly proves the feasibility of commodity traceability application based on blockchain technology.},
	booktitle = {Proceedings of the 4th {International} {Conference} on {Advanced} {Information} {Science} and {System}},
	publisher = {Association for Computing Machinery},
	author = {Song, Shiyang and Lu, Jiadong and Zhao, Hanxu and Wang, Wennan and Shi, Chiyu and Luo, Ruijie},
	year = {2023},
	note = {event-place: Sanya, China},
	keywords = {Blockchain, Supplychain, Traceability},
}

@article{smaragdakis_symbolic_2021,
	title = {Symbolic {Value}-{Flow} {Static} {Analysis}: {Deep}, {Precise}, {Complete} {Modeling} of {Ethereum} {Smart} {Contracts}},
	volume = {5},
	url = {https://doi.org/10.1145/3485540},
	doi = {10.1145/3485540},
	abstract = {We present a static analysis approach that combines concrete values and symbolic expressions. This symbolic value-flow (“symvalic”) analysis models program behavior with high precision, e.g., full path sensitivity. To achieve deep modeling of program semantics, the analysis relies on a symbiotic relationship between a traditional static analysis fixpoint computation and a symbolic solver: the solver does not merely receive a complex “path condition” to solve, but is instead invoked repeatedly (often tens or hundreds of thousands of times), in close cooperation with the flow computation of the analysis. The result of the symvalic analysis architecture is a static modeling of program behavior that is much more complete than symbolic execution, much more precise than conventional static analysis, and domain-agnostic: no special-purpose definition of anti-patterns is necessary in order to compute violations of safety conditions with high precision. We apply the analysis to the domain of Ethereum smart contracts. This domain represents a fundamental challenge for program analysis approaches: despite numerous publications, research work has not been effective at uncovering vulnerabilities of high real-world value. In systematic comparison of symvalic analysis with past tools, we find significantly increased completeness (shown as 83-96\% statement coverage and more true error reports) combined with much higher precision, as measured by rate of true positive reports. In terms of real-world impact, since the beginning of 2021, the analysis has resulted in the discovery and disclosure of several critical vulnerabilities, over funds in the many millions of dollars. Six separate bug bounties totaling over \$350K have been awarded for these disclosures.},
	number = {OOPSLA},
	journal = {Proc. ACM Program. Lang.},
	author = {Smaragdakis, Yannis and Grech, Neville and Lagouvardos, Sifis and Triantafyllou, Konstantinos and Tsatiris, Ilias},
	month = oct,
	year = {2021},
	note = {Place: New York, NY, USA
Publisher: Association for Computing Machinery},
	keywords = {Blockchain, Ethereum, Smart Contracts, Program Analysis, Security},
}

@inproceedings{singi_cag_2019,
	series = {{WETSEB} '19},
	title = {{CAG}: {Compliance} {Adherence} and {Governance} in {Software} {Delivery} {Using} {Blockchain}},
	url = {https://doi.org/10.1109/WETSEB.2019.00011},
	doi = {10.1109/WETSEB.2019.00011},
	abstract = {The software development life cycle (SDLC) starts with business and functional specifications signed with a client. In addition to this, the specifications also capture policy / procedure / contractual / regulatory / legislation / standard compliances with respect to a given client industry. The SDLC must adhere to service level agreements (SLAs) while being compliant to development activities, processes, tools, frameworks, and reuse of open-source software components. In today's world, global software development happens across geographically distributed (autonomous) teams consuming extraordinary amounts of open source components drawn from a variety of disparate sources. Although this is helping organizations deal with technical and economic challenges, it is also increasing unintended risks, e.g., use of a non-complaint license software might lead to copyright issues and litigations, use of a library with vulnerabilities pose security risks etc. Mitigation of such risks and remedial measures is a challenge due to lack of visibility and transparency of activities across these distributed teams as they mostly operate in silos. We believe a unified model that non-invasively monitors and analyzes the activities of distributed teams will help a long way in building software that adhere to various compliances. In this paper, we propose a decentralized CAG - Compliance Adherence and Governance framework using blockchain technologies. Our framework (i) enables the capturing of required data points based on compliance specifications, (ii) analyzes the events for non-conformant behavior through smart contracts, (iii) provides real-time alerts, and (iv) records and maintains an immutable audit trail of various activities.},
	booktitle = {Proceedings of the 2nd {International} {Workshop} on {Emerging} {Trends} in {Software} {Engineering} for {Blockchain}},
	publisher = {IEEE Press},
	author = {Singi, Kapil and Kaulgud, Vikrant and Bose, R. P. Jagadeesh Chandra and Podder, Sanjay},
	year = {2019},
	note = {event-place: Montreal, Quebec, Canada},
	keywords = {blockchain, smart contract, distributed teams, crowd-sourcing, license verification, open-source components, vulnerability assessment},
	pages = {32--39},
}

@inproceedings{zhu_privacy-preserving_2021,
	address = {New York, NY, USA},
	series = {{ACM} {TURC} 2021},
	title = {Privacy-{Preserving} {Decentralized} {Federated} {Deep} {Learning}},
	isbn = {978-1-4503-8567-1},
	url = {https://doi.org/10.1145/3472634.3472642},
	doi = {10.1145/3472634.3472642},
	abstract = {Deep learning has achieved the high-accuracy of state-of-the-art algorithms in long-standing AI tasks. Due to the obvious privacy issues of deep learning, Google proposes Federal Deep Learning (FDL), in which distributed participants only upload local gradients and and a centralized server updates parameters based on the collected gradients. But few users are willing to participate in federated learning due to the lack of contribution evaluation and reward mechanisms. So a decentralized federated deep learning, called DFDL, has been proposed by introducing blockchain to form an effective incentive mechanism for participants. However, DFDL still faces serious privacy issues as blockchain does not guarantee the privacy of training data and model. In this paper, in order to address the aforementioned issues, we propose a new Privacy-preserving DFDL scheme, called PDFDL. With PDFDL, parties can securely learn a global model with their local gradients in the assistance of blockchain, and the parties’ sensitive data and the global model are well protected. Specifically, with a secure multi-party aggregation computing, all local gradients are encrypted by their owners before being sent to the smart contract, and can be directly aggregated without decryption. Detailed security analysis shows that PDFDL can resist various known security threats. Moreover, we give an implementation prototype by integrating deep learning module with a Blockchain development platform (Ethereum V1.6.4). We demonstrate the encryption performance and the training accuracy of our PDFDL on benchmark datasets.},
	booktitle = {{ACM} {Turing} {Award} {Celebration} {Conference} - {China} ( {ACM} {TURC} 2021)},
	publisher = {Association for Computing Machinery},
	author = {Zhu, Xudong and Li, Hui},
	year = {2021},
	note = {event-place: Hefei, China},
	keywords = {blockchain, federated deep learning, privacy-preserving},
	pages = {33--38},
}

@inproceedings{han_optionality_2019,
	address = {New York, NY, USA},
	series = {{AFT} '19},
	title = {On the {Optionality} and {Fairness} of {Atomic} {Swaps}},
	isbn = {978-1-4503-6732-5},
	url = {https://doi.org/10.1145/3318041.3355460},
	doi = {10.1145/3318041.3355460},
	abstract = {Atomic Swap enables two parties to atomically exchange their own cryptocurrencies without trusted third parties. This paper provides the first quantitative analysis on the fairness of the Atomic Swap protocol, and proposes the first fair Atomic Swap protocol with implementations.In particular, we model the Atomic Swap as the American Call Option, and prove that an Atomic Swap is equivalent to an American Call Option without the premium. Thus, the Atomic Swap is unfair to the swap participant. Then, we quantify the fairness of the Atomic Swap and compare it with that of conventional financial assets (stocks and fiat currencies). The quantification results show that the the Atomic Swap is much more unfair on cryptocurrencies than on stocks and fiat currencies in the same setting. Moreover, we use the conventional Cox-Ross-Rubinstein option pricing model in Finance to estimate the premium, and show that the estimated premium for cryptocurrencies is 2\% 3\% of the asset value, while the premium for stocks and fiat currencies is approximately 0.3\%. Furthermore, we propose two fair Atomic Swap protocols, one is for currency exchange and the other is for American Call Options. Our protocols are based on the original Atomic Swap protocol, but implement the premium mechanism. Blockchains supporting smart contracts such as Ethereum support our protocols directly. Blockchains only supporting scripts such as Bitcoin can support our protocols by adding a simple opcode. Finally, we provide the reference implementation of our protocols in Solidity, and give detailed instructions on implementing our protocols with Bitcoin script.},
	booktitle = {Proceedings of the 1st {ACM} {Conference} on {Advances} in {Financial} {Technologies}},
	publisher = {Association for Computing Machinery},
	author = {Han, Runchao and Lin, Haoyu and Yu, Jiangshan},
	year = {2019},
	note = {event-place: Zurich, Switzerland},
	keywords = {Blockchain, American Call Option, Atomic Swap, Cross-Chain Transactions},
	pages = {62--75},
}

@article{zhang_refiner_2021,
	title = {Refiner: {A} {Reliable} {Incentive}-{Driven} {Federated} {Learning} {System} {Powered} by {Blockchain}},
	volume = {14},
	issn = {2150-8097},
	url = {https://doi.org/10.14778/3476311.3476313},
	doi = {10.14778/3476311.3476313},
	abstract = {Modern mobile applications often produce decentralized data, i.e., a huge amount of privacy-sensitive data distributed over a large number of mobile devices. Techniques for learning models from decentralized data must properly handle two natures of such data, namely privacy and massive engagement. Federated learning (FL) is a promising approach for such a learning task since the technique learns models from data without exposing privacy. However, traditional FL methods assume that the participating mobile devices are honest volunteers. This assumption makes traditional FL methods unsuitable for applications where two kinds of participants are engaged: 1) self-interested participants who, without economical stimulus, are reluctant to contribute their computing resources unconditionally, and 2) malicious participants who send corrupt updates to disrupt the learning process. This paper proposes Refiner, a reliable federated learning system for tackling the challenges introduced by massive engagements of self-interested and malicious participants. Refiner is built upon Ethereum, a public blockchain platform. To engage self-interested participants, we introduce an incentive mechanism which rewards each participant in terms of the amount of its training data and the performance of its local updates. To handle malicious participants, we propose an audit scheme which employs a committee of randomly chosen validators for punishing them with no reward and preclude corrupt updates from the global model. The proposed incentive and audit scheme is implemented with cryptocurrency and smart contract, two primitives offered by Ethereum. This paper demonstrates the main features of Refiner by training a digit classification model on the MNIST dataset.},
	number = {12},
	journal = {Proc. VLDB Endow.},
	author = {Zhang, Zhebin and Dong, Dajie and Ma, Yuhang and Ying, Yilong and Jiang, Dawei and Chen, Ke and Shou, Lidan and Chen, Gang},
	month = jul,
	year = {2021},
	note = {Publisher: VLDB Endowment},
	pages = {2659--2662},
}

@inproceedings{he_construction_2022,
	address = {New York, NY, USA},
	series = {{CSAE} '22},
	title = {Construction of {Cross}-{Border} {Food} {Supply} {Chain} {Information} {Sharing} {Platform} {Based} on {Blockchain} {Under} {COVID}-19},
	isbn = {978-1-4503-9600-4},
	url = {https://doi.org/10.1145/3565387.3565414},
	doi = {10.1145/3565387.3565414},
	abstract = {The pandemic of the COVID-19 has caused many problems in the cross-border food supply chain during transportation, such as food safety is difficult to guarantee due to the infection of people or environmental epidemics, information asymmetry and difficult to share in the food supply chain, and food related information is tampered with and difficult to trace during transportation. The emergence of blockchain technology has brought new solutions to the above problems. Based on the relevant functions and characteristics of the blockchain, this paper constructs a cross-border food supply chain information sharing platform under the blockchain technology, such as using smart contracts to monitor the epidemic security risk in the transportation process of the supply chain, using hash functions and tamper proof features to deal with food information fraud, and using the distributed and decentralized characteristics of the blockchain to solve the sharing problem of information asymmetry; The time stamp in the blockchain is used to trace the information of each link node of food and the initial node for accountability. In this paper, the construction process of the platform is described in detail from the perspective of model, function and subject, and the specific process of the platform is described in detail from the perspective of information storage, information sharing and information traceability. In this paper, the emerging blockchain technology is applied to all links of the food supply chain, and considering the current epidemic problems, the platform can bring new ideas to solve the problems of cross-border food transportation during the epidemic, and has certain theoretical value.},
	booktitle = {Proceedings of the 6th {International} {Conference} on {Computer} {Science} and {Application} {Engineering}},
	publisher = {Association for Computing Machinery},
	author = {He, Zhuoli},
	year = {2022},
	note = {event-place: Virtual Event, China},
	keywords = {blockchain technology, COVID-19, food supply chain},
}

@article{pacheco_is_2022,
	title = {Is {My} {Transaction} {Done} yet? {An} {Empirical} {Study} of {Transaction} {Processing} {Times} in the {Ethereum} {Blockchain} {Platform}},
	issn = {1049-331X},
	url = {https://doi.org/10.1145/3549542},
	doi = {10.1145/3549542},
	abstract = {Ethereum is one of the most popular platforms for the development of blockchain-powered applications. These applications are known as ÐApps. When engineering ÐApps, developers need to translate requests captured in the front-end of their application into one or more smart contract transactions. Developers need to pay for these transactions and, the more they pay (i.e., the higher the gas price), the faster the transaction is likely to be processed. Developing cost-effective ÐApps is far from trivial, as developers need to optimize the balance between cost (transaction fees) and user experience (transaction processing times). Online services have been developed to provide transaction issuers (e.g., ÐApp developers) with an estimate of how long transactions will take to be processed given a certain gas price. These estimation services are crucial in the Ethereum domain and several popular wallets such as Metamask rely on them. However, despite their key role, their accuracy has not been empirically investigated so far. In this paper, we quantify the transaction processing times in Ethereum, investigate the relationship between processing times and gas prices, and determine the accuracy of state-of-the-practice estimation services. Our results indicate that transactions are processed in a median of 57s and that 90\% of the transactions are processed within 8m. We also show that higher gas prices result in faster transaction processing times with diminishing returns. In particular, we observe no practical difference in processing time between expensive and very expensive transactions. With regards to the accuracy of processing time estimation services, we observe that they are equivalent. However, when stratifying transactions by gas prices, we observe that Etherscan’s Gas Tracker is the most accurate estimation service for very cheap and cheap transaction. EthGasStation’s Gas Price API, in turn, is the most accurate estimation service for regular, expensive, and very expensive transactions. In a post-hoc study, we design a simple linear regression model with only one feature that outperforms the Gas Tracker for very cheap and cheap transactions and that performs as accurately as the EthGasStation model for the remaining categories. Based on our findings, ÐApp developers can make more informed decisions concerning the choice of the gas price of their application-issued transactions.},
	journal = {ACM Trans. Softw. Eng. Methodol.},
	author = {Pacheco, Michael and Oliva, Gustavo A. and Rajbahadur, Gopi Krishnan and Hassan, Ahmed E.},
	month = jul,
	year = {2022},
	note = {Place: New York, NY, USA
Publisher: Association for Computing Machinery},
	keywords = {Blockchain, Ethereum, Decentralized Applications (DApps), Transaction Processing Time},
	annote = {Just Accepted},
}

@inproceedings{yu_parallel_2018-1,
	address = {New York, NY, USA},
	series = {{MLMI} '18},
	title = {A {Parallel} {Smart} {Contract} {Model}},
	isbn = {978-1-4503-6556-7},
	url = {https://doi.org/10.1145/3278312.3278321},
	doi = {10.1145/3278312.3278321},
	abstract = {With the rapid development of blockchain technology, blockchain becomes a good platform for execution of smart contracts. However, since smart contracts still have a low performance of transaction processing on blockchain. It can't satisfy real-time requirements in some situations. This paper proposes a parallel smart contract model on blockchain which has a better performance in transaction processing. The challenges with the proposed approach are the implementation of the parallel mode and the solution of synchronization problem of the proposed model. This paper uses multi-thread technology to implement the proposed model where transactions are executed in parallel. Then we propose a transaction splitting algorithm to resolve the synchronization problem. Finally, experimental analysis proves that this parallel model exactly makes a remarkable development of performance in transaction processing.},
	booktitle = {Proceedings of the 2018 {International} {Conference} on {Machine} {Learning} and {Machine} {Intelligence}},
	publisher = {Association for Computing Machinery},
	author = {Yu, Wei and Luo, Kan and Ding, Yi and You, Guang and Hu, Kai},
	year = {2018},
	note = {event-place: Ha Noi, Viet Nam},
	keywords = {Blockchain, smart contract, parallel model},
	pages = {72--77},
}

@inproceedings{marescotti_accurate_2020,
	address = {Berlin, Heidelberg},
	title = {Accurate {Smart} {Contract} {Verification} {Through} {Direct} {Modelling}},
	isbn = {978-3-030-61466-9},
	url = {https://doi.org/10.1007/978-3-030-61467-6_12},
	doi = {10.1007/978-3-030-61467-6_12},
	abstract = {Smart contracts challenge the existing, highly efficient techniques applied in symbolic model checking of software by their unique traits not present in standard programming models. Still, the majority of reported smart contract verification projects either reuse off-the-shelf model checking tools resulting in inefficient and even unsound models, or apply generic solutions that typically require highly-trained human intervention. In this paper, we present the solution adopted in the formal analysis engine of the official Solidity compiler. We focus on the accurate modeling of the central aspects of smart contracts. For that, we specify purpose-built rules defined in the expressive and highly automatable logic of constrained Horn clauses, which are readily supported by an effective solving infrastructure for establishing sound safety proofs or finite-length counterexamples. We evaluated our approach on an extensive set of smart contracts recently deployed in the Ethereum platform. The reported results show that the approach is able to prove correctness and discover bugs in significantly more contracts than comparable publicly available systems.},
	booktitle = {Leveraging {Applications} of {Formal} {Methods}, {Verification} and {Validation}: {Applications}: 9th {International} {Symposium} on {Leveraging} {Applications} of {Formal} {Methods}, {ISoLA} 2020, {Rhodes}, {Greece}, {October} 20–30, 2020, {Proceedings}, {Part} {III}},
	publisher = {Springer-Verlag},
	author = {Marescotti, Matteo and Otoni, Rodrigo and Alt, Leonardo and Eugster, Patrick and Hyvärinen, Antti E. J. and Sharygina, Natasha},
	year = {2020},
	note = {event-place: Rhodes, Greece},
	pages = {178--194},
}

@inproceedings{bai_formal_2018-1,
	address = {New York, NY, USA},
	series = {{ICSCA} 2018},
	title = {Formal {Modeling} and {Verification} of {Smart} {Contracts}},
	isbn = {978-1-4503-5414-1},
	url = {https://doi.org/10.1145/3185089.3185138},
	doi = {10.1145/3185089.3185138},
	abstract = {Smart contracts can automatically perform the contract terms according to the received information, and it is one of the most important research fields in digital society. The core of smart contracts is algorithm contract, that is, the parties reach an agreement on the contents of the contract and perform the contracts according to the behaviors written in certain computer algorithms. It not only needs to make sure about the correctness of smart contracts code, but also should provide a credible contract code execution environment. Blockchain provides a trusted execution and storage environment for smart contracts by the distributed secure storage, consistency verification and encryption technology. Current challenge is how to assure that smart contract can be executed as the parties' willingness. This paper introduces formal modeling and verification in formal methods to make smart contract model and verify the properties of smart contracts. Formal methods combined with smart contracts aim to reduce the potential errors and cost during contract development process. The description of a general and formal smart contract template is provided. The tool of model checking, SPIN, is used to verify the correctness and necessary properties for a smart contract template. The research shows model checking will be useful and necessary for smart contracts.},
	booktitle = {Proceedings of the 2018 7th {International} {Conference} on {Software} and {Computer} {Applications}},
	publisher = {Association for Computing Machinery},
	author = {Bai, Xiaomin and Cheng, Zijing and Duan, Zhangbo and Hu, Kai},
	year = {2018},
	note = {event-place: Kuantan, Malaysia},
	keywords = {Smart contracts, Formal methods, Formal Verification, Model checking, Modeling, SPIN},
	pages = {322--326},
}

@inproceedings{ladleif_unifying_2019,
	address = {Berlin, Heidelberg},
	title = {A {Unifying} {Model} of {Legal} {Smart} {Contracts}},
	isbn = {978-3-030-33222-8},
	url = {https://doi.org/10.1007/978-3-030-33223-5_27},
	doi = {10.1007/978-3-030-33223-5_27},
	abstract = {Legal smart contracts have been a subject of research for decades, especially since the fusion of deontic logic with traditional programming poses significant challenges. The issue of how to develop and verify legal smart contracts is growing in importance, not least due to the rapid adoption of blockchain-based smart contracts. In this paper, we want to pave the way towards a model-driven approach at legal smart contract development. To this end, we combine insights from literature in law and legal informatics with capabilities of existing modeling approaches and give a unifying model that encapsulates essential components of legal smart contracts. The unifying model may be used as a reference for language designers aiming at a holistic representation of legal smart contracts in a model-driven architecture. It may further serve as a basis for comparing existing modeling frameworks, which we demonstrate by applying it to a set of eight distinct languages.},
	booktitle = {Conceptual {Modeling}: 38th {International} {Conference}, {ER} 2019, {Salvador}, {Brazil}, {November} 4–7, 2019, {Proceedings}},
	publisher = {Springer-Verlag},
	author = {Ladleif, Jan and Weske, Mathias},
	year = {2019},
	note = {event-place: Salvador, Brazil},
	keywords = {Smart contracts, Conceptual model, Legal contracts},
	pages = {323--337},
}

@inproceedings{bartoletti_formal_2021,
	address = {Berlin, Heidelberg},
	title = {A {Formal} {Model} of {Algorand} {Smart} {Contracts}},
	isbn = {978-3-662-64321-1},
	url = {https://doi.org/10.1007/978-3-662-64322-8_5},
	doi = {10.1007/978-3-662-64322-8_5},
	abstract = {We develop a formal model of Algorand stateless smart contracts (stateless ASC1). We exploit our model to prove fundamental properties of the Algorand blockchain, and to establish the security of some archetypal smart contracts. While doing this, we highlight various design patterns supported by Algorand. We perform experiments to validate the coherence of our formal model w.r.t.\&nbsp;the actual implementation.},
	booktitle = {Financial {Cryptography} and {Data} {Security}: 25th {International} {Conference}, {FC} 2021, {Virtual} {Event}, {March} 1–5, 2021, {Revised} {Selected} {Papers}, {Part} {I}},
	publisher = {Springer-Verlag},
	author = {Bartoletti, Massimo and Bracciali, Andrea and Lepore, Cristian and Scalas, Alceste and Zunino, Roberto},
	year = {2021},
	pages = {93--114},
}

@inproceedings{bartoletti_true_2020,
	address = {Berlin, Heidelberg},
	title = {A {True} {Concurrent} {Model} of {Smart} {Contracts} {Executions}},
	isbn = {978-3-030-50028-3},
	url = {https://doi.org/10.1007/978-3-030-50029-0_16},
	doi = {10.1007/978-3-030-50029-0_16},
	abstract = {The development of blockchain technologies has enabled the trustless execution of so-called smart contracts, i.e. programs that regulate the exchange of assets (e.g., cryptocurrency) between users. In a decentralized blockchain, the state of smart contracts is collaboratively maintained by a peer-to-peer network of mutually untrusted nodes, which collect from users a set of transactions (representing the required actions on contracts), and execute them in some order. Once this sequence of transactions is appended to the blockchain, the other nodes validate it, re-executing the transactions in the same order. The serial execution of transactions does not take advantage of the multi-core architecture of modern processors, so contributing to limit the throughput. In this paper we propose a true concurrent model of smart contracts execution. Based on this, we show how static analysis of smart contracts can be exploited to parallelize the execution of transactions.},
	booktitle = {Coordination {Models} and {Languages}: 22nd {IFIP} {WG} 6.1 {International} {Conference}, {COORDINATION} 2020, {Held} as {Part} of the 15th {International} {Federated} {Conference} on {Distributed} {Computing} {Techniques}, {DisCoTec} 2020, {Valletta}, {Malta}, {June} 15–19, 2020, {Proceedings}},
	publisher = {Springer-Verlag},
	author = {Bartoletti, Massimo and Galletta, Letterio and Murgia, Maurizio},
	year = {2020},
	note = {event-place: Valletta, Malta},
	pages = {243--260},
}

@inproceedings{kochovski_smart_2021,
	address = {Berlin, Heidelberg},
	title = {Smart {Contract} {For}\&nbsp;{Cross}-{Border} {AI} {Model} {Management}},
	isbn = {978-3-030-92915-2},
	url = {https://doi.org/10.1007/978-3-030-92916-9_20},
	doi = {10.1007/978-3-030-92916-9_20},
	abstract = {The new wave of Artificial Intelligence (AI) implementation has made it possible to deploy and (re)use AI models seamlessly. Modern software engineering techniques make it possible to containerize and orchestrate AI services globally, and across the whole computing continuum from the Cloud to the Edge. However, the data processed by AI services may be subject to various privacy and governance constraints, and thus subject to governmental regulations. In this work we present an advanced Smart Contract that is built to achieve regulatory compliance in cross-border AI model sharing between the European Union and the Republic of Korea. Key feature of the Smart Contract are specially developed oracle adapters that are used to achieve fine-grained control on AI model management.},
	booktitle = {Economics of {Grids}, {Clouds}, {Systems}, and {Services}: 18th {International} {Conference}, {GECON} 2021, {Virtual} {Event}, {September} 21–23, 2021, {Proceedings}},
	publisher = {Springer-Verlag},
	author = {Kochovski, Petar and Kum, Seungwoo and Moon, Jaewon and Vujić, Aleks and Stankovski, Vlado},
	year = {2021},
	keywords = {Blockchain, Artificial Intelligence, Cross-border, Data-management},
	pages = {215--222},
}

@inproceedings{bao_verification_2022,
	address = {Berlin, Heidelberg},
	title = {On {Verification} of {Smart} {Contracts} via {Model} {Checking}},
	isbn = {978-3-031-10362-9},
	url = {https://doi.org/10.1007/978-3-031-10363-6_7},
	doi = {10.1007/978-3-031-10363-6_7},
	abstract = {Combined with smart contracts, the application of blockchain techniques has grown faster and broader. However, it is very difficult to write secure and functionally correct smart contracts because of the openness of blockchain platforms. Formal verification, such as model checking, has been proven to be an effective way of guaranteeing security and correctness of systems. In this paper, we propose a novel model checking based framework, called mcVer, to support the verification of smart contracts written in Solidity. Built on model checking tool VERDS, the mcVer framework is able to verify not only safety properties but also liveness properties of smart contracts. For the properties that are not satisfied, mcVer produces a counter example by showing a sequence of statements in the original Solidity program as a hint for fault localization. We implemented the automatic transformation from a subset of the Solidity language to the modeling language of VERDS, that therefore provides automatic verification for smart contracts. Experiments are carried out on various cases, including checking contracts for finding typical security vulnerabilities and verifying properties of an access control smart contract. The experimental results demonstrate the flexibility and efficiency of mcVer.},
	booktitle = {Theoretical {Aspects} of {Software} {Engineering}: 16th {International} {Symposium}, {TASE} 2022, {Cluj}-{Napoca}, {Romania}, {July} 8–10, 2022, {Proceedings}},
	publisher = {Springer-Verlag},
	author = {Bao, Yulong and Zhu, Xue-Yang and Zhang, Wenhui and Shen, Wuwei and Sun, Pengfei and Zhao, Yingqi},
	year = {2022},
	pages = {92--112},
}

@inproceedings{britten_modelling_2022-1,
	address = {New York, NY, USA},
	series = {{FTSCS} 2022},
	title = {Modelling a {Blockchain} for {Smart} {Contract} {Verification} {Using} {DeepSEA}},
	isbn = {978-1-4503-9907-4},
	url = {https://doi.org/10.1145/3563822.3568011},
	doi = {10.1145/3563822.3568011},
	abstract = {To create trustworthy programs, the 'gold standard' is specifications at a high-enough level to clearly correspond to the informal specifications, and also a refinement proof linking these high-level specifications down to, in our case, executable bytecode. The DeepSEA system demonstrates how this can be done, in the context of smart contracts on the Ethereum blockchain. A key component of this is the model of the blockchain on which the smart contracts reside. When doing proofs in DeepSEA, it is critical to have such a model, which allows for the writing of specifications at a high-level clearly corresponding to informal specifications. A candidate model for doing so and its usefulness for carrying out proofs is discussed in this paper.},
	booktitle = {Proceedings of the 8th {ACM} {SIGPLAN} {International} {Workshop} on {Formal} {Techniques} for {Safety}-{Critical} {Systems}},
	publisher = {Association for Computing Machinery},
	author = {Britten, Daniel and Reeves, Steve},
	year = {2022},
	note = {event-place: Auckland, New Zealand},
	keywords = {blockchain, smart contracts, formal methods},
	pages = {88--94},
}

@inproceedings{garfatta_model_2022-1,
	address = {New York, NY, USA},
	series = {{SAC} '22},
	title = {Model {Checking} of {Vulnerabilities} in {Smart} {Contracts}: {A} {Solidity}-to-{CPN} {Approach}},
	isbn = {978-1-4503-8713-2},
	url = {https://doi.org/10.1145/3477314.3507309},
	doi = {10.1145/3477314.3507309},
	abstract = {Despite the benefits that the Blockchain technology brings to many application fields, its adoption does not come without challenges. Smart contracts, which are at the core of 2nd generation blockchains, can often be riddled with vulnerabilities that can be exploited to attack the platform and threaten its security. It is therefore crucial for the protection of the designed systems to prove the correctness of the smart contracts to be deployed. Approaches have been proposed to detect generic vulnerabilities like reentrancy, but the results would often include false positives where the detected bug is either non existent or not exploitable. Besides, such approaches do not offer to check contract-specific properties. The work presented in this paper is situated as part of a formal approach that we have proposed in an attempt to bridge this gap. This previously outlined approach is based on the transformation of Solidity smart contracts into Coloured Petri nets, which provides the possibility to verify smart contracts with reference to properties expressed as Linear Temporal Logic (LTL) formulae. Herein we extend our previous work on mainly two levels: first, by taking into account the concept of function calls in the transformation and second, by focusing on the LTL properties that can define the correctness of a smart contract. Such properties can be specific to the control- or data-flow of the contracts being checked. They can also be used to express vulnerabilities as we showcase by proposing LTL formalizations for six vulnerabilities from the literature. We then leverage the capability of the Helena model checker to detect these vulnerabilities while discerning their exploitability, as well as check temporal-based contract-specific properties.},
	booktitle = {Proceedings of the 37th {ACM}/{SIGAPP} {Symposium} on {Applied} {Computing}},
	publisher = {Association for Computing Machinery},
	author = {Garfatta, Ikram and Klai, Kaïs and Graïet, Mohamed and Gaaloul, Walid},
	year = {2022},
	note = {event-place: Virtual Event},
	keywords = {blockchain, smart contract, coloured petri nets, model checker, solidity, temporal properties},
	pages = {316--325},
}

@inproceedings{liu_novel_2020-1,
	address = {New York, NY, USA},
	series = {{IECC} '20},
	title = {A {Novel} {Supply} {Chain} {Model} {Based} on {Smart} {Contract}},
	isbn = {978-1-4503-7770-6},
	url = {https://doi.org/10.1145/3409934.3409942},
	doi = {10.1145/3409934.3409942},
	abstract = {Facing on bursting of the huge quantity of trade, the problem of finance by micro and small firms, the expansion of business development of core enterprise in supply chain, the development of comprehensive finance services, it is not well worked by traditional ways. Moreover it is more and more restricting the development of supply chain. Considering the advantages of automatic executing and high efficiency of smart contract, the feature of decentralization, security, trustworthiness and anti-tampering of blockchain, it was presented a novel supply chain model based on smart contract and blockchain for solving the problem totally. The model relied on the core enterprise of supply chain, integrated the upstream and downstream industries, constructed a consortium chain, that consisted of core enterprise, financial institutions, suppliers and dealers, formed an encrypted credit named ET (Electronic Trust) based on the trustworthiness of the trust industries chain. Actually, ET is equaled to the actual credit, it could be paid for the suppliers according to the cargo value before the last settlement. So the ET could combine the virtual and actual capital. Thus it also could further solve the common pain points of supply chain.},
	booktitle = {Proceedings of the 2nd {International} {Electronics} {Communication} {Conference}},
	publisher = {Association for Computing Machinery},
	author = {Liu, Haitao},
	year = {2020},
	note = {event-place: Singapore, Singapore},
	keywords = {blockchain, smart contract, ET, supply chain},
	pages = {115--120},
}

@article{shishkin_debugging_2019,
	title = {Debugging {Smart} {Contract}’s {Business} {Logic} {Using} {Symbolic} {Model} {Checking}},
	volume = {45},
	issn = {0361-7688},
	url = {https://doi.org/10.1134/S0361768819080164},
	doi = {10.1134/S0361768819080164},
	number = {8},
	journal = {Program. Comput. Softw.},
	author = {Shishkin, E.},
	month = dec,
	year = {2019},
	note = {Place: USA
Publisher: Plenum Press},
	pages = {590--599},
}

@inproceedings{crincoli_vulnerable_2022-1,
	address = {New York, NY, USA},
	series = {{BSCI} '22},
	title = {Vulnerable {Smart} {Contract} {Detection} by {Means} of {Model} {Checking}},
	isbn = {978-1-4503-9175-7},
	url = {https://doi.org/10.1145/3494106.3528672},
	doi = {10.1145/3494106.3528672},
	abstract = {We are recently witnessing an exponential use of blockchain technology since information infrastructures are increasingly moving from the concept of centralisation to the decentralization ones. Blockchain technology is strictly related to the exchange of sensitive information, and its massive adoption is corresponding to interest from attackers. In this paper, we propose a method to automatically detect whether a Smart Contract (i.e. a contract between two parties concerning the exchange of goods and services, it is executed automatically and is governed by a source code written by a developer, contains clearly conditions accepted by both parties and resides on a distributed and decentralised network of computers) exhibits vulnerability. The proposed method relies on model checking and, through the adoption of μ-Calculus rules, is aimed to detect four different vulnerabilities on Smart Contracts modeled as automata. We preliminary evaluate the proposed method on a dataset composed by 40 (vulnerable and legitimate) contracts, by obtaining a precision ranging from 0.98 to 1 and a recall equal to 1, confirming that the proposed method can be promising in vulnerable Smart Contract detection.},
	booktitle = {Proceedings of the {Fourth} {ACM} {International} {Symposium} on {Blockchain} and {Secure} {Critical} {Infrastructure}},
	publisher = {Association for Computing Machinery},
	author = {Crincoli, Giuseppe and Iadarola, Giacomo and La Rocca, Piera Elena and Martinelli, Fabio and Mercaldo, Francesco and Santone, Antonella},
	year = {2022},
	note = {event-place: Nagasaki, Japan},
	keywords = {blockchain, smart contract, privacy, security, formal methods, model checking},
	pages = {3--10},
}

@inproceedings{liu_modcon_2020-1,
	address = {New York, NY, USA},
	series = {{ESEC}/{FSE} 2020},
	title = {{ModCon}: {A} {Model}-{Based} {Testing} {Platform} for {Smart} {Contracts}},
	isbn = {978-1-4503-7043-1},
	url = {https://doi.org/10.1145/3368089.3417939},
	doi = {10.1145/3368089.3417939},
	abstract = {Unlike those on public permissionless blockchains, smart contracts on enterprise permissioned blockchains are not limited by resource constraints, and therefore often larger and more complex. Current testing and analysis tools lack support for such contracts, which demonstrate stateful behaviors and require special treatment in quality assurance. In this paper, we present a model-based testing platform, called ModCon, relying on user-specified models to define test oracles, guide test generation, and measure test adequacy. ModCon is Web-based and supports both permissionless and permissioned blockchain platforms. We demonstrate the usage and key features of ModCon on real enterprise smart contract applications.},
	booktitle = {Proceedings of the 28th {ACM} {Joint} {Meeting} on {European} {Software} {Engineering} {Conference} and {Symposium} on the {Foundations} of {Software} {Engineering}},
	publisher = {Association for Computing Machinery},
	author = {Liu, Ye and Li, Yi and Lin, Shang-Wei and Yan, Qiang},
	year = {2020},
	note = {event-place: Virtual Event, USA},
	keywords = {blockchain, Smart contract, model-based testing},
	pages = {1601--1605},
}

@inproceedings{song_efficient_2019,
	address = {Berlin, Heidelberg},
	title = {An {Efficient} {Vulnerability} {Detection} {Model} for {Ethereum} {Smart} {Contracts}},
	isbn = {978-3-030-36937-8},
	url = {https://doi.org/10.1007/978-3-030-36938-5_26},
	doi = {10.1007/978-3-030-36938-5_26},
	abstract = {Smart contracts are decentralized applications running on the blockchain to meet various practical scenario demands. The increasing number of security events regarding smart contracts have led to huge pecuniary losses and destroyed the ecological stability of contract layer on the blockchain. Faced with the increasing quantity of contracts, it is an emerging issue to effectively and efficiently detect vulnerabilities in smart contracts. Existing methods of detecting vulnerabilities in smart contracts like Oyente mainly employ symbolic execution. This method is very time-consuming, as the symbolic execution requires the exploration of all executable paths in a contract. In this work, we propose an efficient model for the detection of vulnerabilities in Ethereum smart contracts with machine learning techniques. The model is able to effectively and fast detect vulnerabilities based on the patterns learned from training samples. Our model is evaluated on 49502 real-world smart contracts and the results verify its effectiveness and efficiency.},
	booktitle = {Network and {System} {Security}: 13th {International} {Conference}, {NSS} 2019, {Sapporo}, {Japan}, {December} 15–18, 2019, {Proceedings}},
	publisher = {Springer-Verlag},
	author = {Song, Jingjing and He, Haiwu and Lv, Zhuo and Su, Chunhua and Xu, Guangquan and Wang, Wei},
	year = {2019},
	note = {event-place: Sapporo, Japan},
	keywords = {Blockchain, Smart contracts, Vulnerability detection},
	pages = {433--442},
}

@article{du_four-tier_2023,
	title = {A {Four}-{Tier} {Smart} {Contract} {Model} with {On}-{Chain} {Upgrade}},
	volume = {2023},
	issn = {1939-0114},
	url = {https://doi.org/10.1155/2023/8455894},
	doi = {10.1155/2023/8455894},
	abstract = {When there are loopholes in smart contracts or changes in demand, the existing three-tier model can only implement partial on-chain upgrades and the security of on-chain upgrades cannot be guaranteed. In this study, we optimized the three-tier smart contract model and proposed a four-tier smart contract model that includes the proxy, verification, business, and storage layers. The proxy layer is used to link contracts with other layers, the verification layer is used to check the integrity, boundary values, and abnormal processes of contracts, the business layer is used to execute business logic, and the storage layer is used to store data uniformly. On the basis of the proposed model, an on-chain upgrade and verification algorithm is proposed, which implements on-chain upgrade, on-chain verification, and version compatibility of contracts. We then design an information exchange system based on the proposed model and algorithm and test it based on the FISCO BCOS platform. Experiments show that, compared to the three-tier model, the proposed four-tier model and algorithm can implement the on-chain upgrade and reduce the contract complexity and data migration cost at the cost of some overall deployment.},
	journal = {Sec. and Commun. Netw.},
	author = {Du, Zhiqiang and Cheng, Hao and Fu, Yanfang and Huang, Muhong and Liu, Liangxin and Ma, Yifan and Cui, Jie},
	month = jan,
	year = {2023},
	note = {Place: USA
Publisher: John Wiley \&amp; Sons, Inc.},
}

@inproceedings{garfatta_model_2021,
	address = {Berlin, Heidelberg},
	title = {Model {Checking} of {Solidity} {Smart} {Contracts} {Adopted} for {Business} {Processes}},
	isbn = {978-3-030-91430-1},
	url = {https://doi.org/10.1007/978-3-030-91431-8_8},
	doi = {10.1007/978-3-030-91431-8_8},
	abstract = {Several features of the Blockchain technology are well aligned with critical issues in the Business Process Management (BPM) field, and yet adopting Blockchain for BPM should not be taken lightly. In fact, the security of smart contracts, which are one of the main elements of the Blockchain that make the integration with BPM possible, has proved to be vulnerable. It is therefore crucial for the protection of the designed business processes to prove the correctness of the smart contracts to be deployed on a blockchain. In this paper we propose a formal approach based on the transformation of Solidity smart contracts, with consideration of the BPM context in which they are used, into a Hierarchical Coloured Petri net. We express a set of smart contract vulnerabilities as temporal logic formulae and use the Helena model checker to, not only detect such vulnerabilities while discerning their exploitability, but also check other temporal-based contract-specific properties.},
	booktitle = {Service-{Oriented} {Computing}: 19th {International} {Conference}, {ICSOC} 2021, {Virtual} {Event}, {November} 22–25, 2021, {Proceedings}},
	publisher = {Springer-Verlag},
	author = {Garfatta, Ikram and Klai, Kaïs and Graïet, Mohamed and Gaaloul, Walid},
	year = {2021},
	note = {event-place: Dubai, United Arab Emirates},
	keywords = {Blockchain, Solidity, Smart contracts, Model checking, Business process management, Hierarchical coloured petri nets, Temporal properties},
	pages = {116--132},
}

@inproceedings{richard_smart_2021-1,
	address = {New York, NY, USA},
	series = {{ICBTA} 2020},
	title = {Smart {Contract} {Development} {Model} and the {Future} of {Blockchain} {Technology}},
	isbn = {978-1-4503-8896-2},
	url = {https://doi.org/10.1145/3446983.3446994},
	doi = {10.1145/3446983.3446994},
	abstract = {Blockchain has become a mainstream technology in our society in recent years. With its nature of secure decentralization, people can create decentralized applications by developing smart contracts on top of a blockchain platform. With blockchain, technology is still in the developing phase, the smart contract development process in blockchain has its unique complexity and uncertainty. The condition will drive the challenge for any developers to work on this issue. In this research, we determine the smart contract development model in creating decentralized applications. Our proposed model aligned with our findings in the systematic mapping process of this study.},
	booktitle = {2020 the 3rd {International} {Conference} on {Blockchain} {Technology} and {Applications}},
	publisher = {Association for Computing Machinery},
	author = {Richard, Richard and Prabowo, Harjanto and Trisetyarso, Agung and Soewito, Benfano},
	year = {2021},
	note = {event-place: Xi'an, China},
	keywords = {Blockchain, Smart Contract, Smart Contract Development, Decentralized Applications, Systematic Mapping},
	pages = {34--39},
}

@inproceedings{ding_sc-rbac_2019,
	address = {Berlin, Heidelberg},
	title = {{SC}-{RBAC}: {A} {Smart} {Contract} {Based} {RBAC} {Model} for {DApps}},
	isbn = {978-3-030-37428-0},
	url = {https://doi.org/10.1007/978-3-030-37429-7_8},
	doi = {10.1007/978-3-030-37429-7_8},
	abstract = {Blockchain technology with its non-centralized, transparent, trustful, traceable and tamper-resistant features draws more and more attention both in commercial and scientific area. Smart contracts and DApps (Decentralized Applications) are programs naturally running automatically on blockchain. Access control is a principle that regulates the access to critical resources. RBAC (Role based Access Control) is one of access control mechanisms and it involves three parts: user, role and permission, with their relations, corresponding to real business. However, traditional implementation of RBAC relies on centralized server which is in danger of being modified, invaded or a single point of failure. The paper proposes a decentralized and smart contract based RBAC model named SC-RBAC for DApps. It is developed by Ethereum’s Solidity and offers a strong compatibility with different DApps. The features of SC-RBAC associated with flexible interfaces, traceability and security enrich the community of DApps. The results of two experiments are discussed to evaluate the overheads of SC-RBAC model.},
	booktitle = {Human {Centered} {Computing}: 5th {International} {Conference}, {HCC} 2019, Čačak, {Serbia}, {August} 5–7, 2019, {Revised} {Selected} {Papers}},
	publisher = {Springer-Verlag},
	author = {Ding, Yi and Jin, Jun and Zhang, Jinglun and Wu, Zhongyi and Hu, Kai},
	year = {2019},
	note = {event-place: Čačak, Serbia},
	keywords = {Blockchain, Smart contract, DApps, Access control, RBAC},
	pages = {75--85},
}

@inproceedings{gorski_modeling_2019,
	address = {Berlin, Heidelberg},
	title = {Modeling of {Smart} {Contracts} in {Blockchain} {Solution} for {Renewable} {Energy} {Grid}},
	isbn = {978-3-030-45092-2},
	url = {https://doi.org/10.1007/978-3-030-45093-9_61},
	doi = {10.1007/978-3-030-45093-9_61},
	abstract = {The paper presents the manner of smart contracts’ modeling in blockchain solution. The authors illustrate the modeling approach using the example of a renewable energy system. The paper proposes extension of Unified Modeling Language (UML) in form of UML Profile for Smart Contracts, appropriate for smart contract design. Moreover, the standard smart contract design and implementation method, in Corda environment, has been made more flexible. The authors present static aspect of newly designed Smart Contract Design Pattern.},
	booktitle = {Computer {Aided} {Systems} {Theory} – {EUROCAST} 2019: 17th {International} {Conference}, {Las} {Palmas} de {Gran} {Canaria}, {Spain}, {February} 17–22, 2019, {Revised} {Selected} {Papers}, {Part} {I}},
	publisher = {Springer-Verlag},
	author = {Górski, Tomasz and Bednarski, Jakub},
	year = {2019},
	note = {event-place: Las Palmas de Gran Canaria, Spain},
	keywords = {Blockchain, Smart contract, Architectural views model 1+5, Distributed ledger, Software architecture},
	pages = {507--514},
}

@inproceedings{jiang_vddl_2023,
	address = {Berlin, Heidelberg},
	title = {{VDDL}: {A} {Deep} {Learning}-{Based} {Vulnerability} {Detection} {Model} for {Smart} {Contracts}},
	isbn = {978-3-031-20095-3},
	url = {https://doi.org/10.1007/978-3-031-20096-0_6},
	doi = {10.1007/978-3-031-20096-0_6},
	abstract = {With the widespread use of smart contracts in various fields, the research on smart contract vulnerability detection has increased yearly. Most of the previous research work is based on symbol detection and comparison with expert-defined error patterns to analyze the possible vulnerabilities of smart contracts. The accuracy and performance of such methods are generally low. In response to this problem, this paper proposes an efficient smart contract vulnerability detection model VDDL (Vulnerability Detection Based on Deep Learning). VDDL uses a multi-layer bidirectional Transformer architecture as the model architecture, involving a multi-head attention mechanism and a masking mechanism. A multi-head attention mechanism is applied in the encoder-decoder layer. The masking mechanism randomly masks the input tokens and combined with the context to predict the masked tokens, a deep bidirectional representation for training is realized. Furthermore, VDDL incorporates CodeBERT, a large bimodal pre-trained model for natural and programming languages, to improve training performance. We collected 47,038 smart contracts as datasets for model training and testing. In the end, the accuracy of VDDL reached 92.35\%, the recall reached 81.43\%, and the F1-score reached 86.38\%, which can efficiently detect possible loopholes in smart contracts.},
	booktitle = {Machine {Learning} for {Cyber} {Security}: 4th {International} {Conference}, {ML4CS} 2022, {Guangzhou}, {China}, {December} 2–4, 2022, {Proceedings}, {Part} {I}},
	publisher = {Springer-Verlag},
	author = {Jiang, Fan and Cao, Yuanlong and Xiao, Jianmao and Yi, Hui and Lei, Gang and Liu, Min and Deng, Shuiguang and Wang, Hao},
	year = {2023},
	note = {event-place: Guangzhou, China},
	keywords = {Blockchain, Smart contract, Deep learning, Transformer, Vulnerability},
	pages = {72--86},
}

@article{xu_novel_2021,
	title = {A {Novel} {Machine} {Learning}-{Based} {Analysis} {Model} for {Smart} {Contract} {Vulnerability}},
	volume = {2021},
	issn = {1939-0114},
	url = {https://doi.org/10.1155/2021/5798033},
	doi = {10.1155/2021/5798033},
	abstract = {In recent years, a lot of vulnerabilities of smart contracts have been found. Hackers used these vulnerabilities to attack the corresponding contracts developed in the blockchain system such as Ethereum, and it has caused lots of economic losses. Therefore, it is very important to find out the potential problems of the smart contracts and develop more secure smart contracts. As blockchain security events have raised more important issues, more and more smart contract security analysis methods have been developed. Most of these methods are based on traditional static analysis or dynamic analysis methods. There are only a few methods that use emerging technologies, such as machine learning. Some models that use machine learning to detect smart contract vulnerabilities cost much time in extracting features manually. In this paper, we introduce a novel machine learning-based analysis model by introducing the shared child nodes for smart contract vulnerabilities. We build the Abstract-Syntax-Tree (AST) for smart contracts with some vulnerabilities from two data sets including SmartBugs and SolidiFI-benchmark. Then, we build the Abstract-Syntax-Tree (AST) of the labeled smart contract for data sets named Smartbugs-wilds. Next, we get the shared child nodes from both of the ASTs to obtain the structural similarity, and then, we construct a feature vector composed of the values that measure structural similarity automatically to build our machine learning model. Finally, we get a KNN model that can predict eight types of vulnerabilities including Re-entrancy, Arithmetic, Access Control, Denial of Service, Unchecked Low Level Calls, Bad Randomness, Front Running, and Denial of Service. The accuracy, recall, and precision of our KNN model are all higher than 90\%. In addition, compared with some other analysis tools including Oyente and SmartCheck, our model has higher accuracy. In addition, we spent less time for training .},
	journal = {Sec. and Commun. Netw.},
	author = {Xu, Yingjie and Hu, Gengran and You, Lin and Cao, Chengtang and Derhab, Abdelouahid},
	month = jan,
	year = {2021},
	note = {Place: USA
Publisher: John Wiley \&amp; Sons, Inc.},
}

@article{kim_rolebased_2022,
	title = {Role‐{Based} {Access} {Control} {Video} {Surveillance} {Mechanism} {Modeling} in {Smart} {Contract} {Environment}},
	volume = {33},
	issn = {2161-3915},
	url = {https://doi.org/10.1002/ett.4227},
	doi = {10.1002/ett.4227},
	abstract = {Closed circuit television (CCTV) is installed on roads or in facilities for the purpose of filming videos to be used for crime prevention or as evidence for accidents in the future, and the number of CCTVs installed annually is increasing sharply. The videos collected by the devices can be submitted as legal evidence for accidents, which could happen in the future, but the damage to their integrity may cause the loss of reliability. Blockchain, which guarantees the integrity of data by sharing data as a distributed network method on these issues, can be applied as an effective means of data forgery. In general, however, video information contains sensitive data within the image, and sharing it externally can cause many problems. Thus, in this paper, by implementing role‐based approach control based on a block chain that guarantees integrity through sharing of data, a mechanism is proposed to share filmed images but prevent indiscriminate access by third parties. image image In this paper, we proposed a video surveillance mechanism that can perform role‐based access control in a blockchain environment that provides smart contracts. Blockchain‐based mechanisms ensure the integrity of recorded data, and at the same time, by incorporating smart contracts, the reliability of the system administrator can be strengthened.},
	number = {4},
	journal = {Trans. Emerg. Telecommun. Technol.},
	author = {Kim, Jinsu and Park, Namje},
	month = apr,
	year = {2022},
	note = {Place: USA
Publisher: John Wiley \&amp; Sons, Inc.},
}

@article{rosaire_brice_design_2020,
	title = {Design of a {Blockchain}-{Based} {Smart} {Contract} {Model} for {Child} {Labor} {Alleviation}},
	volume = {11},
	issn = {1947-9301},
	url = {https://doi.org/10.4018/IJTD.2020070104},
	doi = {10.4018/IJTD.2020070104},
	abstract = {The achievements of west and central Africa in producing more than 60\% of the world's cocoa, and sub-Saharan Africa's achievement in producing 13\% of the world's cotton, hide child labor. These significant levels of production often involve child exposure to issues such as a lack of education; pesticides; dangerous farming tools; work accidents; human trafficking; etc. Blockchain offers an immutable register that allows for digital transactions, smart contract creation, as well as end-to-end product traceability. The main aim of this article is to provide an intelligent contract framework that protects child labor in farming while further enlightening understandings of adoption-related challenges. This framework considers conditions that farmer associations need to satisfy and gives them a tool to improve children's welfare. A research model for the adoption of this tool has been proposed and validated through surveys in the cotton and cacao sectors.},
	number = {3},
	journal = {Int. J. Technol. Diffus.},
	author = {Rosaire Brice, Senou Mahugnon and Jules, Degila},
	month = jul,
	year = {2020},
	note = {Place: USA
Publisher: IGI Global},
	keywords = {Blockchain, Acceptation Issues, Central Africa, Child Work, Cocoa, Cotton, Digital Ledger, Intelligent Agreement, Investigation, West Africa},
	pages = {60--81},
}

@inproceedings{guo_poster_2020-1,
	address = {New York, NY, USA},
	series = {{ASIA} {CCS} '20},
	title = {{POSTER}: {Oblivious} {Access} {System} on {Decentralized} {Database} over {Parallel} {Smart} {Contract} {Model}},
	isbn = {978-1-4503-6750-9},
	url = {https://doi.org/10.1145/3320269.3405436},
	doi = {10.1145/3320269.3405436},
	abstract = {Data stored on centralized cloud servers may have some risks. Moreover, it may leak the data access pattern when accessing data on cloud servers. Oblivious RAM (ORAM) is a candidate solution to hide the data access pattern, but it inherently induces some overheads of accessing data. In this paper, we address the issues above, and propose the oblivious access system on decentralized database over parallel smart contract model. The proposed system can slightly reduce the overhead of ORAM and overcome the problem from centralized servers. The main techniques are to use parallel smart contract model to improve the performance of smart contract execution and garbled circuit to reduce the cost of communication.},
	booktitle = {Proceedings of the 15th {ACM} {Asia} {Conference} on {Computer} and {Communications} {Security}},
	publisher = {Association for Computing Machinery},
	author = {Guo, Zhong-Yi and Chen, Yu-Chi and Lin, Hsiu-Ping},
	year = {2020},
	note = {event-place: Taipei, Taiwan},
	keywords = {blockchain, smart contract, garbled circuit, oblivious ram},
	pages = {895--897},
}

@inproceedings{hall-andersen_game_2021,
	address = {Berlin, Heidelberg},
	title = {Game {Theory} on the {Blockchain}: {A} {Model} for {Games} with {Smart} {Contracts}},
	isbn = {978-3-030-85946-6},
	url = {https://doi.org/10.1007/978-3-030-85947-3_11},
	doi = {10.1007/978-3-030-85947-3_11},
	abstract = {We propose a model for games in which the players have shared access to a blockchain that allows them to deploy smart contracts to act on their behalf. This changes fundamental game-theoretic assumptions about rationality since a contract can commit a player to act irrationally in specific subgames, making credible otherwise non-credible threats. This is further complicated by considering the interaction between multiple contracts which can reason about each other. This changes the nature of the game in a nontrivial way as choosing which contract to play can itself be considered a move in the game. Our model generalizes known notions of equilibria, with a single contract being equivalent to a Stackelberg equilibrium, and two contracts being equivalent to a reverse Stackelberg equilibrium. We prove a number of bounds on the complexity of computing SPE in such games with smart contracts. We show that computing an SPE is PSPACE-hard in the general case. Specifically, in games with k contracts, we show that computing an SPE is ΣkP-hard for games of imperfect information. We show that computing an SPE remains PSPACE-hard in games of perfect information if we allow for an unbounded number of contracts. We give an algorithm for computing an SPE in two-contract games of perfect information that runs in time O(mℓ) where m is the size of the game tree and ℓ is the number of terminal nodes. Finally, we conjecture the problem to be NP-complete for three contracts.},
	booktitle = {Algorithmic {Game} {Theory}: 14th {International} {Symposium}, {SAGT} 2021, {Aarhus}, {Denmark}, {September} 21–24, 2021, {Proceedings}},
	publisher = {Springer-Verlag},
	author = {Hall-Andersen, Mathias and Schwartzbach, Nikolaj I.},
	year = {2021},
	note = {event-place: Aarhus, Denmark},
	pages = {156--170},
}

@article{sillaber_laying_2021,
	title = {Laying the {Foundation} for {Smart} {Contract} {Development}: {An} {Integrated} {Engineering} {Process} {Model}},
	volume = {19},
	issn = {1617-9846},
	url = {https://doi.org/10.1007/s10257-020-00465-5},
	doi = {10.1007/s10257-020-00465-5},
	abstract = {Smart contracts are seen as the major building blocks for future autonomous blockchain- and Distributed Ledger Technology (DLT)-based applications. Engineering such contracts for trustless, append-only, and decentralized digital ledgers allows mutually distrustful parties to transform legal requirements into immutable and formalized rules. Previous experience shows this to be a challenging task due to demanding socio-technical ecosystems and the specificities of decentralized ledger technology. In this paper, we therefore develop an integrated process model for engineering DLT-based smart contracts that accounts for the specificities of DLT. This model was iteratively refined with the support of industry experts. The model explicitly accounts for the immutability of the trustless, append-only, and decentralized DLT ecosystem, and thereby overcomes certain limitations of traditional software engineering process models. More specifically, it consists of five successive and closely intertwined phases: conceptualization, implementation, approval, execution, and finalization. For each phase, the respective activities, roles, and artifacts are identified and discussed in detail. Applying such a model when engineering smart contracts will help software engineers and developers to better understand and streamline the engineering process of DLTs in general and blockchain in particular. Furthermore, this model serves as a generic framework which will support application development in all fields in which DLT can be applied.},
	number = {3},
	journal = {Inf. Syst. E-Bus. Manag.},
	author = {Sillaber, Christian and Waltl, Bernhard and Treiblmaier, Horst and Gallersdörfer, Ulrich and Felderer, Michael},
	month = sep,
	year = {2021},
	note = {Place: Berlin, Heidelberg
Publisher: Springer-Verlag},
	keywords = {Blockchain, Smart contract, Design science, Development process model, Distributed ledger technology, Software engineering, Survey, Trustless append-only decentralized digital ledgers (TADDL)},
	pages = {863--882},
}

@article{smaragdakis_symbolic_2021-1,
	title = {Symbolic {Value}-{Flow} {Static} {Analysis}: {Deep}, {Precise}, {Complete} {Modeling} of {Ethereum} {Smart} {Contracts}},
	volume = {5},
	url = {https://doi.org/10.1145/3485540},
	doi = {10.1145/3485540},
	abstract = {We present a static analysis approach that combines concrete values and symbolic expressions. This symbolic value-flow (“symvalic”) analysis models program behavior with high precision, e.g., full path sensitivity. To achieve deep modeling of program semantics, the analysis relies on a symbiotic relationship between a traditional static analysis fixpoint computation and a symbolic solver: the solver does not merely receive a complex “path condition” to solve, but is instead invoked repeatedly (often tens or hundreds of thousands of times), in close cooperation with the flow computation of the analysis. The result of the symvalic analysis architecture is a static modeling of program behavior that is much more complete than symbolic execution, much more precise than conventional static analysis, and domain-agnostic: no special-purpose definition of anti-patterns is necessary in order to compute violations of safety conditions with high precision. We apply the analysis to the domain of Ethereum smart contracts. This domain represents a fundamental challenge for program analysis approaches: despite numerous publications, research work has not been effective at uncovering vulnerabilities of high real-world value. In systematic comparison of symvalic analysis with past tools, we find significantly increased completeness (shown as 83-96\% statement coverage and more true error reports) combined with much higher precision, as measured by rate of true positive reports. In terms of real-world impact, since the beginning of 2021, the analysis has resulted in the discovery and disclosure of several critical vulnerabilities, over funds in the many millions of dollars. Six separate bug bounties totaling over \$350K have been awarded for these disclosures.},
	number = {OOPSLA},
	journal = {Proc. ACM Program. Lang.},
	author = {Smaragdakis, Yannis and Grech, Neville and Lagouvardos, Sifis and Triantafyllou, Konstantinos and Tsatiris, Ilias},
	month = oct,
	year = {2021},
	note = {Place: New York, NY, USA
Publisher: Association for Computing Machinery},
	keywords = {Blockchain, Ethereum, Smart Contracts, Program Analysis, Security},
}

@article{han_smart_2023,
	title = {A {Smart} {Contract} {Vulnerability} {Detection} {Model} {Based} on {Syntactic} and {Semantic} {Fusion} {Learning}},
	volume = {2023},
	issn = {1530-8669},
	url = {https://doi.org/10.1155/2023/9212269},
	doi = {10.1155/2023/9212269},
	abstract = {As a trusted decentralized application, smart contracts manage a large number of digital assets on the blockchain. Vulnerability detection of smart contracts is an important part of ensuring the security of digital assets. At present, many researchers extract features of smart contract source code for vulnerability detection based on deep learning methods. However, the current research mainly focuses on the single representation form of the source code, which cannot fully obtain the rich semantic and structural information contained in the source code, so it is not conducive to the detection of various and complex smart contract vulnerabilities. Aiming at this problem, this paper proposes a vulnerability detection model based on the fusion of syntax and semantic features. The syntactic and semantic representation of the source code is obtained from the abstract syntax tree and control flow graph of the smart contract through TextCNN and Graph Neural Network. The syntactic and semantic features are fused, and the fused features are used to detect vulnerabilities. Experiments show that the detection accuracy and recall rate of this model have been improved on the detection tasks of five types of vulnerabilities, with an average precision of 96\% and a recall rate of 90\%, which can effectively identify smart contract vulnerabilities.},
	journal = {Wirel. Commun. Mob. Comput.},
	author = {Han, Daojun and Li, Qiuyue and Zhang, Lei and Xu, Tao and Yi, Changyan},
	month = feb,
	year = {2023},
	note = {Place: GBR
Publisher: John Wiley and Sons Ltd.},
}

@article{xu_urban_2021,
	title = {Urban {Fruit} {Quality} {Traceability} {Model} {Based} on {Smart} {Contract} for {Internet} of {Things}},
	volume = {2021},
	issn = {1530-8669},
	url = {https://doi.org/10.1155/2021/9369074},
	doi = {10.1155/2021/9369074},
	abstract = {In Internet of things, compared with the traditional traceability system, the existing system has difficulties in operation, data are easily lost, data are uncoordinated, standards are not unified, and so on. In this paper, based on the characteristics of blockchain, the traceability model of urban fruits is established to reduce the risk of counterfeit and shoddy urban fruits. The collected data is integrated into the chain for diversified display, providing different permissions and platforms for multiple roles. Blockchain and supporting intelligent hardware are used to realize the real record and tracking of the whole process of fruit. Improve the transparency and efficiency of supply chain, and reduce the supply chain cost. The experimental results show that the proposed algorithm model can be applied to the fruit service field and effectively improve the service level of smart city.},
	journal = {Wirel. Commun. Mob. Comput.},
	author = {Xu, Cheng and Chen, Kai and Zuo, Min and Liu, Hongzhe and Wu, Yanan and Nagaraj, Balakrishnan},
	month = jan,
	year = {2021},
	note = {Place: GBR
Publisher: John Wiley and Sons Ltd.},
}

@article{wang_right_2022,
	title = {A {Right} {Transfer} {Access} {Control} {Model} of {Internet} of {Things} {Based} on {Smart} {Contract}},
	volume = {2022},
	issn = {1939-0114},
	url = {https://doi.org/10.1155/2022/3682952},
	doi = {10.1155/2022/3682952},
	abstract = {Sensor nodes play a crucial role in the promotion of development of Internet of Things (IoT). Through this transaction, RO defines access control policies in script form based on ABAC's access control model to grant access right. The identity of all users in the model is identified by address. This paper builds a more flexible right transfer access control model by means of combining the Attribute-Based Access Control model (ABAC) and blockchain technology. Owing to the characteristics of ABAC’s attributes and right association, the massive problems of some sensor nodes can be solved. At the same time, for the sake of addressing the dynamic problems such as node access and right transfer, right transfer contract (TS) and access control contract (CS) are employed on the chain to ensure efficient and safe transmission of rights. To solve on-chain storage problems and ensure transparency of the operation, the idea of Rollup in Ethereum expansion is used to upload the final state of protocol policy and right exchange to the chain. Any user can know the policy and current right transfer status at any time. Finally, comparative and security analysis show that the model presented here can solve IoT devices’ massive and dynamic problems more effectively and it is more secure than the traditional models.},
	journal = {Sec. and Commun. Netw.},
	author = {Wang, Jiuru and Gong, Ping and Wang, Haifeng and Zhang, Wenyin and Sun, Chongran and Zhao, Bin and Chen, Yuling},
	month = jan,
	year = {2022},
	note = {Place: USA
Publisher: John Wiley \&amp; Sons, Inc.},
}

@article{lin_isc-mti_2022,
	title = {{ISC}-{MTI}: {An} {IPFS} and {Smart} {Contract}-{Based} {Framework} for {Machine} {Learning} {Model} {Training} and {Invocation}},
	volume = {81},
	issn = {1380-7501},
	url = {https://doi.org/10.1007/s11042-022-13163-w},
	doi = {10.1007/s11042-022-13163-w},
	abstract = {Due to centralized storage, centralization problems are common in machine learning model training and invocation, which makes train data and trained models extremely vulnerable to tampering and stealing. A safe framework for training and invoking models called ISC-MTI (IPFS (InterPlanetary File System) and Smart Contract-Based Method for Storage and Invocation of Machine Learning Mobel) is proposed in this paper. The framework uses IPFS as the storage solution, EOS (Enterprise Operation System) blockchain as the smart contract platform, RSA and AES as the implementation of encrypted communication. The Action responsible for invoking the training data and trained models in the smart contract and the model training, uploading, and invoking methods are designed. The experimental results demonstrate that ISC-MTI can improve the safety of model training and invocation with losing a little efficiency. Simultaneously, ISC-MTI can provide anti-theft model capabilities, traceability, tamper resistance, reliability, and privacy for the process.},
	number = {28},
	journal = {Multimedia Tools Appl.},
	author = {Lin, Hao and Li, Xiaolei and Gao, Haoyu and Li, Jie and Wang, Yongsheng},
	month = nov,
	year = {2022},
	note = {Place: USA
Publisher: Kluwer Academic Publishers},
	keywords = {Smart contract, EOS, InterPlanetary file system, Machine learning security, Model invocation, Model training},
	pages = {40343--40359},
}

@inproceedings{frank_ethbmc_2020,
	address = {USA},
	series = {{SEC}'20},
	title = {{ETHBMC}: {A} {Bounded} {Model} {Checker} for {Smart} {Contracts}},
	isbn = {978-1-939133-17-5},
	abstract = {The introduction of smart contracts has significantly advanced the state-of-the-art in cryptocurrencies. Smart contracts are programs who live on the blockchain, governing the flow of money. However, the promise of monetary gain has attracted miscreants, resulting in spectacular hacks which resulted in the loss of millions worth of currency. In response, several powerful static analysis tools were developed to address these problems. We surveyed eight recently proposed static analyzers for Ethereum smart contracts and found that none of them captures all relevant features of the Ethereum ecosystem. For example, we discovered that a precise memory model is missing and inter-contract analysis is only partially supported.Based on these insights, we present the design and implementation of ETHBMC, a bounded model checker based on symbolic execution which provides a precise model of the Ethereum network. We demonstrate its capabilities in a series of experiments. First, we compare against the eight aforementioned tools, showing that even relatively simple toy examples can obstruct other analyzers. Further proving that precise modeling is indispensable, we leverage ETHBMC capabilities for automatic vulnerability scanning. We perform a large-scale analysis of roughly 2.2 million accounts currently active on the blockchain and automatically generate 5,905 valid inputs which trigger a vulnerability. From these, 1,989 can destroy a contract at will (so called suicidal contracts) and the rest can be used by an adversary to arbitrarily extract money. Finally, we compare our large-scale analysis against two previous analysis runs, finding significantly more inputs (22.8\%) than previous approaches.},
	booktitle = {Proceedings of the 29th {USENIX} {Conference} on {Security} {Symposium}},
	publisher = {USENIX Association},
	author = {Frank, Joel and Aschermann, Cornelius and Holz, Thorsten},
	year = {2020},
}

@inproceedings{song_esbmc-solidity_2022-1,
	address = {New York, NY, USA},
	series = {{ICSE} '22},
	title = {{ESBMC}-{Solidity}: {An} {SMT}-{Based} {Model} {Checker} for {Solidity} {Smart} {Contracts}},
	isbn = {978-1-4503-9223-5},
	url = {https://doi.org/10.1145/3510454.3516855},
	doi = {10.1145/3510454.3516855},
	abstract = {Smart contracts written in Solidity are programs used in blockchain networks, such as Etherium, for performing transactions. However, as with any piece of software, they are prone to errors and may present vulnerabilities, which malicious attackers could then use. This paper proposes a solidity frontend for the efficient SMT-based context-bounded model checker (ESBMC), named ESBMC-Solidity, which provides a way of verifying such contracts with its framework. A benchmark suite with vulnerable smart contracts was also developed for evaluation and comparison with other verification tools. The experiments performed here showed that ESBMC-Solidity detected all vulnerabilities, was the fastest tool and provided a counterexample for each benchmark. A demonstration is available at https://youtu.be/3UH8\_1QAVN0.},
	booktitle = {Proceedings of the {ACM}/{IEEE} 44th {International} {Conference} on {Software} {Engineering}: {Companion} {Proceedings}},
	publisher = {Association for Computing Machinery},
	author = {Song, Kunjian and Matulevicius, Nedas and de Lima Filho, Eddie B. and Cordeiro, Lucas C.},
	year = {2022},
	note = {event-place: Pittsburgh, Pennsylvania},
	keywords = {solidity, formal verification},
	pages = {65--69},
}

@inproceedings{hamdaqa_icontractml_2020-1,
	address = {New York, NY, USA},
	series = {{SAM} '20},
	title = {{IContractML}: {A} {Domain}-{Specific} {Language} for {Modeling} and {Deploying} {Smart} {Contracts} onto {Multiple} {Blockchain} {Platforms}},
	isbn = {978-1-4503-8140-6},
	url = {https://doi.org/10.1145/3419804.3421454},
	doi = {10.1145/3419804.3421454},
	abstract = {Smart contracts are immutable digital programs deployed onto blockchain platforms to codify agreements. They enable blockchain technology to play a vital role in many fields, such as finance, health care, and energy. An important aspect of modeling and deploying smart contracts is to define the business process and rules that govern the agreements under which the corresponding actions are executed. Unfortunately, these models use a mix of technical and business-centric terminologies that are different based on the underlying blockchain platform that the smart contract is targeting. To address this issue, in this paper, we followed a feature-oriented domain analysis approach to identify the commonalities and variations between three of the common blockchain platforms that are used to deploy smart contracts; namely IBM Hyperledger Composer, Azure Blockchain Workbench, and Ethereum. Accordingly, we propose a reference model for smart contracts. The reference model is then realized as a modeling framework that enables developers to model and generate the structural code required to deploy a smart contract onto multiple blockchain platforms. The coverage of the proposed reference model was shown through mapping the concepts of the reference models to its corresponding constructs within each blockchain platform. Moreover, we provide three use cases to show how the proposed framework can empower developers to generate the structural code of smart contracts for the target platform through model transformation.},
	booktitle = {Proceedings of the 12th {System} {Analysis} and {Modelling} {Conference}},
	publisher = {Association for Computing Machinery},
	author = {Hamdaqa, Mohammad and Metz, Lucas Alberto Pineda and Qasse, Ilham},
	year = {2020},
	note = {event-place: Virtual Event, Canada},
	keywords = {Blockchain, Ethereum, Smart Contracts, Azure Blockchain, Domain Specific Language, Hyperledger Composer, Model-Driven Engineering},
	pages = {34--43},
}

@article{hamdaqa_icontractml_2022,
	title = {{IContractML} 2.0: {A} {Domain}-{Specific} {Language} for {Modeling} and {Deploying} {Smart} {Contracts} onto {Multiple} {Blockchain} {Platforms}},
	volume = {144},
	issn = {0950-5849},
	url = {https://doi.org/10.1016/j.infsof.2021.106762},
	doi = {10.1016/j.infsof.2021.106762},
	number = {C},
	journal = {Inf. Softw. Technol.},
	author = {Hamdaqa, Mohammad and Met, Lucas Alberto Pineda and Qasse, Ilham},
	month = apr,
	year = {2022},
	note = {Place: USA
Publisher: Butterworth-Heinemann},
	keywords = {Blockchain, Ethereum, Smart contracts, Azure, DAML, Hyperledger fabric, Model-driven engineering},
}

@article{riesco_cybersecurity_2020,
	title = {Cybersecurity {Threat} {Intelligence} {Knowledge} {Exchange} {Based} on {Blockchain}: {Proposal} of a {New} {Incentive} {Model} {Based} on {Blockchain} and {Smart} {Contracts} to {Foster} the {Cyber} {Threat} and {Risk} {Intelligence} {Exchange} of {Information}},
	volume = {73},
	issn = {1018-4864},
	url = {https://doi.org/10.1007/s11235-019-00613-4},
	doi = {10.1007/s11235-019-00613-4},
	abstract = {Although cyber threat intelligence (CTI) exchange is a theoretically useful technique for improving security of a society, the potential participants are often reluctant to share their CTI and prefer to consume only, at least in voluntary based approaches. Such behavior destroys the idea of information exchange. On the other hand, governments are forcing specific entities and operators to report them specific incidents depending on their impact, otherwise there could be sanctions to those operators which are not reporting them on time. Obligations and sanctions are usually discouraging participants to share information voluntarily which will just share and report what is strictly required. We propose a paradigm shift of cybersecurity information exchange by introducing a new way to encourage all participants involved, at all levels, to share relevant information dynamically. It will also contribute to the support and deployment of Dynamic Risk Management frameworks to keep risks under an acceptance level along the time. Participants will have new and specific incentives to share, invest and consume threat intelligence and risk intelligence information depending on their different roles (producers, consumers, investors, donors and owner). Our proposal leverages from standards like Structured Threat Information Exchange, as well as W3C semantic web standards to enable a workspace of knowledge related to behavioral threat intelligence patterning to characterize tactics, techniques and procedures. At the same time, we propose an Ethereum Blockchain Smart contract Marketplace to better incentivize the sharing of that knowledge between all parties involved as well as creating a standard CTI token as a digital asset with a promising value in the market. Simulations and an experimentation were performed to demonstrate its benefits and incentives, but also its potential limits with regard to storage and cost of transactions.},
	number = {2},
	journal = {Telecommun. Syst.},
	author = {Riesco, R. and Larriva-Novo, X. and Villagra, V. A.},
	month = feb,
	year = {2020},
	note = {Place: USA
Publisher: Kluwer Academic Publishers},
	keywords = {Cyber threat intelligence (CTI), Dynamic Risk Management (DRM), Ethereum Blockchain Smart contract, OWL, STIX™, SWRL},
	pages = {259--288},
}
