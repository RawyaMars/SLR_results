
@inproceedings{coblenz_smarter_2019,
	series = {{WETSEB} '19},
	title = {Smarter {Smart} {Contract} {Development} {Tools}},
	url = {https://doi.org/10.1109/WETSEB.2019.00013},
	doi = {10.1109/WETSEB.2019.00013},
	abstract = {Much recent work focuses on finding bugs and security vulnerabilities in smart contracts written in existing languages. Although this approach may be helpful, it does not address flaws in the underlying programming language, which can facilitate writing buggy code in the first place. We advocate a re-thinking of the blockchain software engineering tool set, starting with the programming language in which smart contracts are written. In this paper, we propose and justify requirements for a new generation of blockchain software development tools. New tools should (1) consider users' needs as a primary concern; (2) seek to facilitate safe development by detecting relevant classes of serious bugs at compile time; (3) as much as possible, be blockchain-agnostic, given the wide variety of different blockchain platforms available, and leverage the properties that are common among blockchain environments to improve safety and developer effectiveness.},
	booktitle = {Proceedings of the 2nd {International} {Workshop} on {Emerging} {Trends} in {Software} {Engineering} for {Blockchain}},
	publisher = {IEEE Press},
	author = {Coblenz, Michael and Sunshine, Joshua and Aldrich, Jonathan and Myers, Brad A.},
	year = {2019},
	note = {event-place: Montreal, Quebec, Canada},
	keywords = {blockchain, smart contracts, usability of programming languages},
	pages = {48--51},
}

@inproceedings{ren_making_2021,
	address = {New York, NY, USA},
	series = {{ESEC}/{FSE} 2021},
	title = {Making {Smart} {Contract} {Development} {More} {Secure} and {Easier}},
	isbn = {978-1-4503-8562-6},
	url = {https://doi.org/10.1145/3468264.3473929},
	doi = {10.1145/3468264.3473929},
	abstract = {With the rapid development of distributed applications, smart contracts have attracted more and more developers' attentions. However, developers or domain experts have different levels of familiarity with specific programming languages, like Solidity, and those vulnerabilities hidden in the code would be exploited and result in huge property losses. Existing auxiliary tools lack security considerations. Most of them only provide word completion based on fuzzy search and detection services for limited types of vulnerabilities, which results in the manpower waste during coding and potential vulnerability threats after deployment. In this work, we propose an integrated framework to enhance security in the two stages of recommendation and validation, assisting developers to implement more secure contracts more quickly. First, we reinforce original smart contracts with general patch patterns and secure programming standards for training, and design a real-time code suggestion algorithm to predict secure words for selection. Then, we integrate multiple widely-used testing tools to provide validation services. For evaluation, we collected 47,398 real-world contracts, and the result shows that it outperforms existing platforms and tools, improving the average word suggestion accuracy by 30\%-60\% and helping detect about 25\%-61\% more vulnerabilities. In most cases, our framework can correctly predict next words with the probability up to 82\%-97\% within top ten candidates. Compared with professional vulnerability mining tools, it can find more vulnerabilities and provide targeted modification suggestions without frivolous configurations. Currently, this framework has been used as the official development tool of WeBank and integrated as the recommended platform by FISCO-BCOS community.},
	booktitle = {Proceedings of the 29th {ACM} {Joint} {Meeting} on {European} {Software} {Engineering} {Conference} and {Symposium} on the {Foundations} of {Software} {Engineering}},
	publisher = {Association for Computing Machinery},
	author = {Ren, Meng and Ma, Fuchen and Yin, Zijing and Fu, Ying and Li, Huizhong and Chang, Wanli and Jiang, Yu},
	year = {2021},
	note = {event-place: Athens, Greece},
	keywords = {Domain-specific Reinforcement, Integrated Testing, Smart Contract Development},
	pages = {1360--1370},
}

@phdthesis{dias_evaluation_2020,
	type = {{PhD} {Thesis}},
	title = {Evaluation of a {Secure} {Smart} {Contract} {Development} in {Ethereum}},
	abstract = {In the Ethereum Blockchain, Smart Contracts are the standard programs that can perform operations in the network using the platform currency (ether) and data. Once these contracts are deployed, the user cannot change their state in the system. This immutability means that, if the contract has any vulnerabilities, it cannot be erased or modified. Ensuring that a contract is safe in the network requires the knowledge of developers to avoid these problems. Many tools explore and analyse the contract security and behaviour and, as a result, detect the vulnerabilities present.This thesis aims to analyse and integrate different security analysis tools in the smart contract development process allowing for better knowledge and awareness of best practices and tools to test and verify contracts, providing a safer smart contract to deploy.The development of the final solution that allows the integration of security analysis tools in smart contracts was performed in two stages. In the first stage, approaches, patterns and tools to develop smart contracts were studied and compared, by running them on a standard set of vulnerable contracts, to understand how effective they are in detecting vulnerabilities. Seven existing tools were found that can support the detection of vulnerabilities during the development process.In the second stage, it is introduced a framework called EthSential. EthSential was designed and implemented to initially integrate the security analysis tools, Mythril, Securify and Slither, with two ways to use, command line and Visual Studio Code. EthSential is published and publicly available through PyPI and Visual Studio Code extensions.To evaluate the solution, two software testing methods and a usability and satisfaction questionnaire were performed. The results were positive in terms of software testing. However, in terms of usability and satisfaction of the developers, the overall results did not meet expectations, concluding that improvements should be made in the future to increase the developers' satisfaction and usability.},
	school = {Instituto Politecnico do Porto (Portugal)},
	author = {Dias, Daniel da Rocha Maia},
	year = {2020},
	note = {ISBN: 9798209817864},
	annote = {AAI28992485},
}

@inproceedings{weiss_annotary_2019,
	address = {Berlin, Heidelberg},
	title = {Annotary: {A} {Concolic} {Execution} {System} for {Developing} {Secure} {Smart} {Contracts}},
	isbn = {978-3-030-29958-3},
	url = {https://doi.org/10.1007/978-3-030-29959-0_36},
	doi = {10.1007/978-3-030-29959-0_36},
	abstract = {Ethereum smart contracts are executable programs, deployed on a peer-to-peer network and executed in a consensus-based fashion. Their bytecode is public, immutable and once deployed to the blockchain, cannot be patched anymore. As smart contracts may hold Ether worth of several million dollars, they are attractive targets for attackers and indeed some contracts have successfully been exploited in the recent past, resulting in tremendous financial losses. The correctness of smart contracts is thus of utmost importance. While first approaches on formal verification exist, they demand users to be well-versed in formal methods which are alien to many developers and are only able to analyze individual contracts, without considering their execution environment, i.e., calls to external contracts, sequences of transaction, and values from the actual blockchain storage. In this paper, we present Annotary, a concolic execution framework to analyze smart contracts for vulnerabilities, supported by annotations which developers write directly in the Solidity source code. In contrast to existing work, Annotary supports analysis of inter-transactional, inter-contract control flows and combines symbolic execution of EVM bytecode with a resolution of concrete values from the public Ethereum blockchain. While the analysis of Annotary tends to weight precision higher than soundness, we analyze inter-transactional call chains to eliminate false positives from unreachable states that traditional symbolic execution would not be able to handle. We present the annotation and analysis concepts of Annotary, explain its implementation on top of the Laser symbolic virtual machine, and demonstrate its usage as a plugin for the Sublime Text editor.},
	booktitle = {Computer {Security} – {ESORICS} 2019: 24th {European} {Symposium} on {Research} in {Computer} {Security}, {Luxembourg}, {September} 23–27, 2019, {Proceedings}, {Part} {I}},
	publisher = {Springer-Verlag},
	author = {Weiss, Konrad and Schütte, Julian},
	year = {2019},
	note = {event-place: Luxembourg, Luxembourg},
	keywords = {Ethereum, Smart contracts, EVM, Concolic execution, Program analysis},
	pages = {747--766},
}

@inproceedings{richard_smart_2021,
	address = {New York, NY, USA},
	series = {{ICBTA} 2020},
	title = {Smart {Contract} {Development} {Model} and the {Future} of {Blockchain} {Technology}},
	isbn = {978-1-4503-8896-2},
	url = {https://doi.org/10.1145/3446983.3446994},
	doi = {10.1145/3446983.3446994},
	abstract = {Blockchain has become a mainstream technology in our society in recent years. With its nature of secure decentralization, people can create decentralized applications by developing smart contracts on top of a blockchain platform. With blockchain, technology is still in the developing phase, the smart contract development process in blockchain has its unique complexity and uncertainty. The condition will drive the challenge for any developers to work on this issue. In this research, we determine the smart contract development model in creating decentralized applications. Our proposed model aligned with our findings in the systematic mapping process of this study.},
	booktitle = {2020 the 3rd {International} {Conference} on {Blockchain} {Technology} and {Applications}},
	publisher = {Association for Computing Machinery},
	author = {Richard, Richard and Prabowo, Harjanto and Trisetyarso, Agung and Soewito, Benfano},
	year = {2021},
	note = {event-place: Xi'an, China},
	keywords = {Blockchain, Smart Contract, Smart Contract Development, Decentralized Applications, Systematic Mapping},
	pages = {34--39},
}

@inproceedings{ren_scstudio_2021,
	address = {New York, NY, USA},
	series = {{ISSTA} 2021},
	title = {{SCStudio}: {A} {Secure} and {Efficient} {Integrated} {Development} {Environment} for {Smart} {Contracts}},
	isbn = {978-1-4503-8459-9},
	url = {https://doi.org/10.1145/3460319.3469078},
	doi = {10.1145/3460319.3469078},
	abstract = {With the increasing popularity of block-chain technologies, more and more engineers use smart contracts for application implementation. Traditional supporting tools can either provide code completions based on static libraries or detect a limited set of vulnerabilities, which results in the manpower waste during coding and miss-detection of bugs. In this work, we propose SCStudio, a unified smart contract development platform, which aims to help developers implement more secure smart contracts easily. The core idea is to realize real-time security-reinforced recommendation through pattern-based learning; and to perform security-oriented validation via integrated testing. SCStudio was implemented as a plug-in of VS Code. It has been used as the official development tool of WeBank and integrated as the recommended development tool by FISCO-BCOS community. In practice, it outperforms existing contract development environments, such as Remix, improving the average word suggestion accuracy by 30\%-60\% and helping detect about 25\% more vulnerabilities. The video is presented at https://youtu.be/l6hW3Ds5Tkg.},
	booktitle = {Proceedings of the 30th {ACM} {SIGSOFT} {International} {Symposium} on {Software} {Testing} and {Analysis}},
	publisher = {Association for Computing Machinery},
	author = {Ren, Meng and Ma, Fuchen and Yin, Zijing and Li, Huizhong and Fu, Ying and Chen, Ting and Jiang, Yu},
	year = {2021},
	note = {event-place: Virtual, Denmark},
	keywords = {Smart Contract, Security-Reinforced Code Suggestion, Validation},
	pages = {666--669},
}

@inproceedings{benahmed_comparative_2019,
	title = {A {Comparative} {Analysis} of {Distributed} {Ledger} {Technologies} for {Smart} {Contract} {Development}},
	url = {https://doi.org/10.1109/PIMRC.2019.8904256},
	doi = {10.1109/PIMRC.2019.8904256},
	abstract = {Development of Distributed Ledger Technology (DLT)-based applications requires an appropriate platform that meets the application requirements. However, due to the abundance of such platforms such as Ethereum, NEM, IOTA, and OpenChain, and the differences among them in terms of scalability, throughput, and features, it is not easy to select a platform for a given use-case. Selection of the right DLT platform is pivotal for the performance of applications and thus-forth directly affects consumer satisfaction. Therefore, the aforementioned factors must be taken into account to decide on a particular platform. To fill this gap, in this paper, we conduct a comparative analysis of different DLT platforms. The choice of platform is based on their popularity and current market share as well as the evolving trends and approaches. In essence, we choose Ethereum, EOS, Hyperledger Sawtooth and NEO. We compare these platforms from both development and performance perspectives. The comparison revealed that Sawtooth provides a huge customization capability that affects the performance and EOS maintains a stable throughput under varying network scales and loads.},
	booktitle = {2019 {IEEE} 30th {Annual} {International} {Symposium} on {Personal}, {Indoor} and {Mobile} {Radio} {Communications} ({PIMRC})},
	publisher = {IEEE Press},
	author = {Benahmed, Sofiane and Pidikseev, Ivan and Hussain, Rasheed and Lee, JooYoung and Kazmi, S.M. Ahsan and Oracevic, Alma and Hussain, Fatima},
	year = {2019},
	note = {event-place: Istanbul, Turkey},
	pages = {1--6},
}

@article{sillaber_laying_2021,
	title = {Laying the {Foundation} for {Smart} {Contract} {Development}: {An} {Integrated} {Engineering} {Process} {Model}},
	volume = {19},
	issn = {1617-9846},
	url = {https://doi.org/10.1007/s10257-020-00465-5},
	doi = {10.1007/s10257-020-00465-5},
	abstract = {Smart contracts are seen as the major building blocks for future autonomous blockchain- and Distributed Ledger Technology (DLT)-based applications. Engineering such contracts for trustless, append-only, and decentralized digital ledgers allows mutually distrustful parties to transform legal requirements into immutable and formalized rules. Previous experience shows this to be a challenging task due to demanding socio-technical ecosystems and the specificities of decentralized ledger technology. In this paper, we therefore develop an integrated process model for engineering DLT-based smart contracts that accounts for the specificities of DLT. This model was iteratively refined with the support of industry experts. The model explicitly accounts for the immutability of the trustless, append-only, and decentralized DLT ecosystem, and thereby overcomes certain limitations of traditional software engineering process models. More specifically, it consists of five successive and closely intertwined phases: conceptualization, implementation, approval, execution, and finalization. For each phase, the respective activities, roles, and artifacts are identified and discussed in detail. Applying such a model when engineering smart contracts will help software engineers and developers to better understand and streamline the engineering process of DLTs in general and blockchain in particular. Furthermore, this model serves as a generic framework which will support application development in all fields in which DLT can be applied.},
	number = {3},
	journal = {Inf. Syst. E-Bus. Manag.},
	author = {Sillaber, Christian and Waltl, Bernhard and Treiblmaier, Horst and Gallersdörfer, Ulrich and Felderer, Michael},
	month = sep,
	year = {2021},
	note = {Place: Berlin, Heidelberg
Publisher: Springer-Verlag},
	keywords = {Blockchain, Smart contract, Design science, Development process model, Distributed ledger technology, Software engineering, Survey, Trustless append-only decentralized digital ledgers (TADDL)},
	pages = {863--882},
}

@article{kshetri_blockchain-based_2021,
	title = {Blockchain-{Based} {Smart} {Contracts} to {Provide} {Crop} {Insurance} for {Smallholder} {Farmers} in {Developing} {Countries}},
	volume = {23},
	issn = {1520-9202},
	url = {https://doi.org/10.1109/MITP.2021.3123416},
	doi = {10.1109/MITP.2021.3123416},
	abstract = {Agricultural insurance can help smallholder farmers in developing countries deal with risks that are too large for them to manage on their own. Thus, significant welfare gains can be achieved by increasing smallholder farmers’ access to such insurance. Estimates also suggest that by removing farming risks through crop insurance, it is possible to increase smallholder farmers’ investments and income by 20\%–30\%.1},
	number = {6},
	journal = {IT Professional},
	author = {Kshetri, Nir and Kshetri, Nir},
	month = nov,
	year = {2021},
	note = {Place: USA
Publisher: IEEE Educational Activities Department},
	pages = {58--61},
}

@article{das_design_2022,
	title = {Design and {Development} of an {Intelligent} {Transportation} {Management} {System} {Using} {Blockchain} and {Smart} {Contracts}},
	volume = {25},
	issn = {1386-7857},
	url = {https://doi.org/10.1007/s10586-022-03536-z},
	doi = {10.1007/s10586-022-03536-z},
	abstract = {The automated toll-tax collection system (ATCS) is advantageous to facilitate traffic management at the toll plaza and to save fuel for vehicles. The most advanced application of the electronic toll collection (ETC) system is to collect the toll-tax amount (TA) at toll plazas of the national highways. The few existing TA collection systems suffer from data security, transparency, privacy, and data immutability as these are centralized systems. As the Blockchain is a decentralized, transparent, secure, and low-cost technology. However, this paper presents an intelligent transportation management system (I-TMS) using Blockchain. The proposed I-TMS shows the way of implementation of blockchain technology for vehicle data management in various applications of I-TMS. Herein, a framework of blockchain-enabled ATCS (BATCS) is provided as a blockchain-based I-TMS application to collect TAs without stopping vehicles while they pass the toll plaza. Smart contracts are used to authenticate vehicles’ data and to collect TAs automatically. An efficient algorithm is presented for data verification and TA collection in this paper. This research work provides a secure, transparent, and privacy-preserving framework in the field of the ETC system. The significant contributions of the BATCS compared with the RFID-based system are less fuel consumption and time-saving for a vehicle. The proposed framework can enhance data security and user privacy in the intelligent decentralized ETC system.},
	number = {3},
	journal = {Cluster Computing},
	author = {Das, Debashis and Banerjee, Sourav and Chatterjee, Puspita and Biswas, Manju and Biswas, Utpal and Alnumay, Waleed},
	month = jun,
	year = {2022},
	note = {Place: USA
Publisher: Kluwer Academic Publishers},
	keywords = {Blockchain, Smart contract, Blockchain-enabled ETC system, Decentralized electronic toll collection, Intelligent transportation management system},
	pages = {1899--1913},
}

@inproceedings{ayman_smart_2020,
	address = {Berlin, Heidelberg},
	title = {Smart {Contract} {Development} from the {Perspective} of {Developers}: {Topics} and {Issues} {Discussed} on {Social} {Media}},
	isbn = {978-3-030-54454-6},
	url = {https://doi.org/10.1007/978-3-030-54455-3_29},
	doi = {10.1007/978-3-030-54455-3_29},
	abstract = {Blockchain-based platforms are emerging as a transformative technology that can provide reliability, integrity, and auditability without trusted entities. One of the key features of these platforms is the trustworthy decentralized execution of general-purpose computation in the form of smart contracts, which are envisioned to have a wide range of applications. As a result, a rapidly growing and active community of smart-contract developers has emerged in recent years. A number of research efforts have investigated the technological challenges that these developers face, introducing a variety of tools, languages, and frameworks for smart-contract development, focusing on security. However, relatively little is known about the community itself, about the developers, and about the issues that they face and discuss. To address this gap, we study smart-contract developers and their discussions on two social media sites, Stack Exchange and Medium. We provide insight into the trends and key topics of these discussions, into the developers’ interest in various security issues and security tools, and into the developers’ technological background.},
	booktitle = {Financial {Cryptography} and {Data} {Security}: {FC} 2020 {International} {Workshops}, {AsiaUSEC}, {CoDeFi}, {VOTING}, and {WTSC}, {Kota} {Kinabalu}, {Malaysia}, {February} 14, 2020, {Revised} {Selected} {Papers}},
	publisher = {Springer-Verlag},
	author = {Ayman, Afiya and Roy, Shanto and Alipour, Amin and Laszka, Aron},
	year = {2020},
	note = {event-place: Kota Kinabalu, Malaysia},
	pages = {405--422},
}

@article{chen_maintenance-related_2021,
	title = {Maintenance-{Related} {Concerns} for {Post}-{Deployed} {Ethereum} {Smart} {Contract} {Development}: {Issues}, {Techniques}, and {Future} {Challenges}},
	volume = {26},
	issn = {1382-3256},
	url = {https://doi.org/10.1007/s10664-021-10018-0},
	doi = {10.1007/s10664-021-10018-0},
	abstract = {Software development is a very broad activity that captures the entire life cycle of a software, which includes designing, programming, maintenance and so on. In this study, we focus on the maintenance-related concerns of the post-deployment of smart contracts. Smart contracts are self-executed programs that run on a blockchain. They cannot be modified once deployed and hence they bring unique maintenance challenges compared to conventional software. According to the definition of ISO/IEC 14764, there are four kinds of software maintenance, i.e., corrective, adaptive, perfective, and preventive maintenance. This study aims to answer (i) What kinds of issues will smart contract developers encounter for corrective, adaptive, perfective, and preventive maintenance after they are deployed to the Ethereum? (ii) What are the current maintenance-related methods used for smart contracts? To obtain the answers to these research questions, we first conducted a systematic literature review to analyze 131 smart contract related research papers published from 2014 to 2020. Since the Ethereum ecosystem is fast-growing, some results from previous publications might be out-of-date and there may be a gap between academia and industry. To address this, we performed an online survey of smart contract developers on Github to validate our findings and received 165 useful responses. Based on the survey feedback and literature review, we present the first empirical study on smart contract maintenance-related concerns. Our study can help smart contract developers better maintain their smart contract-based projects, and we highlight some key future research directions to improve the Ethereum ecosystem.},
	number = {6},
	journal = {Empirical Softw. Engg.},
	author = {Chen, Jiachi and Xia, Xin and Lo, David and Grundy, John and Yang, Xiaohu},
	month = nov,
	year = {2021},
	note = {Place: USA
Publisher: Kluwer Academic Publishers},
	keywords = {Ethereum, Empirical study, Smart contracts, Literature review, Smart contracts maintenance},
}

@phdthesis{bahojb_imani_design_2020,
	type = {{PhD} {Thesis}},
	title = {Design and {Development} of {Scalable} {Analytics} {Frameworks} with {Applications} in {Blockchain} {Smart} {Contract} {Security} and {Political} {News} {Mining}},
	abstract = {Nowadays, high amounts of data are continuously generated at unprecedented rate from various domains such as e-commerce, education, health, security, and social networks. This is due to many technological advancements, including Internet of Things (IoT), autonomous driving, the proliferation of Cloud Computing, data center consolidation as well as the growth of smart devices. The term big data was created to demonstrate the meaning of this emerging trend. The high volumes, velocities, and varieties of data pose a great challenge for the data mining community to extract useful knowledge. In response to this, we need scalable analytics frameworks for data acquisition, filtering, and analyzing in a quick time. Current state-of-the-arts like advanced analytics, Machine Learning (ML), Natural Language Processing (NLP) can be utilized to handle heterogeneous Big Data. Yet, most of these systems suffer scalability issues. In this dissertation, we focus on social science and blockchain areas. More specifically, we focus on location extraction from unstructured political text data, vulnerability detection in Blockchain's smart contracts and fault diagnosis in wind turbine vibration data. With regard to focus location extraction, although various tools exist to identify geolocation, they fail to identify at a granular level; they mostly rely on external knowledge, and they do not support most languages. We propose a novel scalable framework PROFILE to extract the primary focus location from political news articles in different languages. With regard to blockchain, existing solutions to this problem particularly rely on human experts to define features or different rules to detect vulnerabilities, which often lead to missing many vulnerabilities and they are inefficient in detecting new vulnerabilities. We develop a novel scalable framework to detect vulnerabilities in smart contracts. With regard to fault diagnosis in wind turbines, real-time fault diagnosis for streaming vibration data from turbine gearboxes is still an outstanding challenge. Moreover, monitoring gearboxes in a wind farm with thousands of wind turbines requires massive computational power. We address these challenges by developing SAIL, a scalable real-time framework, to capture wind turbine vibration data using a novel feature extraction and predict faults in gearbox. We show empirically that the proposed techniques outperform state-of-the-art techniques in all three areas.},
	school = {The University of Texas at Dallas},
	author = {Bahojb Imani, Maryam},
	year = {2020},
	note = {ISBN: 9798678172884},
	annote = {AAI28216098},
}

@inproceedings{krol_chainsoft_2018,
	address = {New York, NY, USA},
	series = {{CryBlock}'18},
	title = {{ChainSoft}: {Collaborative} {Software} {Development} {Using} {Smart} {Contracts}},
	isbn = {978-1-4503-5838-5},
	url = {https://doi.org/10.1145/3211933.3211934},
	doi = {10.1145/3211933.3211934},
	abstract = {In recent years, more and more companies require dedicated software to increase the efficiency of their business. However, with rapidly changing technologies it is often inefficient to maintain a dedicated team of developers. On the other hand, outsourcing software development requires considerable effort and trust between involved parties to ensure the quality of the code and adequate payment.We present ChainSoft - a platform for outsourcing software development and automatic payments between parties that distrust each other, by means of blockchain technology. ChainSoft allows any developer to create software and submit software, includes automatic code verification and enforce users' proper behavior. We implement our system using Ethereum Smart Contracts and Github/Travis CI and present first evaluation proving its security and low usage cost.},
	booktitle = {Proceedings of the 1st {Workshop} on {Cryptocurrencies} and {Blockchains} for {Distributed} {Systems}},
	publisher = {Association for Computing Machinery},
	author = {Król, Micha{\textbackslash}l and Reñé, Sergi and Ascigil, Onur and Psaras, Ioannis},
	year = {2018},
	note = {event-place: Munich, Germany},
	keywords = {blockchain, smart contracts, github, software development},
	pages = {1--6},
}

@article{zarir_developing_2021,
	title = {Developing {Cost}-{Effective} {Blockchain}-{Powered} {Applications}: {A} {Case} {Study} of the {Gas} {Usage} of {Smart} {Contract} {Transactions} in the {Ethereum} {Blockchain} {Platform}},
	volume = {30},
	issn = {1049-331X},
	url = {https://doi.org/10.1145/3431726},
	doi = {10.1145/3431726},
	abstract = {Ethereum is a blockchain platform that hosts and executes smart contracts. Executing a function of a smart contract burns a certain amount of gas units (a.k.a., gas usage). The total gas usage depends on how much computing power is necessary to carry out the execution of the function. Ethereum follows a free-market policy for deciding the transaction fee for executing a transaction. More specifically, transaction issuers choose how much they are willing to pay for each unit of gas (a.k.a., gas price). The final transaction fee corresponds to the gas price times the gas usage. Miners process transactions to gain mining rewards, which come directly from these transaction fees. The flexibility and the inherent complexity of the gas system pose challenges to the development of blockchain-powered applications. Developers of blockchain-powered applications need to translate requests received in the frontend of their application into one or more smart contract transactions. Yet, it is unclear how developers should set the gas parameters of these transactions given that (i) miners are free to prioritize transactions whichever way they wish and (ii) the gas usage of a contract transaction is only known after the transaction is processed and included in a new block. In this article, we analyze the gas usage of Ethereum transactions that were processed between Oct. 2017 and Feb. 2019 (the Byzantium era). We discover that (i) most miners prioritize transactions based on their gas price only, (ii) 25\% of the functions that received at least 10 transactions have an unstable gas usage (coefficient of variation = 19\%), and (iii) a simple prediction model that operates on the recent gas usage of a function achieves an R-Squared of 0.76 and a median absolute percentage error of 3.3\%. We conclude that (i) blockchain-powered application developers should be aware that transaction prioritization in Ethereum is frequently done based solely on the gas price of transactions (e.g., a higher transaction fee does not necessarily imply a higher transaction priority) and act accordingly and (ii) blockchain-powered application developers can leverage gas usage prediction models similar to ours to make more informed decisions to set the gas price of their transactions. Lastly, based on our findings, we list and discuss promising avenues for future research.},
	number = {3},
	journal = {ACM Trans. Softw. Eng. Methodol.},
	author = {Zarir, Abdullah A. and Oliva, Gustavo A. and Jiang, Zhen M. (Jack) and Hassan, Ahmed E.},
	month = mar,
	year = {2021},
	note = {Place: New York, NY, USA
Publisher: Association for Computing Machinery},
	keywords = {Ethereum, blockchain, smart contracts, Gas usage},
}

@article{rosa-bilbao_edaloco_2023,
	title = {{EDALoCo}: {Enhancing} the {Accessibility} of {Blockchains} through a {Low}-{Code} {Approach} to the {Development} of {Event}-{Driven} {Applications} for {Smart} {Contract} {Management}},
	volume = {84},
	issn = {0920-5489},
	url = {https://doi.org/10.1016/j.csi.2022.103676},
	doi = {10.1016/j.csi.2022.103676},
	number = {C},
	journal = {Comput. Stand. Interfaces},
	author = {Rosa-Bilbao, Jesús and Boubeta-Puig, Juan and Rutle, Adrian},
	month = feb,
	year = {2023},
	note = {Place: NLD
Publisher: Elsevier Science Publishers B. V.},
	keywords = {Blockchain, Smart contract, Event-driven application, Low-code},
}

@inproceedings{bai_formal_2018,
	address = {New York, NY, USA},
	series = {{ICSCA} 2018},
	title = {Formal {Modeling} and {Verification} of {Smart} {Contracts}},
	isbn = {978-1-4503-5414-1},
	url = {https://doi.org/10.1145/3185089.3185138},
	doi = {10.1145/3185089.3185138},
	abstract = {Smart contracts can automatically perform the contract terms according to the received information, and it is one of the most important research fields in digital society. The core of smart contracts is algorithm contract, that is, the parties reach an agreement on the contents of the contract and perform the contracts according to the behaviors written in certain computer algorithms. It not only needs to make sure about the correctness of smart contracts code, but also should provide a credible contract code execution environment. Blockchain provides a trusted execution and storage environment for smart contracts by the distributed secure storage, consistency verification and encryption technology. Current challenge is how to assure that smart contract can be executed as the parties' willingness. This paper introduces formal modeling and verification in formal methods to make smart contract model and verify the properties of smart contracts. Formal methods combined with smart contracts aim to reduce the potential errors and cost during contract development process. The description of a general and formal smart contract template is provided. The tool of model checking, SPIN, is used to verify the correctness and necessary properties for a smart contract template. The research shows model checking will be useful and necessary for smart contracts.},
	booktitle = {Proceedings of the 2018 7th {International} {Conference} on {Software} and {Computer} {Applications}},
	publisher = {Association for Computing Machinery},
	author = {Bai, Xiaomin and Cheng, Zijing and Duan, Zhangbo and Hu, Kai},
	year = {2018},
	note = {event-place: Kuantan, Malaysia},
	keywords = {Smart contracts, Formal methods, Formal Verification, Model checking, Modeling, SPIN},
	pages = {322--326},
}

@inproceedings{wan_smart_2021,
	series = {{ICSE} '21},
	title = {Smart {Contract} {Security}: {A} {Practitioners}' {Perspective}},
	isbn = {978-1-4503-9085-9},
	url = {https://doi.org/10.1109/ICSE43902.2021.00127},
	doi = {10.1109/ICSE43902.2021.00127},
	abstract = {Smart contracts have been plagued by security incidents, which resulted in substantial financial losses. Given numerous research efforts in addressing the security issues of smart contracts, we wondered how software practitioners build security into smart contracts in practice. We performed a mixture of qualitative and quantitative studies with 13 interviewees and 156 survey respondents from 35 countries across six continents to understand practitioners' perceptions and practices on smart contract security. Our study uncovers practitioners' motivations and deterrents of smart contract security, as well as how security efforts and strategies fit into the development lifecycle. We also find that blockchain platforms have a statistically significant impact on practitioners' security perceptions and practices of smart contract development. Based on our findings, we highlight future research directions and provide recommendations for practitioners.},
	booktitle = {Proceedings of the 43rd {International} {Conference} on {Software} {Engineering}},
	publisher = {IEEE Press},
	author = {Wan, Zhiyuan and Xia, Xin and Lo, David and Chen, Jiachi and Luo, Xiapu and Yang, Xiaohu},
	year = {2021},
	note = {event-place: Madrid, Spain},
	keywords = {Smart contract, Empirical study, Security, Practitioner},
	pages = {1410--1422},
}

@inproceedings{zhang_reentrancy_2023,
	address = {New York, NY, USA},
	series = {{ASE} '22},
	title = {Reentrancy {Vulnerability} {Detection} and {Localization}: {A} {Deep} {Learning} {Based} {Two}-{Phase} {Approach}},
	isbn = {978-1-4503-9475-8},
	url = {https://doi.org/10.1145/3551349.3560428},
	doi = {10.1145/3551349.3560428},
	abstract = {Smart contracts have been widely and rapidly used to automate financial and business transactions together with blockchains, helping people make agreements while minimizing trusts. With millions of smart contracts deployed on blockchain, various bugs and vulnerabilities in smart contracts have emerged. Following the rapid development of deep learning, many recent studies have used deep learning for vulnerability detection to conduct security checks before deploying smart contracts. These approaches show effective results on detecting whether a smart contract is vulnerable or not whereas their results on locating suspicious statements responsible for the detected vulnerability are still unsatisfactory. To address this problem, we propose a deep learning based two-phase smart contract debugger for reentrancy vulnerability, one of the most severe vulnerabilities, named as ReVulDL: Reentrancy Vulnerability Detection and Localization. ReVulDL integrates the vulnerability detection and localization into a unified debugging pipeline. For the detection phase, given a smart contract, ReVulDL uses a graph-based pre-training model to learn the complex relationships in propagation chains for detecting whether the smart contract contains a reentrancy vulnerability. For the localization phase, if a reentrancy vulnerability is detected, ReVulDL utilizes interpretable machine learning to locate the suspicious statements in smart contract to provide interpretations of the detected vulnerability. Our large-scale empirical study on 47,398 smart contracts shows that ReVulDL achieves promising results in detecting reentrancy vulnerabilities (e.g., outperforming 16 state-of-the-art vulnerability detection approaches) and locating vulnerable statements (e.g., 70.38\% of the vulnerable statements are ranked within Top-10).},
	booktitle = {Proceedings of the 37th {IEEE}/{ACM} {International} {Conference} on {Automated} {Software} {Engineering}},
	publisher = {Association for Computing Machinery},
	author = {Zhang, Zhuo and Lei, Yan and Yan, Meng and Yu, Yue and Chen, Jiachi and Wang, Shangwen and Mao, Xiaoguang},
	year = {2023},
	note = {event-place: Rochester, MI, USA},
	keywords = {Smart contract, vulnerability detection, fault localization, reentrancy vulnerability},
}

@inproceedings{tan_latte_2020,
	address = {New York, NY, USA},
	series = {{SIGMOD} '20},
	title = {{LATTE}: {Visual} {Construction} of {Smart} {Contracts}},
	isbn = {978-1-4503-6735-6},
	url = {https://doi.org/10.1145/3318464.3384687},
	doi = {10.1145/3318464.3384687},
	abstract = {Smart contracts enable developers to run instructions on blockchains (eg. Ethereum) and have broad range of real-world applications. Solidity is the most popular high-level smart contract programming language on Ethereum. Coding in such language, however, demands a user to be proficient in contract programming and debugging to construct smart contracts correctly. In practice, such expectation makes it harder for non-programmers to take advantage of smart contracts. In this demonstration, we present a novel visual smart contract construction system on Ethereum called latte to make smart contract development accessible to non-programmers. Specifically, it allows a user to construct a contract without writing Solidity code by manipulating visual objects in a direct manipulation-based interface. Furthermore, latte interactively guides users and makes them aware of the cost (in units of Gas) of visual actions undertaken by them during contract construction.},
	booktitle = {Proceedings of the 2020 {ACM} {SIGMOD} {International} {Conference} on {Management} of {Data}},
	publisher = {Association for Computing Machinery},
	author = {Tan, Sean and S Bhowmick, Sourav and Chua, Huey Eng and Xiao, Xiaokui},
	year = {2020},
	note = {event-place: Portland, OR, USA},
	keywords = {blockchain, smart contracts, usability, visual formulation, visual interface},
	pages = {2713--2716},
}

@inproceedings{yang_self-supervised_2022,
	address = {New York, NY, USA},
	series = {{ICPC} '22},
	title = {Self-{Supervised} {Learning} of {Smart} {Contract} {Representations}},
	isbn = {978-1-4503-9298-3},
	url = {https://doi.org/10.1145/3524610.3527894},
	doi = {10.1145/3524610.3527894},
	abstract = {Learning smart contract representations can greatly facilitate the development of smart contracts in many tasks such as bug detection and clone detection. Existing approaches for learning program representations are difficult to apply to smart contracts which have insufficient data and significant homogenization. To overcome these challenges, in this paper, we propose SRCL, a novel, self-supervised approach for learning smart contract representations. Unlike existing supervised methods, which are tied on task-specific data labels, SRCL leverages large-scale unlabeled data by self-supervised learning of both local and global information of smart contracts. It automatically extracts structural sequences from abstract syntax trees (ASTs). Then, two discriminators are designed to guide the Transformer encoder to learn local and global semantic features of smart contracts. We evaluate SRCL on a dataset of 75,006 smart contracts collected from Etherscan. Experimental results show that SRCL considerably outperforms the state-of-the-art code representation models on three downstream tasks.},
	booktitle = {Proceedings of the 30th {IEEE}/{ACM} {International} {Conference} on {Program} {Comprehension}},
	publisher = {Association for Computing Machinery},
	author = {Yang, Shouliang and Gu, Xiaodong and Shen, Beijun},
	year = {2022},
	note = {event-place: Virtual Event},
	keywords = {smart contract, code representation learning, data augmentation, self-supervised learning},
	pages = {82--93},
}

@inproceedings{hu_targeting_2021,
	address = {New York, NY, USA},
	series = {{ASIA} {CCS} '21},
	title = {Targeting the {Weakest} {Link}: {Social} {Engineering} {Attacks} in {Ethereum} {Smart} {Contracts}},
	isbn = {978-1-4503-8287-8},
	url = {https://doi.org/10.1145/3433210.3453085},
	doi = {10.1145/3433210.3453085},
	abstract = {Ethereum holds multiple billions of U.S. dollars in the form of Ether cryptocurrency and ERC-20 tokens, with millions of deployed smart contracts algorithmically operating these funds. Unsurprisingly, the security of Ethereum smart contracts has been under rigorous scrutiny. In recent years, numerous defense tools have been developed to detect different types of smart contract code vulnerabilities. When opportunities for exploiting code vulnerabilities diminish, the attackers start resorting to social engineering attacks, which aim to influence humans - often the weakest link in the system. The only known class of social engineering attacks in Ethereum are honeypots, which plant hidden traps for attackers attempting to exploit existing vulnerabilities, thereby targeting only a small population of potential victims.In this work, we explore the possibility and existence of new social engineering attacks beyond smart contract honeypots. We present two novel classes of Ethereum social engineering attacks - Address Manipulation and Homograph - and develop six zero-day social engineering attacks. To show how the attacks can be used in popular programming patterns, we conduct a case study of five popular smart contracts with combined market capitalization exceeding \$29 billion, and integrate our attack patterns in their source codes without altering their existing functionality. Moreover, we show that these attacks remain dormant during the test phase but activate their malicious logic only at the final production deployment. We further analyze 85,656 open-source smart contracts, and discover that 1,027 of them can be used for the proposed social engineering attacks. We conduct a professional opinion survey with experts from seven smart contract auditing firms, corroborating that the exposed social engineering attacks bring a major threat to the smart contract systems.},
	booktitle = {Proceedings of the 2021 {ACM} {Asia} {Conference} on {Computer} and {Communications} {Security}},
	publisher = {Association for Computing Machinery},
	author = {Hu, Xing and Gao, Zhipeng and Xia, Xin and Lo, David and Yang, Xiaohu and Ivanov, Nikolay and Lou, Jianzhi and Chen, Ting and Li, Jin and Yan, Qiben},
	year = {2021},
	note = {event-place: Virtual Event, Hong Kong},
	keywords = {smart contracts, ethereum, security, attacks, social engineering},
	pages = {787--801},
}

@inproceedings{vacca_empirical_2022,
	address = {New York, NY, USA},
	series = {{ICPC} '22},
	title = {An {Empirical} {Investigation} on the {Trade}-off between {Smart} {Contract} {Readability} and {Gas} {Consumption}},
	isbn = {978-1-4503-9298-3},
	url = {https://doi.org/10.1145/3524610.3529157},
	doi = {10.1145/3524610.3529157},
	abstract = {Blockchain technology is becoming increasingly popular, and smart contracts (i.e., programs that run on top of the blockchain) represent a crucial element of this technology. In particular, smart contracts running on Ethereum (i.e., one of the most popular blockchain platforms) are often developed with Solidity, and their deployment and execution consume gas (i.e., a fee compensating the computing resources required). Smart contract development frequently involves code reuse, but poor readable smart contracts could hinder their reuse. However, writing readable smart contracts is challenging, since practices for improving the readability could also be in contrast with optimization strategies for reducing gas consumption. This paper aims at better understanding (i) the readability aspects for which traditional software and smart contracts differ, and (ii) the specific smart contract readability features exhibiting significant relationships with gas consumption. We leverage a set of metrics that previous research has proven correlated with code readability. In particular, we first compare the values of these metrics obtained for both Solidity smart contracts and traditional software systems (written in Java). Then, we investigate the correlations occurring between these metrics and gas consumption and between each pair of metrics. The results of our study highlight that smart contracts usually exhibit lower readability than traditional software for what concerns the number of parentheses, inline comments, and blank lines used. In addition, we found some readability metrics (such as the average length of identifiers and the average number of keywords) that significantly correlate with gas consumption.},
	booktitle = {Proceedings of the 30th {IEEE}/{ACM} {International} {Conference} on {Program} {Comprehension}},
	publisher = {Association for Computing Machinery},
	author = {Vacca, Anna and Fredella, Michele and Di Sorbo, Andrea and Visaggio, Corrado A. and Canfora, Gerardo},
	year = {2022},
	note = {event-place: Virtual Event},
	keywords = {code quality, empirical study, readability metrics, software engineering for blockchain technologies, software metrics},
	pages = {214--224},
}

@inproceedings{yang_implementation_2020,
	address = {New York, NY, USA},
	series = {{ICASIT} 2020},
	title = {Implementation {Smart} {Contract} with {Finite} {State} {Machines}},
	isbn = {978-1-4503-7576-4},
	url = {https://doi.org/10.1145/3434581.3434734},
	doi = {10.1145/3434581.3434734},
	abstract = {Smart contract is an event-driven code contract with state attributes, which has been widely concerned and studied with the deep development of blockchain technology. This article proposes a new smart contract architecture, and discusses the main functions implemented at each layer and some of the key technologies and their operation mechanism in the blockchain. On this basis, it is attempted to establish a core description of commitment, and use a finite state machine to implement a formal description of smart contracts with the support of actions and finite periods. Finally, a commercial contract is implemented on the blockchain as an example to verify the feasibility of this standardized definition of smart contracts.},
	booktitle = {Proceedings of the 2020 {International} {Conference} on {Aviation} {Safety} and {Information} {Technology}},
	publisher = {Association for Computing Machinery},
	author = {Yang, Xiaojing and Liu, Jinshan and Li, Xiaohe},
	year = {2020},
	note = {event-place: Weihai City, China},
	keywords = {blockchain, commitment, finite state machine, smart Contract},
	pages = {404--408},
}

@inproceedings{chen_towards_2018,
	address = {New York, NY, USA},
	series = {{ICSE}-{NIER} '18},
	title = {Towards {Saving} {Money} in {Using} {Smart} {Contracts}},
	isbn = {978-1-4503-5662-6},
	url = {https://doi.org/10.1145/3183399.3183420},
	doi = {10.1145/3183399.3183420},
	abstract = {Being a new kind of software leveraging blockchain to execute real contracts, smart contracts are in great demand due to many advantages. Ethereum is the largest blockchain platform that supports smart contracts by running them in its virtual machine. To ensure that a smart contract will terminate eventually and prevent abuse of resources, Ethereum charges the developers for deploying smart contracts and the users for executing smart contracts. Although our previous work shows that under-optimized smart contracts may cost more money than necessary, it just lists 7 anti-patterns and the detection method for 3 of them. In this paper, we conduct the first in-depth investigation on such under-optimized smart contracts. We first identify 24 anti-patterns from the execution traces of real smart contracts. Then, we design and develop GasReducer, the first tool to automatically detect all these anti-patterns from the bytecode of smart contracts and replace them with efficient code through bytecode-to-bytecode optimization. Using GasReducer to analyze all smart contracts and their execution traces, we detect 9,490,768 and 557,565,754 anti-pattern instances in deploying and invoking smart contracts, respectively.},
	booktitle = {Proceedings of the 40th {International} {Conference} on {Software} {Engineering}: {New} {Ideas} and {Emerging} {Results}},
	publisher = {Association for Computing Machinery},
	author = {Chen, Ting and Li, Zihao and Zhou, Hao and Chen, Jiachi and Luo, Xiapu and Li, Xiaoqi and Zhang, Xiaosong},
	year = {2018},
	note = {event-place: Gothenburg, Sweden},
	keywords = {smart contract, anti-patterns, detection, optimization},
	pages = {81--84},
}

@inproceedings{liu_enabling_2019,
	series = {{ICPC} '19},
	title = {Enabling {Clone} {Detection} for {Ethereum} via {Smart} {Contract} {Birthmarks}},
	url = {https://doi.org/10.1109/ICPC.2019.00024},
	doi = {10.1109/ICPC.2019.00024},
	abstract = {The Ethereum ecosystem has introduced a pervasive blockchain platform with programmable transactions. Everyone is allowed to develop and deploy smart contracts. Such flexibility can lead to a large collection of similar contracts, i.e., clones, especially when Ethereum applications are highly domain-specific and may share similar functionalities within the same domain, e.g., token contracts often provide interfaces for money transfer and balance inquiry. While smart contract clones have a wide range of impact across different applications, e.g., security, they are relatively little studied.Although clone detection has been a long-standing research topic, blockchain smart contracts introduce new challenges, e.g., syntactic diversity due to trade-off between storage and execution, understanding high-level business logic etc.. In this paper, we highlighted the very first attempt to clone detection of Ethereum smart contracts. To overcome the new challenges, we introduce the concept of smart contract birthmark, i.e., a semantic-preserving and computable representation for smart contract bytecode. The birthmark captures high-level semantics by effectively sketching symbolic execution traces (e.g., data access dependencies, path conditions) and maintain syntactic regularities (e.g., type and number of instructions) as well. Then, the clone detection problem is reduced to a computation of statistical similarity between two contract birthmarks. We have implemented a clone detector called EClone and evaluated it on Ethereum. The empirical results demonstrated the potential of EClone in accurately identifying clones. We have also extended EClone for vulnerability search and managed to detect CVE-2018-10376 instances.},
	booktitle = {Proceedings of the 27th {International} {Conference} on {Program} {Comprehension}},
	publisher = {IEEE Press},
	author = {Liu, Han and Yang, Zhiqiang and Jiang, Yu and Zhao, Wenqi and Sun, Jiaguang},
	year = {2019},
	note = {event-place: Montreal, Quebec, Canada},
	keywords = {symbolic execution, ethereum, clone detection, smart contract birthmark},
	pages = {105--115},
}

@inproceedings{maier_uncovering_2022,
	address = {New York, NY, USA},
	series = {{ROOTS}'21},
	title = {Uncovering {Smart} {Contract} {VM} {Bugs} {Via} {Differential} {Fuzzing}},
	isbn = {978-1-4503-9602-8},
	url = {https://doi.org/10.1145/3503921.3503923},
	doi = {10.1145/3503921.3503923},
	abstract = {The ongoing public interest in blockchains and smart contracts has brought a rise to a magnitude of different blockchain implementations. The rate at which new concepts are envisioned and implemented makes it hard to vet their impact on security. Especially smart contract platforms, executing untrusted code, are very complex by design. Still, people put their trust and money into chains that may lack proper testing. A behavior deviation for edge cases of single op-codes is a critical bug class in this brave new world. It can be abused for Denial of Service against the blockchain, chain splits, double-spending, or direct attacks on applications operating on the blockchain. In this paper, we propose an automated methodology to uncover such differences. Through coverage-guided and state-guided fuzzing, we explore smart contract virtual machine behavior against multiple VMs in parallel. We develop NeoDiff, the first framework for feedback-guided differential fuzzing of smart contract VMs. We discuss real, monetary consequences our tool prevents. NeoDiff can be ported to new smart contract platforms with ease. Apart from fuzzing Ethereum VMs, NeoDiff found a range of critical differentials in VMs for the Neo blockchain. Moreover, through a higher-layer semantics mutator, we uncovered semantic discrepancies between Neo smart contracts written in Python when executed on the blockchain vs. classic CPython. Along the way, NeoDiff uncovered memory corruptions in the C\# Neo VM.},
	booktitle = {Reversing and {Offensive}-{Oriented} {Trends} {Symposium}},
	publisher = {Association for Computing Machinery},
	author = {Maier, Dominik and Fäßler, Fabian and Seifert, Jean-Pierre},
	year = {2022},
	note = {event-place: Vienna, Austria},
	keywords = {Differential Fuzzing, Smart Contract VM, State-Aware},
	pages = {11--22},
}

@inproceedings{richard_smart_2021-1,
	address = {New York, NY, USA},
	series = {{ICBTA} 2020},
	title = {Smart {Contract} {Development} {Model} and the {Future} of {Blockchain} {Technology}},
	isbn = {978-1-4503-8896-2},
	url = {https://doi.org/10.1145/3446983.3446994},
	doi = {10.1145/3446983.3446994},
	abstract = {Blockchain has become a mainstream technology in our society in recent years. With its nature of secure decentralization, people can create decentralized applications by developing smart contracts on top of a blockchain platform. With blockchain, technology is still in the developing phase, the smart contract development process in blockchain has its unique complexity and uncertainty. The condition will drive the challenge for any developers to work on this issue. In this research, we determine the smart contract development model in creating decentralized applications. Our proposed model aligned with our findings in the systematic mapping process of this study.},
	booktitle = {2020 the 3rd {International} {Conference} on {Blockchain} {Technology} and {Applications}},
	publisher = {Association for Computing Machinery},
	author = {Richard, Richard and Prabowo, Harjanto and Trisetyarso, Agung and Soewito, Benfano},
	year = {2021},
	note = {event-place: Xi'an, China},
	keywords = {Blockchain, Smart Contract, Smart Contract Development, Decentralized Applications, Systematic Mapping},
	pages = {34--39},
}

@inproceedings{yang_seraph_2020,
	address = {New York, NY, USA},
	series = {{ICSE} '20},
	title = {Seraph: {Enabling} {Cross}-{Platform} {Security} {Analysis} for {EVM} and {WASM} {Smart} {Contracts}},
	isbn = {978-1-4503-7122-3},
	url = {https://doi.org/10.1145/3377812.3382157},
	doi = {10.1145/3377812.3382157},
	abstract = {As blockchain becomes increasingly popular across various industries in recent years, many companies started designing and developing their own smart contract platforms to enable better services on blockchain. While smart contracts are notoriously known to be vulnerable to external attacks, such platform diversity further amplified the security challenge. To mitigate this problem, we designed the very first cross-platform security analyzer called Seraph for smart contracts. Specifically, Seraph enables automated security analysis for different platforms built on two mainstream virtual machine architectures, i.e., EVM and WASM. To this end, Seraph introduces a set of general connector API to abstract interactions between the virtual machine and blockchain, e.g., load and update storage data on blockchain. Moreover, we proposed the symbolic semantic graph to model critical dependencies and decoupled security analysis from contract code as well. Our preliminary evaluation on four existing smart contract platforms demonstrated the potential of Seraph in finding security threats both flexibly and accurately. A video of Seraph is available at https://youtu.be/wxixZkVqUsc.},
	booktitle = {Proceedings of the {ACM}/{IEEE} 42nd {International} {Conference} on {Software} {Engineering}: {Companion} {Proceedings}},
	publisher = {Association for Computing Machinery},
	author = {Yang, Zhiqiang and Liu, Han and Li, Yue and Zheng, Huixuan and Wang, Lei and Chen, Bangdao},
	year = {2020},
	note = {event-place: Seoul, South Korea},
	keywords = {smart contracts, connector API, symbolic semantic graph},
	pages = {21--24},
}

@inproceedings{chen_wasai_2022,
	address = {New York, NY, USA},
	series = {{ISSTA} 2022},
	title = {{WASAI}: {Uncovering} {Vulnerabilities} in {Wasm} {Smart} {Contracts}},
	isbn = {978-1-4503-9379-9},
	url = {https://doi.org/10.1145/3533767.3534218},
	doi = {10.1145/3533767.3534218},
	abstract = {WebAssembly (Wasm) smart contracts have shown growing popularity across blockchains (e.g., EOSIO) recently. Similar to Ethereum smart contracts, Wasm smart contracts suffer from various attacks exploiting their vulnerabilities. Even worse, few developers released the source code of their Wasm smart contracts for security review, raising the bar for uncovering vulnerable contracts. Although a few approaches have been proposed to detect vulnerable Wasm smart contracts, they have several major limitations, e.g., low code coverage, low accuracy and lack of scalability, unable to produce exploit payloads, etc. To fill the gap, in this paper, we design and develop WASAI, a new concolic fuzzer for uncovering vulnerabilities in Wasm smart contract after tackling several challenging issues. We conduct extensive experiments to evaluate WASAI, and the results show that it outperforms the state-of-the-art methods. For example, it achieves 2x code coverage than the baselines and surpasses them in detection accuracy, with an F1-measure of 99.2\%. Moreover, WASAI can handle complicated contracts (e.g., contracts with obfuscation and sophisticated verification). Applying WASAI to 991 deployed smart contracts in the wild, we find that over 70\% of smart contracts are vulnerable. By the time of this study, over 300 vulnerable contracts have not been patched and are still operating on the EOSIO Mainnet. One fake EOS vulnerability reported to the EOSIO ecosystem was recently assigned a CVE identifier (CVE-2022-27134).},
	booktitle = {Proceedings of the 31st {ACM} {SIGSOFT} {International} {Symposium} on {Software} {Testing} and {Analysis}},
	publisher = {Association for Computing Machinery},
	author = {Chen, Weimin and Sun, Zihan and Wang, Haoyu and Luo, Xiapu and Cai, Haipeng and Wu, Lei},
	year = {2022},
	note = {event-place: Virtual, South Korea},
	keywords = {smart contracts, Concolic fuzzing, dynamic software analysis},
	pages = {703--715},
}

@inproceedings{zhu_identifying_2023,
	address = {New York, NY, USA},
	series = {{ASE} '22},
	title = {Identifying {Solidity} {Smart} {Contract} {API} {Documentation} {Errors}},
	isbn = {978-1-4503-9475-8},
	url = {https://doi.org/10.1145/3551349.3556963},
	doi = {10.1145/3551349.3556963},
	abstract = {Smart contracts are gaining popularity as a means to support transparent, traceable, and self-executing decentralized applications, which enable the exchange of value in a trustless environment. Developers of smart contracts rely on various libraries, such as OpenZeppelin for Solidity contracts, to improve application quality and reduce development costs. The API documentations of these libraries are important sources of information for developers who are unfamiliar with the APIs. Yet, maintaining high-quality documentations is non-trivial, and errors in documentations may place barriers for developers to learn the correct usages of APIs. In this paper, we propose a technique, DocCon, to detect inconsistencies between documentations and the corresponding code for Solidity smart contract libraries. Our fact-based approach allows inconsistencies of different severity levels to be queried, from a database containing precomputed facts about the API code and documentations. DocCon successfully detected high-priority API documentation errors in popular smart contract libraries, including mismatching parameters, missing requirements, outdated descriptions, etc. Our experiment result shows that DocCon achieves good precision and is applicable to different libraries: 29 and 22 out of our reported 40 errors have been confirmed and fixed by library developers so far.},
	booktitle = {Proceedings of the 37th {IEEE}/{ACM} {International} {Conference} on {Automated} {Software} {Engineering}},
	publisher = {Association for Computing Machinery},
	author = {Zhu, Chenguang and Liu, Ye and Wu, Xiuheng and Li, Yi},
	year = {2023},
	note = {event-place: Rochester, MI, USA},
	keywords = {Smart contract, API documentation, program facts.},
}

@article{dwivedi_legally_2021,
	title = {Legally {Enforceable} {Smart}-{Contract} {Languages}: {A} {Systematic} {Literature} {Review}},
	volume = {54},
	issn = {0360-0300},
	url = {https://doi.org/10.1145/3453475},
	doi = {10.1145/3453475},
	abstract = {Smart contracts are a key component of today’s blockchains. They are critical in controlling decentralized autonomous organizations (DAO). However, smart contracts are not yet legally binding nor enforceable; this makes it difficult for businesses to adopt the DAO paradigm. Therefore, this study reviews existing Smart Contract Languages (SCL) and identifies properties that are critical to any future SCL for drafting legally binding contracts. This is achieved by conducting a Systematic Literature Review (SLR) of white- and grey literature published between 2015 and 2019. Using the SLR methodology, 45 Selected and 28 Supporting Studies detailing 45 state-of-the-art SCLs are selected. Finally, 10 SCL properties that enable legally compliant DAOs are discovered, and specifications for developing SCLs are explored.},
	number = {5},
	journal = {ACM Comput. Surv.},
	author = {Dwivedi, Vimal and Pattanaik, Vishwajeet and Deval, Vipin and Dixit, Abhishek and Norta, Alex and Draheim, Dirk},
	month = jun,
	year = {2021},
	note = {Place: New York, NY, USA
Publisher: Association for Computing Machinery},
	keywords = {Blockchain, decentralized autonomous organization, expressiveness, smart contract language, suitability, systematic literature review},
}

@inproceedings{yu_parallel_2018,
	address = {New York, NY, USA},
	series = {{MLMI} '18},
	title = {A {Parallel} {Smart} {Contract} {Model}},
	isbn = {978-1-4503-6556-7},
	url = {https://doi.org/10.1145/3278312.3278321},
	doi = {10.1145/3278312.3278321},
	abstract = {With the rapid development of blockchain technology, blockchain becomes a good platform for execution of smart contracts. However, since smart contracts still have a low performance of transaction processing on blockchain. It can't satisfy real-time requirements in some situations. This paper proposes a parallel smart contract model on blockchain which has a better performance in transaction processing. The challenges with the proposed approach are the implementation of the parallel mode and the solution of synchronization problem of the proposed model. This paper uses multi-thread technology to implement the proposed model where transactions are executed in parallel. Then we propose a transaction splitting algorithm to resolve the synchronization problem. Finally, experimental analysis proves that this parallel model exactly makes a remarkable development of performance in transaction processing.},
	booktitle = {Proceedings of the 2018 {International} {Conference} on {Machine} {Learning} and {Machine} {Intelligence}},
	publisher = {Association for Computing Machinery},
	author = {Yu, Wei and Luo, Kan and Ding, Yi and You, Guang and Hu, Kai},
	year = {2018},
	note = {event-place: Ha Noi, Viet Nam},
	keywords = {Blockchain, smart contract, parallel model},
	pages = {72--77},
}

@inproceedings{annenkov_extracting_2021,
	address = {New York, NY, USA},
	series = {{CPP} 2021},
	title = {Extracting {Smart} {Contracts} {Tested} and {Verified} in {Coq}},
	isbn = {978-1-4503-8299-1},
	url = {https://doi.org/10.1145/3437992.3439934},
	doi = {10.1145/3437992.3439934},
	abstract = {We implement extraction of Coq programs to functional languages based on MetaCoq's certified erasure. As part of this, we implement an optimisation pass removing unused arguments. We prove the pass correct wrt. a conventional call-by-value operational semantics of functional languages. We apply this to two functional smart contract languages, Liquidity and Midlang, and to the functional language Elm. Our development is done in the context of the ConCert framework that enables smart contract verification. We contribute a verified boardroom voting smart contract featuring maximum voter privacy such that each vote is kept private except under collusion of all other parties. We also integrate property-based testing into ConCert using QuickChick and our development is the first to support testing properties of interacting smart contracts. We test several complex contracts such as a DAO-like contract, an escrow contract, an implementation of a Decentralized Finance (DeFi) contract which includes a custom token standard (Tezos FA2), and more. In total, this gives us a way to write dependent programs in Coq, test them semi-automatically, verify, and then extract to functional smart contract languages, while retaining a small trusted computing base of only MetaCoq and the pretty-printers into these languages.},
	booktitle = {Proceedings of the 10th {ACM} {SIGPLAN} {International} {Conference} on {Certified} {Programs} and {Proofs}},
	publisher = {Association for Computing Machinery},
	author = {Annenkov, Danil and Milo, Mikkel and Nielsen, Jakob Botsch and Spitters, Bas},
	year = {2021},
	note = {event-place: Virtual, Denmark},
	keywords = {blockchain, smart contracts, property-based testing, formal verification, certified programming, code extraction, Coq, proof assistants, software correctness},
	pages = {105--121},
}

@inproceedings{meng_blockchain-based_2022,
	address = {New York, NY, USA},
	series = {{EPCE} '22},
	title = {Blockchain-{Based} {Price} {Priority} {Matching} {Two}-{Stage} {Energy} {Trading} {Algorithm}},
	isbn = {978-1-4503-9612-7},
	url = {https://doi.org/10.1145/3529299.3531492},
	doi = {10.1145/3529299.3531492},
	abstract = {With the rapid development of energy Internet, the implementation of smart meters and distributed energy resources (DER) provide new opportunities for consumers. Distributed energy needs a new settlement mechanism. Blockchain technology can provide a means for the electricity trading market. This paper proposes a decentralized, two-stage double auction energy trading algorithm. The proposed market is a distributed and decentralized application and its rules may be specified through smart contracts. Market participants conduct energy transactions by interacting with smart contracts. The smart contract first collects the quotations and performs the same price priority matching, and then performs a unified price clearing on the remaining quotations to obtain the market clearing price. Compared with the traditional double auction, our method improves the consumption capacity and security, improves the economic income of the overall market, and makes the profits of producers and consumers higher.},
	booktitle = {Proceedings of the {Asia} {Conference} on {Electrical}, {Power} and {Computer} {Engineering}},
	publisher = {Association for Computing Machinery},
	author = {Meng, QingYu and Zhang, ZhaoGong},
	year = {2022},
	note = {event-place: Shanghai, China},
	keywords = {blockchain, smart contract, double Auction, smart Grids},
}

@inproceedings{wang_ibatch_2021,
	address = {New York, NY, USA},
	series = {{ESEC}/{FSE} 2021},
	title = {{IBatch}: {Saving} {Ethereum} {Fees} via {Secure} and {Cost}-{Effective} {Batching} of {Smart}-{Contract} {Invocations}},
	isbn = {978-1-4503-8562-6},
	url = {https://doi.org/10.1145/3468264.3468568},
	doi = {10.1145/3468264.3468568},
	abstract = {This paper presents iBatch, a middleware system running on top of an operational Ethereum network to enable secure batching of smart-contract invocations against an untrusted relay server off-chain. iBatch does so at a low overhead by validating the server's batched invocations in smart contracts without additional states. The iBatch mechanism supports a variety of policies, ranging from conservative to aggressive batching, and can be configured adaptively to the current workloads. iBatch automatically rewrites smart contracts to integrate with legacy applications and support large-scale deployment. For cost evaluation, we develop a platform with fast and cost-accurate transaction replaying, build real transaction benchmarks on popular Ethereum applications, and build a functional prototype of iBatch on Ethereum. The evaluation results show that iBatch saves 14.6\%-59.1\% Gas cost per invocation with a moderate 2-minute delay and 19.06\%-31.52\% Ether cost per invocation with a delay of 0.26-1.66 blocks.},
	booktitle = {Proceedings of the 29th {ACM} {Joint} {Meeting} on {European} {Software} {Engineering} {Conference} and {Symposium} on the {Foundations} of {Software} {Engineering}},
	publisher = {Association for Computing Machinery},
	author = {Wang, Yibo and Zhang, Qi and Li, Kai and Tang, Yuzhe and Chen, Jiaqi and Luo, Xiapu and Chen, Ting},
	year = {2021},
	note = {event-place: Athens, Greece},
	keywords = {smart contracts, Blockchains, cost effectiveness, DeFi, replay attacks},
	pages = {566--577},
}

@inproceedings{ren_scstudio_2021-1,
	address = {New York, NY, USA},
	series = {{ISSTA} 2021},
	title = {{SCStudio}: {A} {Secure} and {Efficient} {Integrated} {Development} {Environment} for {Smart} {Contracts}},
	isbn = {978-1-4503-8459-9},
	url = {https://doi.org/10.1145/3460319.3469078},
	doi = {10.1145/3460319.3469078},
	abstract = {With the increasing popularity of block-chain technologies, more and more engineers use smart contracts for application implementation. Traditional supporting tools can either provide code completions based on static libraries or detect a limited set of vulnerabilities, which results in the manpower waste during coding and miss-detection of bugs. In this work, we propose SCStudio, a unified smart contract development platform, which aims to help developers implement more secure smart contracts easily. The core idea is to realize real-time security-reinforced recommendation through pattern-based learning; and to perform security-oriented validation via integrated testing. SCStudio was implemented as a plug-in of VS Code. It has been used as the official development tool of WeBank and integrated as the recommended development tool by FISCO-BCOS community. In practice, it outperforms existing contract development environments, such as Remix, improving the average word suggestion accuracy by 30\%-60\% and helping detect about 25\% more vulnerabilities. The video is presented at https://youtu.be/l6hW3Ds5Tkg.},
	booktitle = {Proceedings of the 30th {ACM} {SIGSOFT} {International} {Symposium} on {Software} {Testing} and {Analysis}},
	publisher = {Association for Computing Machinery},
	author = {Ren, Meng and Ma, Fuchen and Yin, Zijing and Li, Huizhong and Fu, Ying and Chen, Ting and Jiang, Yu},
	year = {2021},
	note = {event-place: Virtual, Denmark},
	keywords = {Smart Contract, Security-Reinforced Code Suggestion, Validation},
	pages = {666--669},
}

@inproceedings{chao_study_2022,
	address = {New York, NY, USA},
	series = {{MISNC} '22},
	title = {The {Study} of {Decentralized} {Autonomous} {Organization} ({DAO})in {Social} {Network}},
	isbn = {978-1-4503-9843-5},
	url = {https://doi.org/10.1145/3561278.3561293},
	doi = {10.1145/3561278.3561293},
	abstract = {In the past, the term “Decentralized Autonomous Organization (DAO)” was used to refer to a loosely organized network of autonomous entities, such as a corporation, a cooperative, or a non-profit party. Since Ethereum pioneered smart contracts in the blockchain, the Ethereum Virtual Machine (EVM) can connect public nodes scattered throughout the network into a virtual machine to execute Turing-complete programs. The EVM can also run other applications such as decentralized autonomous organization (DAO), which is a new type of blcokchain-based organization that uses smart contracts to perform tasks on a distributed scale. The smart contracts have organizational rules and operational logic embedded and automatically execute organizational decisions and proposals making it highly decentralized and more democratic. The DAOs are organizations that are not subject to legal, physical, or economic constraints, as well as the ability to operate outside the control of a single central authority or a single governing body. Because DAO is formed by many smart contract that operate together, which makes it highly decentralized and has a strong democratic system. This paper discusses the pros and cons of DAO, and the potential of DAO in community development, especially in non-profit organizations. It is hope to provide an overall picture of DAO, and the roadmap for future development of DAO on the right track.},
	booktitle = {Proceedings of the 9th {Multidisciplinary} {International} {Social} {Networks} {Conference}},
	publisher = {Association for Computing Machinery},
	author = {Chao, Chian-Hsueng and Ting, I-Hsien and Tseng, Yi-Jun and Wang, Bing-Wen and Wang, Shin-Hua and Wang, Yu-Qing and Chen, Ming-Chun},
	year = {2022},
	note = {event-place: Matsuyama, Japan},
	keywords = {Blockchain, Smart Contract, Distributed Ledger, Decentralized Autonomous Organization, Virtual Community},
	pages = {59--65},
}

@inproceedings{santiago_gifflar_2021,
	address = {USA},
	series = {{CASCON} '21},
	title = {Gifflar: {A} {Framework} to {Generate} {Smart} {Contracts} on the {Fly}},
	abstract = {Blockchain is a disruptive technology that offers a secure decentralized network, allowing for direct transactions between distributed entities, without the need for a trusted third party. Smart contracts are executable codes hosted on the blockchain which enables the implementation of several decentralized applications, in different domains. Due to the complexity of the contract's construction, it is necessary to seek ways to facilitate and make this innovative development process robust. This paper presents Gifflar, a framework for generating smart contract code on the fly, in such a way that it allows a system to write, compile and implement blockchain contracts with a decentralized application still running. The framework is structured in components that implement design patterns to better define the responsibility of each one of the parts and exports a simple interaction module for modeling contracts in JSON and automatic code writing using the TypeScript language. As far as we know, this framework is one of the first to allow contract code generation dynamically at run time. Thus, the work contributes to the state of the art by addressing a new paradigm, where systems can act as smart contract developers.},
	booktitle = {Proceedings of the 31st {Annual} {International} {Conference} on {Computer} {Science} and {Software} {Engineering}},
	publisher = {IBM Corp.},
	author = {Santiago, Levy and Abijaude, Jauberth Weyll and Greve, Fabíola},
	year = {2021},
	note = {event-place: Toronto, Canada},
	keywords = {blockchain, code generation, framework, smart contract},
	pages = {214--219},
}

@inproceedings{santiago_framework_2021,
	address = {New York, NY, USA},
	series = {{SBES} '21},
	title = {A {Framework} to {Generate} {Smart} {Contracts} {On} the {Fly}},
	isbn = {978-1-4503-9061-3},
	url = {https://doi.org/10.1145/3474624.3477068},
	doi = {10.1145/3474624.3477068},
	abstract = {Blockchain is a disruptive technology that offers a secure decentralized network, and allows for direct transactions between distributed entities, without the need for a trusted third party. Smart contracts are executable codes hosted on the blockchain and enable the implementation of several decentralized applications, in different domains. However, due to the complexity of contract construction, it is necessary to seek ways to facilitate and make this innovative development process robust. This paper presents Gifflar, a framework for generating smart contract code on the fly, in such a way that it allows a system to write, compile and implement blockchain contracts with a decentralized application still running. Gifflar is structured in components that implement design patterns to better define the responsibility of each one of the parts and exports a simple interaction module for contract modeling in JSON and automatic code writing using the TypeScript language. As far as we know, this framework is one of the first to generate contracts dynamically at run time. Thus, the work contributes to the state of the art by addressing a new paradigm, where systems can act as smart contract developers.},
	booktitle = {Proceedings of the {XXXV} {Brazilian} {Symposium} on {Software} {Engineering}},
	publisher = {Association for Computing Machinery},
	author = {Santiago, Levy and Abijaude, Jauberth and Greve, Fabíola},
	year = {2021},
	note = {event-place: Joinville, Brazil},
	keywords = {Blockchain, Code Generation, Framework, Smart Contract},
	pages = {410--415},
}

@article{chaliasos_study_2022,
	title = {A {Study} of {Inline} {Assembly} in {Solidity} {Smart} {Contracts}},
	volume = {6},
	url = {https://doi.org/10.1145/3563328},
	doi = {10.1145/3563328},
	abstract = {The Solidity programming language is the most widely used language for smart contract development. Improving smart contracts’ correctness, security, and performance has been the driving force for research in vulnerability detection, program analysis, and compiler techniques for Solidity. Similar to system-level languages such as C, Solidity enables the embedding of low-level code in programs, in the form of inline assembly code. Developers use inline assembly for low-level optimizations, extending the Solidity language through libraries, and using blockchain-specific opcodes only available through inline assembly. Nevertheless, inline assembly fragments are not well understood by an average developer and can introduce security threats as well as affect the optimizations that can be applied to programs by the compiler; it also significantly limits the effectiveness of source code static analyzers that operate on the Solidity level. A better understanding of how inline assembly is used in practice could in turn increase the performance, security, and support for inline assembly in Solidity. This paper presents a large-scale quantitative study of the use of inline assembly in 6.8M smart contracts deployed on the Ethereum blockchain. We find that 23\% of the analyzed smart contracts contain inline assembly code, and that the use of inline assembly has become more widespread over time. We further performed a manual qualitative analysis for identifying usage patterns of inline assembly in Solidity smart contracts. Our findings are intended to help practitioners understand when they should use inline assembly and guide developers of Solidity tools in prioritizing which parts of inline assembly to implement first. Finally, the insights of this study could be used to enhance the Solidity language, improve the Solidity compiler, and to open up new research directions by driving future researchers to build appropriate methods and techniques for replacing inline assembly in Solidity programs when there is no real necessity to use it.},
	number = {OOPSLA2},
	journal = {Proc. ACM Program. Lang.},
	author = {Chaliasos, Stefanos and Gervais, Arthur and Livshits, Benjamin},
	month = oct,
	year = {2022},
	note = {Place: New York, NY, USA
Publisher: Association for Computing Machinery},
	keywords = {Smart Contracts, Solidity, Empirical Studies, Inline Assembly},
}

@inproceedings{ali_quest_2017,
	address = {New York, NY, USA},
	series = {{AMECSE} '17},
	title = {The {Quest} for {Fully} {Smart} {Autonomous} {Business} {Networks} in {IoT} {Platforms}},
	isbn = {978-1-4503-5512-4},
	url = {https://doi.org/10.1145/3178298.3178301},
	doi = {10.1145/3178298.3178301},
	abstract = {The evolution of the business networks is fostering the demand for more connected devices to execute tangled and sophisticated business operations. This leverages complicated business networks space to include scalable network layers, more devices, and platforms relying on Internet of Things (IoT) solutions. Despite the fact that traditional IoT platforms usually target the technical side for IoT applications, they are not prepared enough to be easily integrated with pluggable and executable business logic or smart contracts. This makes it difficult to control a collection of shared business network resources in a standard and decentralized manner. With the rise of FinTech due to blockchain technology, it becomes possible to seamlessly engage business networks with financial digital assets. Consequently, combining IoT platforms with blockchain will drive new ways for better services consuming, transparency and products that depend on crowd-based economy [12]. In this paper, Sitechain is proposed as a new architecture to integrate IoT platforms with blockchain technology. The proposed architecture is not locked to specific IoT platforms but it can be extended to support different platforms in a standard, systematic and easy way. Sitechain is demonstrated by integrating Sitewhere and FIWARE IoT platforms with Hyperledger Fabric as a private blockchain network manager. Moreover a modeling language supported by Hyperledger composer is used to easily develop smart contracts and generate RESTful APIs, therefore any smart contract transaction events can be mapped into actions on remote devices.The system testing is performed using a large set of connected shared devices that are deployed as part of private business networks. The results are recorded in the conclusion section.},
	booktitle = {Proceedings of the 3rd {Africa} and {Middle} {East} {Conference} on {Software} {Engineering}},
	publisher = {Association for Computing Machinery},
	author = {Ali, Ahmed Abdullah and El-Dessouky, Iman A. and Abdallah, Mahmoud M. and Nabih, Azza K.},
	year = {2017},
	note = {event-place: Cairo, Egypt},
	keywords = {Blockchain, Smart Contracts, Consensus, Distributed Ledger, HyperLedger, Internet of Things, IoT Platforms},
	pages = {13--18},
}

@inproceedings{taherkordi_pervasive_2018,
	address = {New York, NY, USA},
	series = {{ICBTA} 2018},
	title = {Pervasive {Smart} {Contracts} for {Blockchains} in {IoT} {Systems}},
	isbn = {978-1-4503-6646-5},
	url = {https://doi.org/10.1145/3301403.3301405},
	doi = {10.1145/3301403.3301405},
	abstract = {Thanks to its decentralized structure and immutability, blockchain technology has the potential to address relevant security and privacy challenges in the Internet of Things (IoT). In particular, by hosting and executing smart contracts, blockchain allows secure, flexible, and traceable message communication between IoT devices. The unique characteristics of IoT systems, such as heterogeneity and pervasiveness, however, pose challenges in designing smart contracts for such systems. In this paper, we study these challenges and propose a design approach for smart contracts used in IoT systems. The main goal of our design model is to enhance the development of IoT smart contracts based on the inherent pervasive attributes of IoT systems. In particular, the design model allows the smart contracts to encapsulate functionalities such as contractlevel communication between IoT devices, access to data-sources within contracts, and interoperability of heterogeneous IoT smart contracts. The essence of our approach is structuring the design of IoT smart contracts as self-contained software services, inspired by the microservice architecture model. The flexibility, scalability and modularity of this model make it an efficient approach for developing pervasive IoT smart contracts.},
	booktitle = {Proceedings of the 2018 {International} {Conference} on {Blockchain} {Technology} and {Application}},
	publisher = {Association for Computing Machinery},
	author = {Taherkordi, Amir and Herrmann, Peter},
	year = {2018},
	note = {event-place: Xi'an, China},
	keywords = {Smart Contracts, Internet of Things, Blockchains, Microservices},
	pages = {6--11},
}

@inproceedings{mense_security_2018,
	address = {New York, NY, USA},
	series = {{iiWAS2018}},
	title = {Security {Vulnerabilities} in {Ethereum} {Smart} {Contracts}},
	isbn = {978-1-4503-6479-9},
	url = {https://doi.org/10.1145/3282373.3282419},
	doi = {10.1145/3282373.3282419},
	abstract = {Smart contracts (SC) are one of the most appealing features of blockchain technologies facilitating, executing, and enforcing predefined terms of coded contracts without intermediaries. The steady adoption of smart contracts on the Ethereum blockchain has led to tens of thousands of contracts holding millions of dollars in digital currencies and small mistakes during the development of SC on immutable blockchains have already caused substantial losses and involve the danger for future incidents. Hence, today the secure development of smart contracts is an important topic and several attacks and incidents related to vulnerable smart contracts could have been avoided. To foster a secure development process of SC this paper summarizes known vulnerabilities in smart contracts found by literature research and analysis. It compares currently available code analysis tools for their capabilities to identify and detect vulnerabilities in smart contracts based on a taxonomy for vulnerabilities. Finally, based on the TheDOA attack the paper shows an example for the adoption of best practices to avoid severe vulnerabilities in smart contracts.},
	booktitle = {Proceedings of the 20th {International} {Conference} on {Information} {Integration} and {Web}-{Based} {Applications} \&amp; {Services}},
	publisher = {Association for Computing Machinery},
	author = {Mense, Alexander and Flatscher, Markus},
	year = {2018},
	note = {event-place: Yogyakarta, Indonesia},
	keywords = {Blockchain, Smart Contracts, Security},
	pages = {375--380},
}

@inproceedings{sai_inheritance_2020,
	address = {New York, NY, USA},
	series = {{ICPC} '20},
	title = {Inheritance {Software} {Metrics} on {Smart} {Contracts}},
	isbn = {978-1-4503-7958-8},
	url = {https://doi.org/10.1145/3387904.3389284},
	doi = {10.1145/3387904.3389284},
	abstract = {Blockchain systems have gained substantial traction recently, partly due to the potential of decentralized immutable mediation of economic activities. Ethereum is a prominent example that has the provision for executing stateful computing scripts known as Smart Contracts. These smart contracts resemble traditional programs, but with immutability being the core differentiating factor. Given their immutability and potential high monetary value, it becomes imperative to develop high-quality smart contracts. Software metrics have traditionally been an essential tool in determining programming quality. Given the similarity between smart contracts (written in Solidity for Ethereum) and object-oriented (OO) programming, OO metrics would appear applicable. In this paper, we empirically evaluate inheritance-based metrics as applied to smart contracts. We adopt this focus because, traditionally, inheritance has been linked to a more complex codebase which we posit is not the case with Solidity based smart contracts. In this work, we evaluate the hypothesis that, due to the differences in the context of smart contracts and OO programs, it may not be appropriate to use the same interpretation of inheritance based metrics for assessment.},
	booktitle = {Proceedings of the 28th {International} {Conference} on {Program} {Comprehension}},
	publisher = {Association for Computing Machinery},
	author = {Sai, Ashish Rajendra and Holmes, Conor and Buckley, Jim and Gear, Andre Le},
	year = {2020},
	note = {event-place: Seoul, Republic of Korea},
	keywords = {smart contracts, software metrics, complexity, inheritance},
	pages = {381--385},
}

@article{zarir_developing_2021-1,
	title = {Developing {Cost}-{Effective} {Blockchain}-{Powered} {Applications}: {A} {Case} {Study} of the {Gas} {Usage} of {Smart} {Contract} {Transactions} in the {Ethereum} {Blockchain} {Platform}},
	volume = {30},
	issn = {1049-331X},
	url = {https://doi.org/10.1145/3431726},
	doi = {10.1145/3431726},
	abstract = {Ethereum is a blockchain platform that hosts and executes smart contracts. Executing a function of a smart contract burns a certain amount of gas units (a.k.a., gas usage). The total gas usage depends on how much computing power is necessary to carry out the execution of the function. Ethereum follows a free-market policy for deciding the transaction fee for executing a transaction. More specifically, transaction issuers choose how much they are willing to pay for each unit of gas (a.k.a., gas price). The final transaction fee corresponds to the gas price times the gas usage. Miners process transactions to gain mining rewards, which come directly from these transaction fees. The flexibility and the inherent complexity of the gas system pose challenges to the development of blockchain-powered applications. Developers of blockchain-powered applications need to translate requests received in the frontend of their application into one or more smart contract transactions. Yet, it is unclear how developers should set the gas parameters of these transactions given that (i) miners are free to prioritize transactions whichever way they wish and (ii) the gas usage of a contract transaction is only known after the transaction is processed and included in a new block. In this article, we analyze the gas usage of Ethereum transactions that were processed between Oct. 2017 and Feb. 2019 (the Byzantium era). We discover that (i) most miners prioritize transactions based on their gas price only, (ii) 25\% of the functions that received at least 10 transactions have an unstable gas usage (coefficient of variation = 19\%), and (iii) a simple prediction model that operates on the recent gas usage of a function achieves an R-Squared of 0.76 and a median absolute percentage error of 3.3\%. We conclude that (i) blockchain-powered application developers should be aware that transaction prioritization in Ethereum is frequently done based solely on the gas price of transactions (e.g., a higher transaction fee does not necessarily imply a higher transaction priority) and act accordingly and (ii) blockchain-powered application developers can leverage gas usage prediction models similar to ours to make more informed decisions to set the gas price of their transactions. Lastly, based on our findings, we list and discuss promising avenues for future research.},
	number = {3},
	journal = {ACM Trans. Softw. Eng. Methodol.},
	author = {Zarir, Abdullah A. and Oliva, Gustavo A. and Jiang, Zhen M. (Jack) and Hassan, Ahmed E.},
	month = mar,
	year = {2021},
	note = {Place: New York, NY, USA
Publisher: Association for Computing Machinery},
	keywords = {Ethereum, blockchain, smart contracts, Gas usage},
}

@inproceedings{rocha_preliminary_2018,
	address = {New York, NY, USA},
	series = {{WETSEB} '18},
	title = {Preliminary {Steps} towards {Modeling} {Blockchain} {Oriented} {Software}},
	isbn = {978-1-4503-5726-5},
	url = {https://doi.org/10.1145/3194113.3194123},
	doi = {10.1145/3194113.3194123},
	abstract = {Even though blockchain is mostly popular for its cryptocurrency, smart contracts have become a very prominent blockchain application. Smart contracts are like classes that can be called by client applications outside the blockchain. Therefore it is possible to develop blockchain-oriented software (BOS) that implements part of the business logic in the blockchain by using smart contracts. Currently, there is no design standard to model BOS. Since modeling is an important part of designing a software, developers may struggle to plan their BOS. In this paper, we show three complementary modeling approaches based on well-known software engineering models and apply them to a BOS example. Our goal is to start the discussion on specialized blockchain modeling notations.},
	booktitle = {Proceedings of the 1st {International} {Workshop} on {Emerging} {Trends} in {Software} {Engineering} for {Blockchain}},
	publisher = {Association for Computing Machinery},
	author = {Rocha, Henrique and Ducasse, Stéphane},
	year = {2018},
	note = {event-place: Gothenburg, Sweden},
	keywords = {blockchain, smart contracts, BPMN, ER model, modeling, UML},
	pages = {52--57},
}

@inproceedings{tikhomirov_smartcheck_2018,
	address = {New York, NY, USA},
	series = {{WETSEB} '18},
	title = {{SmartCheck}: {Static} {Analysis} of {Ethereum} {Smart} {Contracts}},
	isbn = {978-1-4503-5726-5},
	url = {https://doi.org/10.1145/3194113.3194115},
	doi = {10.1145/3194113.3194115},
	abstract = {Ethereum is a major blockchain-based platform for smart contracts - Turing complete programs that are executed in a decentralized network and usually manipulate digital units of value. Solidity is the most mature high-level smart contract language. Ethereum is a hostile execution environment, where anonymous attackers exploit bugs for immediate financial gain. Developers have a very limited ability to patch deployed contracts. Hackers steal up to tens of millions of dollars from flawed contracts, a well-known example being "The DAO", broken in June 2016. Advice on secure Ethereum programming practices is spread out across blogs, papers, and tutorials. Many sources are outdated due to a rapid pace of development in this field. Automated vulnerability detection tools, which help detect potentially problematic language constructs, are still underdeveloped in this area.We provide a comprehensive classification of code issues in Solidity and implement SmartCheck - an extensible static analysis tool that detects them1. SmartCheck translates Solidity source code into an XML-based intermediate representation and checks it against XPath patterns. We evaluated our tool on a big dataset of real-world contracts and compared the results with manual audit on three contracts. Our tool reflects the current state of knowledge on Solidity vulnerabilities and shows significant improvements over alternatives. SmartCheck has its limitations, as detection of some bugs requires more sophisticated techniques such as taint analysis or even manual audit. We believe though that a static analyzer should be an essential part of contract developers' toolbox, letting them fix simple bugs fast and allocate more effort to complex issues.},
	booktitle = {Proceedings of the 1st {International} {Workshop} on {Emerging} {Trends} in {Software} {Engineering} for {Blockchain}},
	publisher = {Association for Computing Machinery},
	author = {Tikhomirov, Sergei and Voskresenskaya, Ekaterina and Ivanitskiy, Ivan and Takhaviev, Ramil and Marchenko, Evgeny and Alexandrov, Yaroslav},
	year = {2018},
	note = {event-place: Gothenburg, Sweden},
	keywords = {smart contracts, ethereum, solidity, static analysis, bug detection},
	pages = {9--16},
}

@inproceedings{tiansong_design_2020,
	address = {New York, NY, USA},
	series = {{ICIIP} '19},
	title = {Design and {Implementation} of {Second}-{Hand} {Goods} {Renting} {System} {Based} {On} {Ethereum} {Smart} {Contract}},
	isbn = {978-1-4503-6191-0},
	url = {https://doi.org/10.1145/3378065.3378131},
	doi = {10.1145/3378065.3378131},
	abstract = {Ethereum blockchain is a revolutionary decentralized database technology on the Internet, with the characteristics of data tamperability, disintermediation, autonomy, traceability, point-to-point transaction, programmable and so on. Its emergence has an important impact on the development of many traditional industries. This paper analyzes the shortcomings of the traditional second-hand goods rental system and uses the blockchain technology to design the second-hand goods renting system based on ethereum smart contract. It introduces the background of blockchain and Ethereum smart contract, gives the overall framework of system design, and specifically describes the three parts of the system: blockchain module, smart contract module and the front end of DAPP, and the problems of combining blockchain and rental system are analyzed to provide a reference for better applications in the future.},
	booktitle = {Proceedings of the 4th {International} {Conference} on {Intelligent} {Information} {Processing}},
	publisher = {Association for Computing Machinery},
	author = {Tiansong, Li and Yu, Liu},
	year = {2020},
	note = {event-place: China, China},
	keywords = {Blockchain, Ethereum, Smart contract, Rental system, Second-hand goods},
	pages = {346--351},
}

@inproceedings{ibba_smart_2023,
	address = {New York, NY, USA},
	series = {{WETSEB} '22},
	title = {A {Smart} {Contracts} {Repository} for {Top} {Trending} {Contracts}},
	isbn = {978-1-4503-9331-7},
	url = {https://doi.org/10.1145/3528226.3528374},
	doi = {10.1145/3528226.3528374},
	abstract = {Blockchain technology spread very quickly during the last few years and has become one of the most popular trends among the research and developers community. In particular, the Ethereum blockchain is one of the most supported and used for developing smart contracts, which are informatics protocols that provide a higher level of security than traditional contracts and reduce other transaction costs associated with the bargaining practice. Nowadays, the transaction number associated with smart contracts deploying increased widely, and it is difficult for researchers and developers to keep track of programming trends. This work proposes a dataset containing only specific categories of smart contracts associated with the most popular trends of the last five years. Mainly, the proposed collection of programs contains Token and Non-Fungible-Token programs, whose popularity has increased a lot since their first appearance on the blockchain.},
	booktitle = {Proceedings of the 5th {International} {Workshop} on {Emerging} {Trends} in {Software} {Engineering} for {Blockchain}},
	publisher = {Association for Computing Machinery},
	author = {Ibba, Giacomo},
	year = {2023},
	note = {event-place: Pittsburgh, Pennsylvania},
	keywords = {blockchain, smart contract, ethereum, categorization, smart contract trends, smart contracts categories},
	pages = {17--20},
}

@inproceedings{hu_hierarchical_2018,
	address = {New York, NY, USA},
	series = {{CryBlock}'18},
	title = {Hierarchical {Interactions} between {Ethereum} {Smart} {Contracts} across {Testnets}},
	isbn = {978-1-4503-5838-5},
	url = {https://doi.org/10.1145/3211933.3211935},
	doi = {10.1145/3211933.3211935},
	abstract = {Although the primary role of decentralized ledgers, such as blockchains in cryptocurrencies, is to store data related to interactions between users to establish trust within incognizant parties, their capabilities allow them to offer more sophisticated functionalities. Smart contracts are decentralized rules that are stored on the blockchain and are executed on demand. Furthermore, smart contracts can interact with each other via message exchange to access data that are stored on them and to call each others' methods. In this paper, we propose a two-level hierarchical architecture that is composed of two types of smart contracts: custodian and client. A custodian contract can deploy on-demand client contract, access their data and call their methods to perform specific updates. Moreover, we develop a framework to allow client contracts to share common variables among all or partial group of the contracts, which may only be mutated by its creator, custodian contracts. We measure the performance of our proposal by developing the proposed contracts and deploying them on three popular testnets.},
	booktitle = {Proceedings of the 1st {Workshop} on {Cryptocurrencies} and {Blockchains} for {Distributed} {Systems}},
	publisher = {Association for Computing Machinery},
	author = {Hu, Yao-Chieh and Lee, Ting-Ting and Chatzopoulos, Dimitris and Hui, Pan},
	year = {2018},
	note = {event-place: Munich, Germany},
	keywords = {Blockchain, Ethereum, Smart Contracts, Testnets},
	pages = {7--12},
}

@inproceedings{atzei_developing_2019,
	address = {New York, NY, USA},
	series = {{ESEC}/{FSE} 2019},
	title = {Developing {Secure} {Bitcoin} {Contracts} with {BitML}},
	isbn = {978-1-4503-5572-8},
	url = {https://doi.org/10.1145/3338906.3341173},
	doi = {10.1145/3338906.3341173},
	abstract = {We present a toolchain for developing and verifying smart contracts that can be executed on Bitcoin. The toolchain is based on BitML, a recent domain-specific language for smart contracts with a computationally sound embedding into Bitcoin. Our toolchain automatically verifies relevant properties of contracts, among which liquidity, ensuring that funds do not remain frozen within a contract forever. A compiler is provided to translate BitML contracts into sets of standard Bitcoin transactions: executing a contract corresponds to appending these transactions to the blockchain. We assess our toolchain through a benchmark of representative contracts.},
	booktitle = {Proceedings of the 2019 27th {ACM} {Joint} {Meeting} on {European} {Software} {Engineering} {Conference} and {Symposium} on the {Foundations} of {Software} {Engineering}},
	publisher = {Association for Computing Machinery},
	author = {Atzei, Nicola and Bartoletti, Massimo and Lande, Stefano and Yoshida, Nobuko and Zunino, Roberto},
	year = {2019},
	note = {event-place: Tallinn, Estonia},
	keywords = {smart contracts, Bitcoin, verification},
	pages = {1124--1128},
}

@inproceedings{li_vulnerability_2022,
	address = {New York, NY, USA},
	series = {{EASE} '22},
	title = {A {Vulnerability} {Detection} {Framework} for {Hyperledger} {Fabric} {Smart} {Contracts} {Based} on {Dynamic} and {Static} {Analysis}},
	isbn = {978-1-4503-9613-4},
	url = {https://doi.org/10.1145/3530019.3531342},
	doi = {10.1145/3530019.3531342},
	abstract = {Hyperledger Fabric is another development of blockchain technology after Ethereum, which is more suitable as an operating platform for smart contracts. However, the testing technology of Hyperledger Fabric smart contracts (also known as chaincode) is not yet mature currently. Based on this, this paper studies the vulnerability detection of Golang chaincodes. Firstly, we summarize 17 kinds of Golang chaincode vulnerabilities by investigating existing research. Secondly, taking the high accuracy of dynamic detection and the high efficiency of static detection into consideration, we propose a chaincode vulnerability detection framework that combines the dynamic symbolic execution and the static abstract syntax tree analysis technology. We also implement a supporting-tool that can detect the above 15 types of vulnerabilities. Finally, we test the tool by 15 chaincodes collected from GitHub and unknown vulnerabilities were detected in 13 projects. The precision turned out to be 91\% after manual inspection. In order to verify the recall rate, we manually inject 30 vulnerabilities into the collected chaincodes and all of them are detected. The evaluation results show the accuracy of the proposed vulnerability detection method for Hyperledger Fabric smart contracts.},
	booktitle = {Proceedings of the {International} {Conference} on {Evaluation} and {Assessment} in {Software} {Engineering} 2022},
	publisher = {Association for Computing Machinery},
	author = {Li, Peiru and Li, Shanshan and Ding, Mengjie and Yu, Jiapeng and Zhang, He and Zhou, Xin and Li, Jingyue},
	year = {2022},
	note = {event-place: Gothenburg, Sweden},
	keywords = {Smart Contract, Abstract Syntax Tree, Hyperledger Fabric, Symbolic Execution, Vulnerability Detection},
	pages = {366--374},
}

@inproceedings{annenkov_concert_2020,
	address = {New York, NY, USA},
	series = {{CPP} 2020},
	title = {{ConCert}: {A} {Smart} {Contract} {Certification} {Framework} in {Coq}},
	isbn = {978-1-4503-7097-4},
	url = {https://doi.org/10.1145/3372885.3373829},
	doi = {10.1145/3372885.3373829},
	abstract = {We present a new way of embedding functional languages into the Coq proof assistant by using meta-programming. This allows us to develop the meta-theory of the language using the deep embedding and provides a convenient way for reasoning about concrete programs using the shallow embedding. We connect the deep and the shallow embeddings by a soundness theorem. As an instance of our approach, we develop an embedding of a core smart contract language into Coq and verify several important properties of a crowdfunding contract based on a previous formalisation of smart contract execution in blockchains.},
	booktitle = {Proceedings of the 9th {ACM} {SIGPLAN} {International} {Conference} on {Certified} {Programs} and {Proofs}},
	publisher = {Association for Computing Machinery},
	author = {Annenkov, Danil and Nielsen, Jakob Botsch and Spitters, Bas},
	year = {2020},
	note = {event-place: New Orleans, LA, USA},
	keywords = {blockchain, smart contracts, certified programming, Coq, software correctness, functional programming languages},
	pages = {215--228},
}

@inproceedings{oliva_mining_2022,
	address = {New York, NY, USA},
	series = {{MSR} '22},
	title = {Mining the {Ethereum} {Blockchain} {Platform}: {Best} {Practices} and {Pitfalls} ({MSR} 2022 {Tutorial})},
	isbn = {978-1-4503-9303-4},
	url = {https://doi.org/10.1145/3524842.3528534},
	doi = {10.1145/3524842.3528534},
	abstract = {Ethereum is the most popular blockchain platform that supports smart contracts. Smart contracts are computing programs that constitute the building blocks of decentralized applications (DApps). DApps are revolutionary and have led to the creation of entirely new businesses (e.g., marketplaces for digital collectibles). Nonetheless, developing and maintaining DApps lead to entirely new research challenges. Empirical research demands high-quality data, which can be obtained by carefully mining Ethereum. In this tutorial, I will discuss best practices and pitfalls associated with mining Ethereum. The tutorial will be organized into three main parts: (i) a brief introduction to Ethereum and its fundamental concepts, (ii) a hands-on mining session, and (iii) a final Q\&amp;A session.},
	booktitle = {Proceedings of the 19th {International} {Conference} on {Mining} {Software} {Repositories}},
	publisher = {Association for Computing Machinery},
	author = {Oliva, Gustavo A.},
	year = {2022},
	note = {event-place: Pittsburgh, Pennsylvania},
	keywords = {ethereum, best practices, DApps, decentralized applications, mining software repositories, MSR, pitfalls},
	pages = {201--202},
}

@inproceedings{park_how_2018,
	address = {New York, NY, USA},
	series = {{ICEGOV} '18},
	title = {How to {Define} {Value} on {Data} under {Blockchain} {Driven} {Open} {Data} {System} for {E}-{Government}},
	isbn = {978-1-4503-5421-9},
	url = {https://doi.org/10.1145/3209415.3209436},
	doi = {10.1145/3209415.3209436},
	abstract = {Many interesting news and activities are going on in the field of blockchain (sometimes called, Distributed Ledger Technology) related technologies like cryptocurrency, Initial Coin Offering (ICO), Internet of Things (IoT), Big Data, Artificial Intelligence (AI, mostly Deep Learning). Not only developing countries but also developed countries need to be concerned about applying blockchain technology to their e-government system. Blockchain technology has brought a very deep innovation over conventional Client Server Trusted Third Party intermediary system to pure peer-to-peer (P2P) based smart contract system. This smart contract based peer-to-peer system allow participants to share data which was not possible under Client Server Trusted Third Party system due to architectural monopoly nature of Client Server. Smart contract concept brought logical conditions to share data among participants but it does not provide any definition about data value. This peer-to-peer based data sharing can be practically possible only under definition of value on data shared. If this definition is vague, then it will be very difficult to share data among participants. Also if this definition is clear, data sharing participants can get much benefit from this data sharing. This data sharing will be only effective from blockchain based architecture.},
	booktitle = {Proceedings of the 11th {International} {Conference} on {Theory} and {Practice} of {Electronic} {Governance}},
	publisher = {Association for Computing Machinery},
	author = {Park, Jong Sou and Kim, Young Sik and Choi, Chang-hak and Shim, JangSup},
	year = {2018},
	note = {event-place: Galway, Ireland},
	keywords = {Blockchain, Distributed Ledger Technology, AI, Deep Learning, E-government, IoT, Value of Data},
	pages = {670--672},
}

@inproceedings{rocha_solidity_2017,
	address = {New York, NY, USA},
	series = {{IWST} '17},
	title = {Solidity {Parsing} {Using} {SmaCC}: {Challenges} and {Irregularities}},
	isbn = {978-1-4503-5554-4},
	url = {https://doi.org/10.1145/3139903.3139906},
	doi = {10.1145/3139903.3139906},
	abstract = {Solidity is a language used to implement smart contracts on a blockchain platform. Since its initial conception in 2014, Solidity has evolved into one of the major languages for the Ethereum platform as well as other blockchain technologies. Due to its popularity, there are many tools specifically designed to handle smart contracts written in Solidity. However, there is a lack of tools for Pharo to handle Solidity contracts. Therefore, we implemented a parser using SmaCC to serve as a base for further developing Solidity support in Pharo. In this paper, we describe the parser creation, the irregularities we found in the Solidity grammar specification, and common practices on how to adapt the grammar to an LR type parser. Our experiences with parsing the Solidity language using SmaCC may help other developers trying to convert similar grammars.},
	booktitle = {Proceedings of the 12th {Edition} of the {International} {Workshop} on {Smalltalk} {Technologies}},
	publisher = {Association for Computing Machinery},
	author = {Rocha, Henrique and Ducasse, Stéphane and Denker, Marcus and Lecerf, Jason},
	year = {2017},
	note = {event-place: Maribor, Slovenia},
	keywords = {Blockchain, Ethereum, Solidity, Parser, SmaCC},
}

@inproceedings{coblenz_smarter_2019-1,
	series = {{WETSEB} '19},
	title = {Smarter {Smart} {Contract} {Development} {Tools}},
	url = {https://doi.org/10.1109/WETSEB.2019.00013},
	doi = {10.1109/WETSEB.2019.00013},
	abstract = {Much recent work focuses on finding bugs and security vulnerabilities in smart contracts written in existing languages. Although this approach may be helpful, it does not address flaws in the underlying programming language, which can facilitate writing buggy code in the first place. We advocate a re-thinking of the blockchain software engineering tool set, starting with the programming language in which smart contracts are written. In this paper, we propose and justify requirements for a new generation of blockchain software development tools. New tools should (1) consider users' needs as a primary concern; (2) seek to facilitate safe development by detecting relevant classes of serious bugs at compile time; (3) as much as possible, be blockchain-agnostic, given the wide variety of different blockchain platforms available, and leverage the properties that are common among blockchain environments to improve safety and developer effectiveness.},
	booktitle = {Proceedings of the 2nd {International} {Workshop} on {Emerging} {Trends} in {Software} {Engineering} for {Blockchain}},
	publisher = {IEEE Press},
	author = {Coblenz, Michael and Sunshine, Joshua and Aldrich, Jonathan and Myers, Brad A.},
	year = {2019},
	note = {event-place: Montreal, Quebec, Canada},
	keywords = {blockchain, smart contracts, usability of programming languages},
	pages = {48--51},
}

@inproceedings{ren_cloak_2022,
	address = {New York, NY, USA},
	series = {{ACSAC} '22},
	title = {Cloak: {Transitioning} {States} on {Legacy} {Blockchains} {Using} {Secure} and {Publicly} {Verifiable} {Off}-{Chain} {Multi}-{Party} {Computation}},
	isbn = {978-1-4503-9759-9},
	url = {https://doi.org/10.1145/3564625.3567995},
	doi = {10.1145/3564625.3567995},
	abstract = {In recent years, the confidentiality of smart contracts has become a fundamental requirement for practical applications. While many efforts have been made to develop architectural capabilities for enforcing confidential smart contracts, a few works arise to extend confidential smart contracts to Multi-Party Computation (MPC), i.e., multiple parties jointly evaluate a transaction off-chain and commit the outputs on-chain without revealing their secret inputs/outputs to each other. However, existing solutions lack public verifiability and require O(n) transactions to enable negotiation or resist adversaries, thus suffering from inefficiency and compromised security. In this paper, we propose Cloak, a framework for enabling Multi-Party Transaction (MPT) on existing blockchains. An MPT refers to transitioning blockchain states by an publicly verifiable off-chain MPC. We identify and handle the challenges of securing MPT by harmonizing TEE and blockchain. Consequently, Cloak secures the off-chain nondeterministic negotiation process (a party joins an MPT without knowing identities or the total number of parties until the MPT proposal settles), achieves public verifiability (the public can validate that the MPT correctly handles the secret inputs/outputs from multiple parties and reads/writes states on-chain), and resists Byzantine adversaries. According to our proof, Cloak achieves better security with only 2 transactions, superior to previous works that achieve compromised security at O(n) transactions cost. By evaluating examples and real-world MPTs, the gas cost of Cloak reduces by 32.4\% on average.},
	booktitle = {Proceedings of the 38th {Annual} {Computer} {Security} {Applications} {Conference}},
	publisher = {Association for Computing Machinery},
	author = {Ren, Qian and Wu, Yingjun and Liu, Han and Li, Yue and Victor, Anne and Lei, Hong and Wang, Lei and Chen, Bangdao},
	year = {2022},
	note = {event-place: Austin, TX, USA},
	pages = {117--131},
}

@inproceedings{li_smart_2021,
	address = {New York, NY, USA},
	series = {{ICBCT} '21},
	title = {Smart {Contract} {Design} for a {Bidding}-{Based} {Supply} {Chain} {System} {Built} on an {Alliance} {Blockchain}},
	isbn = {978-1-4503-8962-4},
	url = {https://doi.org/10.1145/3460537.3460551},
	doi = {10.1145/3460537.3460551},
	abstract = {With the development of marketing, the bidding transactions among enterprises become more and more frequent. The traditional supply chain system cannot meet the needs of enterprise operation, due to the problems like inefficient information sharing, low collaboration, and huge consumption of human resources. To deal with the above problems, the emergence of blockchain technology provides a promising solution. In this paper, we employ an alliance blockchain architecture to realize a bidding-based supply chain system. Specially, we design a smart contract with reasonable contract interaction rules for the whole process a bidding transaction, with two specific functions, i.e., risk early warning and intelligent bid evaluating. In addition, a real alliance blockchain is implemented based on the Hyperledger platform, to validate the feasibility of our designed smart contract.},
	booktitle = {2021 {The} 3rd {International} {Conference} on {Blockchain} {Technology}},
	publisher = {Association for Computing Machinery},
	author = {Li, Xuewei and Chen, Han and Xie, Zhiyuan and Xie, Ying and Yang, Antao},
	year = {2021},
	note = {event-place: Shanghai, China},
	keywords = {Smart contract, Alliance blockchian, Bidding, Supply chain},
	pages = {1--8},
}

@inproceedings{kim_ecench_2022,
	address = {New York, NY, USA},
	series = {{MSR} '22},
	title = {{ECench}: {An} {Energy} {Bug} {Benchmark} of {Ethereum} {Client} {Software}},
	isbn = {978-1-4503-9303-4},
	url = {https://doi.org/10.1145/3524842.3528028},
	doi = {10.1145/3524842.3528028},
	abstract = {With the introduction of smart contacts, Ethereum has become one of the most popular blockchain networks. In the wake of its popularity, an increasing number of Ethereum-based software have been developed. However, the carbon emissions resulting from these software has been pointed out as a global issue. It is necessary to reduce the energy consumed by these software to reduce carbon emissions. Recently, most studies have focused on smart contracts and proposed energy-efficient methods for the development of carbon friendly Ethereum networks. However, in addition to smart contracts, the energy used by client software in Ethereum networks should also be reviewed. This is because the client software performs all functions occurring in the Ethereum network, including smart contracts. Therefore, energy bugs that waste energy in Ethereum client software should be investigated and solved. The first task to enable this is to build an energy bug benchmark of Ethereum client software. This study introduces ECench, an energy bug benchmark of Ethereum client software. ECench includes 507 energy buggy commits from 7 series of client software that are officially operated in the Ethereum network. We carefully collected and manually reviewed them for cleaner commits. A key strength of our benchmark is that it provides eight energy wastage categories, which can serve as a cornerstone for researchers to identify energy waste codes. ECench can provide a valuable starting point for studies on energy reduction and carbon reduction in Ethereum.},
	booktitle = {Proceedings of the 19th {International} {Conference} on {Mining} {Software} {Repositories}},
	publisher = {Association for Computing Machinery},
	author = {Kim, Jinyoung and Kim, Misoo and Lee, Eunseok},
	year = {2022},
	note = {event-place: Pittsburgh, Pennsylvania},
	keywords = {ethereum, benchmark, energy consumption, software engineering},
	pages = {634--638},
}

@inproceedings{yu_blockchain-based_2022,
	address = {New York, NY, USA},
	series = {{ICBTA} 2021},
	title = {Blockchain-{Based} {Supply} {Chain} {Financial} {Services} {Using} {Smart} {Contract}},
	isbn = {978-1-4503-8746-0},
	url = {https://doi.org/10.1145/3510487.3510497},
	doi = {10.1145/3510487.3510497},
	abstract = {Supply chain finance (SCF), a proposal to address financing problems of small and medium enterprises (SMEs), aims to make working capital optimized by utilizing credit and transaction information through cooperation between upstream and downstream in the supply chain. But some demerits such as information asymmetry and the lack of trust in financing scenarios could still be witnessed in supply chain finance. Blockchain technology, with the characteristics of asymmetric encryption, decentralization, nonrepudiation, and conducting transactions without the supervision of a trusted third party, has revolved multiple stages of development. Smart contracts are regarded as an important derivative technology of blockchain, which are automatically executed by the code between multiple parties through the blockchain without relying on a trusted institution. In this paper, we propose a blockchain-based supply chain financial system combining smart contracts and main methods of supply chain financing to solve the disadvantages of SCF. We select three represented financing modes to design financing platforms with the introduction of smart contracts, and present our schemes in the form of specific pseudo code. All financing processes of supply chain are conducted on the basis of ethereum blockchain. This allows SMEs which have difficulty in capital turnover in the short term, or have insufficient credit to get financial loans more easily compared with traditional financing approaches due to merits of blockchain, and also this could facilitate supply chain to improve financing efficiency for SMEs.},
	booktitle = {2021 4th {International} {Conference} on {Blockchain} {Technology} and {Applications}},
	publisher = {Association for Computing Machinery},
	author = {Yu, Xiaocong},
	year = {2022},
	note = {event-place: Xi'an, China},
	keywords = {Blockchain, Smart contracts, SMEs, Supply chain finance},
	pages = {63--69},
}

@inproceedings{porru_blockchain-oriented_2017,
	series = {{ICSE}-{C} '17},
	title = {Blockchain-{Oriented} {Software} {Engineering}: {Challenges} and {New} {Directions}},
	isbn = {978-1-5386-1589-8},
	url = {https://doi.org/10.1109/ICSE-C.2017.142},
	doi = {10.1109/ICSE-C.2017.142},
	abstract = {In this work, we acknowledge the need for software engineers to devise specialized tools and techniques for blockchain-oriented software development. Ensuring effective testing activities, enhancing collaboration in large teams, and facilitating the development of smart contracts all appear as key factors in the future of blockchain-oriented software development.},
	booktitle = {Proceedings of the 39th {International} {Conference} on {Software} {Engineering} {Companion}},
	publisher = {IEEE Press},
	author = {Porru, Simone and Pinna, Andrea and Marchesi, Michele and Tonelli, Roberto},
	year = {2017},
	note = {event-place: Buenos Aires, Argentina},
	keywords = {blockchain, smart contracts, software engineering, cryptocurrencies},
	pages = {169--171},
}

@article{chen_why_2021,
	title = {Why {Do} {Smart} {Contracts} {Self}-{Destruct}? {Investigating} the {Selfdestruct} {Function} on {Ethereum}},
	volume = {31},
	issn = {1049-331X},
	url = {https://doi.org/10.1145/3488245},
	doi = {10.1145/3488245},
	abstract = {The selfdestruct function is provided by Ethereum smart contracts to destroy a contract on the blockchain system. However, it is a double-edged sword for developers. On the one hand, using the selfdestruct function enables developers to remove smart contracts (SCs) from Ethereum and transfers Ethers when emergency situations happen, e.g., being attacked. On the other hand, this function can increase the complexity for the development and open an attack vector for attackers. To better understand the reasons why SC developers include or exclude the selfdestruct function in their contracts, we conducted an online survey to collect feedback from them and summarize the key reasons. Their feedback shows that 66.67\% of the developers will deploy an updated contract to the Ethereum after destructing the old contract. According to this information, we propose a method to find the self-destructed contracts (also called predecessor contracts) and their updated version (successor contracts) by computing the code similarity. By analyzing the difference between the predecessor contracts and their successor contracts, we found five reasons that led to the death of the contracts; two of them (i.e., Unmatched ERC20 Token and Limits of Permission) might affect the life span of contracts. We developed a tool named LifeScope to detect these problems. LifeScope reports 0 false positives or negatives in detecting Unmatched ERC20 Token. In terms of Limits of Permission, LifeScope achieves 77.89\% of F-measure and 0.8673 of AUC in average. According to the feedback of developers who exclude selfdestruct functions, we propose suggestions to help developers use selfdestruct functions in Ethereum smart contracts better.},
	number = {2},
	journal = {ACM Trans. Softw. Eng. Methodol.},
	author = {Chen, Jiachi and Xia, Xin and Lo, David and Grundy, John},
	month = dec,
	year = {2021},
	note = {Place: New York, NY, USA
Publisher: Association for Computing Machinery},
	keywords = {Smart contract, ethereum, empirical study, selfdestruct function},
}

@inproceedings{lu_design_2020,
	address = {New York, NY, USA},
	series = {{ICBTA} 2019},
	title = {Design of {Transaction} {System} for {Remote} {Sensing} {Cloud} {Service} {Based} on {Blockchain}},
	isbn = {978-1-4503-7743-0},
	url = {https://doi.org/10.1145/3376044.3376056},
	doi = {10.1145/3376044.3376056},
	abstract = {With the development of RS (Remote Sensing) technology and RS application, RS industry is faced with opportunities and challenges in expanding the application fields. There is a high maintenance costs, time-consuming, low transaction processing efficiency, user privacy leaks and so on in the traditional centralized RSCS (Remote Sensing Cloud Services) trading mode. Meanwhile, it can't adapt to high-frequency and real-time trading scenario. In order to realize efficient, fair and transparent trade and protect the privacy of users, this paper proposed transaction system mode for RSCS based on blockchain. The user may call or produce the same task multiple times in the traditional transaction process. In this case, the system allocates and recycles resources frequently. It has caused unnecessary overhead and wasted the time of user. Therefore, we proposed AS (Algorithm Service) transaction mode combine smart contract. We can achieve decentralized P2P trade among through smart contract. The AS can reduce user's repetitive work, improve the efficiency of transaction processing, and improve user experience.},
	booktitle = {Proceedings of the 2019 2nd {International} {Conference} on {Blockchain} {Technology} and {Applications}},
	publisher = {Association for Computing Machinery},
	author = {Lu, Yang and Wang, Xueheng and Wei, Renle and Gao, Yihua and Huang, Zhenyue and Xie, Yi},
	year = {2020},
	note = {event-place: Xi'an, China},
	keywords = {blockchain, smart contract, P2P trade, privacy leaks, Remote Sensing Cloud Services},
	pages = {81--85},
}

@inproceedings{li_exploring_2020,
	address = {New York, NY, USA},
	series = {{EASE} '20},
	title = {Exploring the {Challenges} of {Developing} and {Operating} {Consortium} {Blockchains}: {A} {Case} {Study}},
	isbn = {978-1-4503-7731-7},
	url = {https://doi.org/10.1145/3383219.3383276},
	doi = {10.1145/3383219.3383276},
	abstract = {Blockchain and smart contracts are being embraced by more and more industrial practitioners in multiple domains including agriculture, manufacturing, and healthcare. As a distributed, immutable, and partly public ledger, the consortium blockchain demonstrates its potential to enable trustworthy interoperability and collaboration between organizations. However, the mismatch between the unruled software engineering practices and the increased interest of the consortium blockchain technology may pose threats to the quality of systems implemented. To mitigate the possible threats, this study takes the angle of software engineering to systematically understand the challenges and possible solutions in terms of developing and operating a consortium blockchain-based system. For this purpose, we conducted a case study on a typical consortium blockchain-based system and exhaustively collected the data by two rounds in-depth interviews on practitioners of different roles in the case project. Based on the data analysis, eight pairs of challenges and potential solutions were identified, which cover the phases of the development and operation of consortium blockchains. Moreover, we also captured two implications after further analysis of the findings, which worth the special attention of researchers in the near future, i.e. DevOps and microservices for blockchain or smart contracts.},
	booktitle = {Proceedings of the {Evaluation} and {Assessment} in {Software} {Engineering}},
	publisher = {Association for Computing Machinery},
	author = {Li, Shanshan and Xu, Qianwen and Hou, Peiyu and Chen, Xiudi and Wang, Yanze and Zhang, He and Rong, Guoping},
	year = {2020},
	note = {event-place: Trondheim, Norway},
	keywords = {smart contracts, Consortium blockchain, DevOps, microservices},
	pages = {398--404},
}

@inproceedings{yu_mscrcmulti-layer_2022,
	address = {New York, NY, USA},
	series = {{ICBTA} 2021},
	title = {{MSCRC}:{Multi}-{Layer} {Sidechain} with {Compressed} {Rootchain} {Blocks}},
	isbn = {978-1-4503-8746-0},
	url = {https://doi.org/10.1145/3510487.3510496},
	doi = {10.1145/3510487.3510496},
	abstract = {With the development of blockchain technology, people are safety and privacy guaranteed to own digital assets benefited from digital economy system. Meanwhile, the problems have risen that how can we make interactions between different digital economy systems, and, more importantly, how could our assets kept safe as it claims to be. To address this problem, we present our protocol based on a trusted root chain, Ethereum for example. Organization or Government agencies with independent digital economy systems are connected in a tree-like hierarchy with smart contracts to the root chain. User assets can freely flow from root chain to any digital economy system with safety guaranteed and timely withdraw strategy. We release the burden of root chain by periodic write headers through smart contracts. A fraud proof challenge solution and security deposit strategy are presented to solve the data access problem. With this protocol, diversity of digital assets system can be built without efforts to earn trusts from public, and the connections between them are easily implemented since they are inherited from the same root chain.},
	booktitle = {2021 4th {International} {Conference} on {Blockchain} {Technology} and {Applications}},
	publisher = {Association for Computing Machinery},
	author = {Yu, Fangjian and Wu, Fengheng and Feng, Xueqi and Wang, Tengrui and Wu, Xiaohua},
	year = {2022},
	note = {event-place: Xi'an, China},
	keywords = {blockchain, fraud proof, multi-layers, sidechain},
	pages = {58--62},
}

@inproceedings{chiu_towards_2021,
	address = {New York, NY, USA},
	series = {{SAC} '21},
	title = {Towards {Decentralized} {Bicycle} {Insurance} {System} {Based} on {Blockchain}},
	isbn = {978-1-4503-8104-8},
	url = {https://doi.org/10.1145/3412841.3441907},
	doi = {10.1145/3412841.3441907},
	abstract = {Having a transparent and convenient insurance system is desired by users, but the insurance industry currently plays differently. For example, when users ask for a fast and simple self-service, the industry may need a long and cumbersome process, and sometimes users are not sure whether they have a fair deal according to their contract. With the aim of enhancing the current bicycle insurance system in Denmark, we investigate the local market and develop BlockCycle, which is a blockchain-based bicycle insurance system. The basic idea is that insurance companies transform their insurance products into a smart contract, including the criteria of applying the product and the eligibility of compensating into program logic. When a smart contract is deployed, the immutability can ensure the deal integrity and protect both users and insurance companies from the threat of unauthorized manipulation. In addition, blockchain can provide a secure and simple way to decentralize data and services, which enables high availability and reliability. Our experimental results indicate the viability of our system.},
	booktitle = {Proceedings of the 36th {Annual} {ACM} {Symposium} on {Applied} {Computing}},
	publisher = {Association for Computing Machinery},
	author = {Chiu, Wei-Yang and Meng, Weizhi},
	year = {2021},
	note = {event-place: Virtual Event, Republic of Korea},
	keywords = {blockchain, smart contract, decentralized application, bicycle insurance, data integrity},
	pages = {249--256},
}

@article{hoang_random_2022,
	title = {Random {Testing} of a {Higher}-{Order} {Blockchain} {Language} ({Experience} {Report})},
	volume = {6},
	url = {https://doi.org/10.1145/3547653},
	doi = {10.1145/3547653},
	abstract = {We describe our experience of using property-based testing—an approach for automatically generating random inputs to check executable program specifications—in a development of a higher-order smart contract language that powers a state-of-the-art blockchain with thousands of active daily users. We outline the process of integrating QuickChick—a framework for property-based testing built on top of the Coq proof assistant—into a real-world language implementation in OCaml. We discuss the challenges we have encountered when generating well-typed programs for a realistic higher-order smart contract language, which mixes purely functional and imperative computations and features runtime resource accounting. We describe the set of the language implementation properties that we tested, as well as the semantic harness required to enable their validation. The properties range from the standard type safety to the soundness of a control- and type-flow analysis used by the optimizing compiler. Finally, we present the list of bugs discovered and rediscovered with the help of QuickChick and discuss their severity and possible ramifications.},
	number = {ICFP},
	journal = {Proc. ACM Program. Lang.},
	author = {Hoang, Tram and Trunov, Anton and Lampropoulos, Leonidas and Sergey, Ilya},
	month = aug,
	year = {2022},
	note = {Place: New York, NY, USA
Publisher: Association for Computing Machinery},
	keywords = {smart contracts, definitional interpreters, higher-order control-flow analysis, property-based testing, QuickChick, random testing, Scilla},
}

@inproceedings{rasti_symboleo2sc_2022,
	address = {New York, NY, USA},
	series = {{MODELS} '22},
	title = {{Symboleo2SC}: {From} {Legal} {Contract} {Specifications} to {Smart} {Contracts}},
	isbn = {978-1-4503-9466-6},
	url = {https://doi.org/10.1145/3550355.3552407},
	doi = {10.1145/3550355.3552407},
	abstract = {Smart contracts (SCs) are software systems that monitor and control the execution of legal contracts to ensure compliance with the contracts' terms and conditions. They often exploit Internet-of-Things technologies to support their monitoring functions, and blockchain technology to ensure the integrity of their data. Ethereum and business blockchain platforms, such as Hyperledger Fabric, are popular choices for SC development. However, there is a gap in the knowledge of SCs between developers and legal experts. Symboleo is a formal specification language for legal contracts that was introduced to address this issue. Symboleo specifications directly encode legal concepts such as parties, obligations, and powers. In this paper, we propose a tool-supported method for translating Symboleo specifications into smart contracts. We have extended the current Symboleo IDE, implemented the ontology and semantics of Symboleo into a reusable library, and developed the Symboleo2SC tool to generate Hyperledger Fabric code exploiting this library. Symboleo2SC was evaluated with three sample contracts. The results shows that legal contract specifications in Symboleo can be fully converted to SCs for monitoring purposes. Moreover, Symboleo2SC helps simplify the SC development process, saves development effort, and helps reduce risks of coding errors.},
	booktitle = {Proceedings of the 25th {International} {Conference} on {Model} {Driven} {Engineering} {Languages} and {Systems}},
	publisher = {Association for Computing Machinery},
	author = {Rasti, Aidin and Amyot, Daniel and Parvizimosaed, Alireza and Roveri, Marco and Logrippo, Luigi and Anda, Amal Ahmed and Mylopoulos, John},
	year = {2022},
	note = {event-place: Montreal, Quebec, Canada},
	keywords = {blockchain, code generation, smart contracts, domain-specific languages, legal ontology},
	pages = {300--310},
}

@inproceedings{liu_novel_2020,
	address = {New York, NY, USA},
	series = {{IECC} '20},
	title = {A {Novel} {Supply} {Chain} {Model} {Based} on {Smart} {Contract}},
	isbn = {978-1-4503-7770-6},
	url = {https://doi.org/10.1145/3409934.3409942},
	doi = {10.1145/3409934.3409942},
	abstract = {Facing on bursting of the huge quantity of trade, the problem of finance by micro and small firms, the expansion of business development of core enterprise in supply chain, the development of comprehensive finance services, it is not well worked by traditional ways. Moreover it is more and more restricting the development of supply chain. Considering the advantages of automatic executing and high efficiency of smart contract, the feature of decentralization, security, trustworthiness and anti-tampering of blockchain, it was presented a novel supply chain model based on smart contract and blockchain for solving the problem totally. The model relied on the core enterprise of supply chain, integrated the upstream and downstream industries, constructed a consortium chain, that consisted of core enterprise, financial institutions, suppliers and dealers, formed an encrypted credit named ET (Electronic Trust) based on the trustworthiness of the trust industries chain. Actually, ET is equaled to the actual credit, it could be paid for the suppliers according to the cargo value before the last settlement. So the ET could combine the virtual and actual capital. Thus it also could further solve the common pain points of supply chain.},
	booktitle = {Proceedings of the 2nd {International} {Electronics} {Communication} {Conference}},
	publisher = {Association for Computing Machinery},
	author = {Liu, Haitao},
	year = {2020},
	note = {event-place: Singapore, Singapore},
	keywords = {blockchain, smart contract, ET, supply chain},
	pages = {115--120},
}

@article{zheng_securing_2022,
	title = {Securing the {Ethereum} from {Smart} {Ponzi} {Schemes}: {Identification} {Using} {Static} {Features}},
	issn = {1049-331X},
	url = {https://doi.org/10.1145/3571847},
	doi = {10.1145/3571847},
	abstract = {Malware detection approaches have been extensively studied for traditional software systems. However, the development of blockchain technology has promoted the birth of a new type of software system–decentralized applications. Composed of smart contracts, a type of application that implements the Ponzi scheme logic (called smart Ponzi schemes) has caused irreversible loss and hindered the development of blockchain technology. These smart contracts generally had a short life but involved a large amount of money. Whereas identification of these Ponzi schemes before causing financial loss has been significantly important, existing methods suffer from three main deficiencies, i.e., the insufficient dataset, the reliance on the transaction records, and the low accuracy. In this study, we first build a larger dataset. Then, a large number of features from multiple views, including bytecode, semantic, and developers, are extracted. These features are independent of the transaction records. Furthermore, we leveraged machine learning methods to build our identification model, i.e., Multi-view Cascade Ensemble model (MulCas). The experiment results show that MulCas can achieve higher performance and robustness in the scope of our dataset. Most importantly, the proposed method can identify smart Ponzi scheme at the creation time.},
	journal = {ACM Trans. Softw. Eng. Methodol.},
	author = {Zheng, Zibin and Chen, Weili and Zhong, Zhijie and Chen, Zhiguang and Lu, Yutong},
	month = nov,
	year = {2022},
	note = {Place: New York, NY, USA
Publisher: Association for Computing Machinery},
	keywords = {Blockchain, Ethereum, Malware Detection, Ponzi Schemes},
	annote = {Just Accepted},
}

@inproceedings{liu_fail-safe_2020,
	address = {New York, NY, USA},
	series = {{ASIA} {CCS} '20},
	title = {Fail-{Safe} {Watchtowers} and {Short}-{Lived} {Assertions} for {Payment} {Channels}},
	isbn = {978-1-4503-6750-9},
	url = {https://doi.org/10.1145/3320269.3384716},
	doi = {10.1145/3320269.3384716},
	abstract = {The recent development of payment channels and their extensions (e.g., state channels) provides a promising scalability solution for blockchains which allows untrusting parties to transact off-chain and resolve potential disputes via on-chain smart contracts. To protect participants who have no constant access to the blockchain, a watching service named as watchtower is proposed – a third-party entity obligated to monitor channel states (on behalf of the participants) and correct them on-chain if necessary. Unfortunately, currently proposed watchtower schemes suffer from multiple security and efficiency drawbacks.In this paper, we explore the design space behind watchtowers. We propose a novel watching service named as fail-safe watchtowers. In contrast to prior proposed watching services, our fail-safe watchtower does not watch on-chain smart contracts constantly. Instead, it only sends a single on-chain message periodically confirming or denying the final states of channels being closed. Our watchtowers can easily handle a large number of channels, are privacy-preserving, and fail-safe tolerating multiple attack vectors. Furthermore, we show that watchtowers (in general) may be an option economically unjustified for multiple payment scenarios and we introduce a simple, yet powerful concept of short-lived assertions which can mitigate misbehaving parties in these scenarios.},
	booktitle = {Proceedings of the 15th {ACM} {Asia} {Conference} on {Computer} and {Communications} {Security}},
	publisher = {Association for Computing Machinery},
	author = {Liu, Bowen and Szalachowski, Pawel and Sun, Siwei},
	year = {2020},
	note = {event-place: Taipei, Taiwan},
	keywords = {blockchain, smart contract, payment channel, short-lived assertions, watchtower},
	pages = {506--518},
}

@inproceedings{atapattu_architectural_2018,
	address = {New York, NY, USA},
	series = {{SIGITE} '18},
	title = {An {Architectural} {Analysis} of a {Blockchain}-{Based} {Web} {Application} for {Supporting} {Smart} {Contracts} and {Hardening} {Security}},
	isbn = {978-1-4503-5954-2},
	url = {https://doi.org/10.1145/3241815.3241827},
	doi = {10.1145/3241815.3241827},
	abstract = {The advent of Blockchain Technology allows us to develop a Decentralized Application called DApp on peer-to-peer network, which can harden changes of contracts in the DApp and denial of service (DoS) attacks to the DApp. We reengineer an App to a DApp allowing smart contracts, and compare the given legacy App and the target DApp. We conclude that DApp is not a separate application but a complementary application of the current App by comparing their architectures.},
	booktitle = {Proceedings of the 19th {Annual} {SIG} {Conference} on {Information} {Technology} {Education}},
	publisher = {Association for Computing Machinery},
	author = {Atapattu, Charith and Chung, Sam},
	year = {2018},
	note = {event-place: Fort Lauderdale, Florida, USA},
	keywords = {blockchain, smart contract, app, c/s, dapp, p2p},
	pages = {186},
}

@inproceedings{pereira_genesis_2019,
	address = {New York, NY, USA},
	series = {{ICEGOV} '19},
	title = {The {Genesis} of the {Revolution} in {Contract} {Law}: {Smart} {Legal} {Contracts}},
	isbn = {978-1-4503-6644-1},
	url = {https://doi.org/10.1145/3326365.3326414},
	doi = {10.1145/3326365.3326414},
	abstract = {Smart Contracts, which derive from Blockchain technology, are one of the most peremptory applications of this. However, as it is a very recent technology, investors' uncertainty and fear makes their development slowly and cautiously. There are, therefore, a number of questions and legal problems that arise. The paper identifies what revolution Blockchain adds to the contractual processes, exploring its potential and analysing the main legal difficulties it is facing. It seeks the analysis of the pros and cons of this new technology, specially the questions about enforcement, nature and form, consent and (in) flexibility. The purpose of this investigation is to recognize the nature of this technology and its impact on the Contract Law. And because of this, the impact and challenges that it brings to the Governance of a nation as well as on private companies and individuals. Therefore this study is based mostly in the review of already existing embryonic laws about Blockchain technology or similar, authors that wrote about Smart Contracts and also some recent news to show the social and economic impact in the world. In short, the subject that this paper presents is the beginning of a true technological, social and economic revolution that must be anticipated and prepared by the law and those who work with it.},
	booktitle = {Proceedings of the 12th {International} {Conference} on {Theory} and {Practice} of {Electronic} {Governance}},
	publisher = {Association for Computing Machinery},
	author = {Pereira, José Carlos},
	year = {2019},
	note = {event-place: Melbourne, VIC, Australia},
	keywords = {Blockchain, contract, e-commerce, law, legal, revolution, smart, Technology},
	pages = {374--377},
}

@article{he_tokenaware_2023,
	title = {{TokenAware}: {Accurate} and {Efficient} {Bookkeeping} {Recognition} for {Token} {Smart} {Contracts}},
	volume = {32},
	issn = {1049-331X},
	url = {https://doi.org/10.1145/3560263},
	doi = {10.1145/3560263},
	abstract = {Tokens have become an essential part of blockchain ecosystem, so recognizing token transfer behaviors is crucial for applications depending on blockchain. Unfortunately, existing solutions cannot recognize token transfer behaviors accurately and efficiently because of their incomplete patterns and inefficient designs. This work proposes TokenAware, a novel online system for recognizing token transfer behaviors. To improve accuracy, TokenAware infers token transfer behaviors from modifications of internal bookkeeping of a token smart contract for recording the information of token holders (e.g., their addresses and shares). However, recognizing bookkeeping is challenging, because smart contract bytecode does not contain type information. TokenAware overcomes the challenge by first learning the instruction sequences for locating basic types and then deriving the instruction sequences for locating sophisticated types that are composed of basic types. To improve efficiency, TokenAware introduces four optimizations. We conduct extensive experiments to evaluate TokenAware with real blockchain data. Results show that TokenAware can automatically identify new types of bookkeeping and recognize 107,202 tokens with 98.7\% precision. TokenAware with optimizations merely incurs 4\% overhead, which is 1/345 of the overhead led by the counterpart with no optimization. Moreover, we develop an application based on TokenAware to demonstrate how it facilitates malicious behavior detection.},
	number = {1},
	journal = {ACM Trans. Softw. Eng. Methodol.},
	author = {He, Zheyuan and Song, Shuwei and Bai, Yang and Luo, Xiapu and Chen, Ting and Zhang, Wensheng and He, Peng and Li, Hongwei and Lin, Xiaodong and Zhang, Xiaosong},
	month = feb,
	year = {2023},
	note = {Place: New York, NY, USA
Publisher: Association for Computing Machinery},
	keywords = {Ethereum, smart contract, bookkeeping recognition, token},
}

@article{corradini_engineering_2022,
	title = {Engineering {Trustable} and {Auditable} {Choreography}-{Based} {Systems} {Using} {Blockchain}},
	volume = {13},
	issn = {2158-656X},
	url = {https://doi.org/10.1145/3505225},
	doi = {10.1145/3505225},
	abstract = {A key challenge in engineering distributed systems consists in the integration into their development of a decentralised infrastructure allowing the system participants to trust each other. In this article, we face such a challenge by proposing a model-driven methodology and a related framework to support the engineering of trustable and auditable systems. The approach is based on choreography diagrams specified in the Business Process Model and Notation standard, describing the interactions that should occur among the distributed components of systems. We support the whole lifecycle of choreographies, from their modelling to their distributed execution and auditing. The framework, based on blockchain technology, is named ChorChain. More specifically, ChorChain takes as input a BPMN choreography model and automatically translates it into a Solidity smart contract. The smart contract permits us to enforce the interactions among the cooperating components as prescribed by the choreography model. By leveraging on the auditability of blockchain, ChorChain also supports the activity of auditors continuously. In such a way, ChorChain enables auditors to get some degree of assurance on what happens simultaneously with, or shortly after, information disclosure. We assess the feasibility and effectiveness of the proposed methodology and framework through experiments conducted on the Rinkeby Ethereum Testnet.},
	number = {3},
	journal = {ACM Trans. Manage. Inf. Syst.},
	author = {Corradini, Flavio and Marcelletti, Alessandro and Morichetta, Andrea and Polini, Andrea and Re, Barbara and Tiezzi, Francesco},
	month = feb,
	year = {2022},
	note = {Place: New York, NY, USA
Publisher: Association for Computing Machinery},
	keywords = {blockchain, BPMN, auditing, choreography, execution, trust},
}

@inproceedings{barati_developing_2019,
	address = {New York, NY, USA},
	series = {{UCC}'19},
	title = {Developing {GDPR} {Compliant} {User} {Data} {Policies} for {Internet} of {Things}},
	isbn = {978-1-4503-6894-0},
	url = {https://doi.org/10.1145/3344341.3368812},
	doi = {10.1145/3344341.3368812},
	abstract = {With recent adoption of Internet of Things (IoT) technologies and their use in industry, user data privacy concerns remain a major preoccupation of regulation bodies. The European General Data Protection Regulation (GDPR) enables users to control their data and be informed about any devices involved in collecting and processing this data. The overall objective is to enable individuals to have full rights and control over their data assets and to be able to transfer their data without any unmitigated risk. Blockchains provide the benefits of a distributed ledger that can securely manage digital transactions – where the centralisation of data is eliminated. Blockchains have recently entered as an enabling technology into the IoT market, and used in a variety of different application areas. Blockchains enable the implementation of a more trusted system capable of processing operations between IoT services and sources of data. In smart buildings, for example, Blockchains support the formation of smart contracts as a means to give transactional capabilities to IoT devices, allowing users to keep data ownership and privacy using an immutable dataset. We describe how Blockchain technology can be used to develop an audit trail of data generated in IoT devices, enabling GDPR rules to be verified on such a trail. We describe how to translate a set of such rules into smart contracts to protect personal data in a transparent and automatic way.},
	booktitle = {Proceedings of the 12th {IEEE}/{ACM} {International} {Conference} on {Utility} and {Cloud} {Computing}},
	publisher = {Association for Computing Machinery},
	author = {Barati, Masoud and Petri, Ioan and Rana, Omer F.},
	year = {2019},
	note = {event-place: Auckland, New Zealand},
	keywords = {blockchain, smart contracts, general data protection regulation, internet-of-things, smart building, user privacy},
	pages = {133--141},
}

@inproceedings{bindra_indoor_2019,
	address = {New York, NY, USA},
	series = {{BuildSys} '19},
	title = {Indoor {Path} {Planning} and {Decentralized} {Access} {Control} in {Commercial} {Buildings}},
	isbn = {978-1-4503-7005-9},
	url = {https://doi.org/10.1145/3360322.3361013},
	doi = {10.1145/3360322.3361013},
	abstract = {We describe a methodology for indoor path planning and controlling access to different spaces, equipment sensing and control points in a commercial building. We implement three services for sensitivity-cost quantification of building spaces, path planning, and decentralized access control through smart contracts. These services rely on information that is captured in the Brick and BOT models of a building. We develop a calendar application on top of these services to show that the proposed system can greatly reduce the administration overhead in a real commercial building while providing fine-grained access control.},
	booktitle = {Proceedings of the 6th {ACM} {International} {Conference} on {Systems} for {Energy}-{Efficient} {Buildings}, {Cities}, and {Transportation}},
	publisher = {Association for Computing Machinery},
	author = {Bindra, Leepakshi and Eng, Kalvin and Ou, Yancheng and Ardakanian, Omid and Stroulia, Eleni},
	year = {2019},
	note = {event-place: New York, NY, USA},
	pages = {385--386},
}

@inproceedings{chao_study_2022-1,
	address = {New York, NY, USA},
	series = {{MISNC} '22},
	title = {The {Study} of {DeFi} in {Virtual} {Community} and {Financial} {Supervision}},
	isbn = {978-1-4503-9843-5},
	url = {https://doi.org/10.1145/3561278.3561297},
	doi = {10.1145/3561278.3561297},
	abstract = {In recent years, when the world economic activity was affected by the epidemic, it was very active in the virtual world. Since Facebook announced the development of the Metaverse, its related applications and services have instantly become hot issues. Although it may take a few years for the Metaverse to become popular as a social platform today, its impact on future community development will be significant. On the other hand, since Ethereum pioneered smart contracts in the blockchain, the Ethereum Virtual Machine (EVM) can connect public nodes scattered throughout the network into a virtual machine to execute Turing-complete programs, and the issue of decentralization has gradually spread. Today, as the application of smart contracts becomes more and more extensive and innovative, such as the decentralized architecture and applications of NFT, DeFi, GameFi, DApp, DAO, DEX, its influence has gradually expanded from the virtual world to physical applications, and also has impacts on real financial applications. The recent burst of NFT and DeFi addressed this issue. There are some gaps between reality and hype, and it is a lesson just like e-commerce burst some 20 years ago. A well format regulation and supervision seem required. However, the challenge for financial supervision today is the decentralized application and anonymity. This paper discusses the innovations in communities that related to decentralized financial services in the blockchain. And the blockchain financial supervision issues that within the tolerable range of risk and impact to both virtual and real world.},
	booktitle = {Proceedings of the 9th {Multidisciplinary} {International} {Social} {Networks} {Conference}},
	publisher = {Association for Computing Machinery},
	author = {Chao, Chian-Hsueng and Ting, I-Hsien and Tseng, Yi-Jun and Wang, Bing-Wen and Wang, Shin-Hua and Wang, Yu-Qing},
	year = {2022},
	note = {event-place: Matsuyama, Japan},
	keywords = {Blockchain, Smart Contract, Distributed Ledger, Virtual Community, Decentralized Finance, Financial Supervision},
	pages = {74--80},
}

@inproceedings{ross_policy_2020,
	address = {New York, NY, USA},
	series = {{SIGMIS}-{CPR}'20},
	title = {Policy {Formation} {Without} {Authority}: {Towards} {Resilient} {Financial} {Infrastructure} for {Emerging} {Economies}},
	isbn = {978-1-4503-7130-8},
	url = {https://doi.org/10.1145/3378539.3393849},
	doi = {10.1145/3378539.3393849},
	abstract = {We document the design and development of a modular blockchain IT artefact, affording stakeholders in emerging economies the ability to deploy and collectively govern resilient financial infrastructure. The artefact comprises a smart contract system implementing an iterative policy framework through which stakeholders engage in collective deliberation on the compilation, redistribution and inflation of a native asset class. Stakeholders submit and elect 'schemes' implementing policy measures, such as taxation, through voting sessions weighted by 'reputation scoring'. We aim to contribute towards the emerging discourse on the utility of blockchain technology in emerging economies.},
	booktitle = {Proceedings of the 2020 on {Computers} and {People} {Research} {Conference}},
	publisher = {Association for Computing Machinery},
	author = {Ross, Omri and Jensen, Johannes Rude},
	year = {2020},
	note = {event-place: Nuremberg, Germany},
	keywords = {blockchain technology, decentralized autonomous organization, digital infrastructure, public policy},
	pages = {36--37},
}

@article{ma_pied-piper_2022,
	title = {Pied-{Piper}: {Revealing} the {Backdoor} {Threats} in {Ethereum} {ERC} {Token} {Contracts}},
	issn = {1049-331X},
	url = {https://doi.org/10.1145/3560264},
	doi = {10.1145/3560264},
	abstract = {With the development of decentralized networks, smart contracts, especially those for ERC tokens, are attracting more and more Dapp users to implement their applications. There are some functions in ERC token contracts that only a specific group of accounts could invoke. Among those functions, some even can influence other accounts or the whole system without prior notice or permission. These functions are referred to as contract backdoors. Once exploited by an attacker, they can cause property losses and harm users’ privacy. In this work, we propose Pied-Piper, a hybrid analysis method that integrates datalog analysis and directed fuzzing to detect backdoor threats in Ethereum ERC token contracts. First, datalog analysis is applied to abstract the data structures and identification rules related to the threats for preliminary static detection. Then, directed fuzzing is applied to eliminate false positives caused by the static analysis. We first evaluated Pied-Piper on 200 smart contracts, which are injected with different types of backdoors. It reported all problems without false positives, and none of the injected problems was missed. Then, we applied Pied-Piper on 13484 real token contracts deployed on Ethereum. Pied-Piper reported 189 confirmed problems, 4 of which have been assigned unique CVE ids while others are still in the review process. Each contract takes 8.03 seconds for datalog analysis on average, and the fuzzing engine can eliminate the false positives within 1 minute.},
	journal = {ACM Trans. Softw. Eng. Methodol.},
	author = {Ma, Fuchen and Ren, Meng and Ouyang, Lerong and Chen, Yuanliang and Zhu, Juan and Chen, Ting and Zheng, Yingli and Dai, Xiao and Jiang, Yu and Sun, Jiaguang},
	month = aug,
	year = {2022},
	note = {Place: New York, NY, USA
Publisher: Association for Computing Machinery},
	keywords = {smart contract, backdoor detection, datalog analysis, directed fuzzing},
	annote = {Just Accepted},
}

@inproceedings{maksymyuk_blockchain-based_2021,
	address = {New York, NY, USA},
	series = {{SenSys} '21},
	title = {Blockchain-{Based} {Decentralized} {Service} {Provisioning} in {Local} {6G} {Mobile} {Networks}},
	isbn = {978-1-4503-9097-2},
	url = {https://doi.org/10.1145/3485730.3493821},
	doi = {10.1145/3485730.3493821},
	abstract = {The paper presents a novel vision on the application of blockchain technology to empower the dynamic service provisioning in future 6G mobile networks. We propose a platform for decentralized service level agreement (SLA) negotiation between users and mobile network operators (MNOs) based on smart contracts and cryptocurrencies. In addition, the new quality of experience (QoE) model is proposed for end-users to customize their trade-off between SLA and service price. Finally, we develop the method of dynamic service selection among multiple MNOs that provides border-less connectivity for end-users with the guaranteed QoE regardless of the serving MNO.},
	booktitle = {Proceedings of the 19th {ACM} {Conference} on {Embedded} {Networked} {Sensor} {Systems}},
	publisher = {Association for Computing Machinery},
	author = {Maksymyuk, Taras and Volosin, Marcel and Gazda, Juraj and Liyanage, Madhusanka},
	year = {2021},
	note = {event-place: Coimbra, Portugal},
	keywords = {Blockchain, 6G, QoE, SLA},
	pages = {516--519},
}

@inproceedings{ren_making_2021-1,
	address = {New York, NY, USA},
	series = {{ESEC}/{FSE} 2021},
	title = {Making {Smart} {Contract} {Development} {More} {Secure} and {Easier}},
	isbn = {978-1-4503-8562-6},
	url = {https://doi.org/10.1145/3468264.3473929},
	doi = {10.1145/3468264.3473929},
	abstract = {With the rapid development of distributed applications, smart contracts have attracted more and more developers' attentions. However, developers or domain experts have different levels of familiarity with specific programming languages, like Solidity, and those vulnerabilities hidden in the code would be exploited and result in huge property losses. Existing auxiliary tools lack security considerations. Most of them only provide word completion based on fuzzy search and detection services for limited types of vulnerabilities, which results in the manpower waste during coding and potential vulnerability threats after deployment. In this work, we propose an integrated framework to enhance security in the two stages of recommendation and validation, assisting developers to implement more secure contracts more quickly. First, we reinforce original smart contracts with general patch patterns and secure programming standards for training, and design a real-time code suggestion algorithm to predict secure words for selection. Then, we integrate multiple widely-used testing tools to provide validation services. For evaluation, we collected 47,398 real-world contracts, and the result shows that it outperforms existing platforms and tools, improving the average word suggestion accuracy by 30\%-60\% and helping detect about 25\%-61\% more vulnerabilities. In most cases, our framework can correctly predict next words with the probability up to 82\%-97\% within top ten candidates. Compared with professional vulnerability mining tools, it can find more vulnerabilities and provide targeted modification suggestions without frivolous configurations. Currently, this framework has been used as the official development tool of WeBank and integrated as the recommended platform by FISCO-BCOS community.},
	booktitle = {Proceedings of the 29th {ACM} {Joint} {Meeting} on {European} {Software} {Engineering} {Conference} and {Symposium} on the {Foundations} of {Software} {Engineering}},
	publisher = {Association for Computing Machinery},
	author = {Ren, Meng and Ma, Fuchen and Yin, Zijing and Fu, Ying and Li, Huizhong and Chang, Wanli and Jiang, Yu},
	year = {2021},
	note = {event-place: Athens, Greece},
	keywords = {Domain-specific Reinforcement, Integrated Testing, Smart Contract Development},
	pages = {1360--1370},
}

@inproceedings{singi_compliance_2018,
	address = {New York, NY, USA},
	series = {{ICGSE} '18},
	title = {Compliance {Adherence} in {Distributed} {Software} {Delivery}: {A} {Blockchain} {Approach}},
	isbn = {978-1-4503-5717-3},
	url = {https://doi.org/10.1145/3196369.3196383},
	doi = {10.1145/3196369.3196383},
	abstract = {In this extended abstract, we propose a conceptual framework that leverages distributed ledger technology and smart contracts to create a decentralized system to capture the occurrence of interesting development activities (e.g., a development build) and associated contextual data, and automatically audit and evaluate compliance to governance policies. Our hypothesis is that such a framework will facilitate easier sharing of information across all participants of a distributed development team, compliance evaluation and early mitigation actions, leading to greater visibility and compliance. Currently, the proof of concept we are working on is focused on sharing and compliance evaluation of the open-source components used in software development.},
	booktitle = {Proceedings of the 13th {International} {Conference} on {Global} {Software} {Engineering}},
	publisher = {Association for Computing Machinery},
	author = {Singi, Kapil and S, Pradeepkumar D and Kaulgud, Vikrant and Podder, Sanjay},
	year = {2018},
	note = {event-place: Gothenburg, Sweden},
	keywords = {blockchain, smart contracts, regulations, compliance evaluation, distributed ledger technology, distributed teams, open-source},
	pages = {131--132},
}

@inproceedings{bagozi_exploiting_2020,
	address = {New York, NY, USA},
	series = {{iiWAS2019}},
	title = {Exploiting {Blockchain} and {Smart} {Contracts} for {Data} {Exploration} {As} a {Service}},
	isbn = {978-1-4503-7179-7},
	url = {https://doi.org/10.1145/3366030.3366075},
	doi = {10.1145/3366030.3366075},
	abstract = {Digital transformation and the adoption of ICT technologies in the factory of the future are growing faster and faster. In particular, data exploration methods and techniques are enabling the development of data-intensive Remote Monitoring Services for anomaly detection and predictive maintenance purposes. Remote Monitoring Services involve different actors across organizations. The Original Equipment Manufacturer explores high volume of data collected by sensors on the monitored machines to provide anomaly detection and predictive maintenance services. Insurance agencies may provide support to sustain maintenance costs. Spare parts suppliers can schedule the delivery of mechanical parts required for maintenance interventions. In this scenario, trust among participants becomes a critical issue. On the one hand, providers of anomaly detection and predictive maintenance services as well as insurance agencies must trust the way machines have been used by collecting and analysing sensors data. On the other hand, owners of monitored machines must trust the use of collected data to implement services, based on which maintenance costs are calculated. The goal of this paper is to leverage blockchain and smart contracts to ensure the required level of trust when implementing data exploration for Remote Monitoring Services. Events occurring on the monitored machines are stored as transactions in a blockchain-based system, to ensure non repudiation. Moreover, trust-demanding services are implemented as smart contracts, to guarantee the required level of trustworthiness among participants. The approach is integrated with a tool for data exploration in the digital factory, and has been validated taking into account performances and cost requirements.},
	booktitle = {Proceedings of the 21st {International} {Conference} on {Information} {Integration} and {Web}-{Based} {Applications} \&amp; {Services}},
	publisher = {Association for Computing Machinery},
	author = {Bagozi, Ada and Bianchini, Devis and De Antonellis, Valeria and Garda, Massimiliano and Melchiori, Michele},
	year = {2020},
	note = {event-place: Munich, Germany},
	keywords = {Blockchain, smart contract, digital factory, remote monitoring services},
	pages = {393--402},
}

@inproceedings{cui_understanding_2021,
	address = {New York, NY, USA},
	series = {{ICMSS} 2021},
	title = {Understanding the {Blockchain} {Ecosystem} with {Analysis} of {Decentralized} {Applications}: {An} {Empirical} {Study}},
	isbn = {978-1-4503-8970-9},
	url = {https://doi.org/10.1145/3459012.3459018},
	doi = {10.1145/3459012.3459018},
	abstract = {Blockchain technology is characterized by decentralization, traceability and tamper resistance. A decentralized application (Dapp) refers to a blockchain-based application deployed on Ethereum platform, with the aim to facilitate decentralized smart contracts and to prosper the blockchain ecosystem. In this paper, an in-depth analysis for the current decentralized applications is performed to reveal the structure and development situation of blockchain ecosystem. With a better understanding of the blockchain ecosystem, insights can be obtained for the Dapp developers as well as for the potential blockchain adopters. Furthermore, guidelines and suggestions are provided to inspire the business applications based on blockchain.},
	booktitle = {Proceedings of the 5th {International} {Conference} on {Management} {Engineering}, {Software} {Engineering} and {Service} {Sciences}},
	publisher = {Association for Computing Machinery},
	author = {Cui, Weiping and Sun, Yixin and Zhou, Jieru and Wang, Ying and Huang, Lei and Yan, Yong},
	year = {2021},
	note = {event-place: Chengdu, China},
	keywords = {Ethereum, Decentralized Applications, Blockchain ecosystem, LDA},
	pages = {38--44},
}

@inproceedings{wang_medical_2018,
	address = {New York, NY, USA},
	series = {{ICBTA} 2018},
	title = {A {Medical} {Data} {Sharing} {Platform} {Based} {On} {Permissioned} {Blockchains}},
	isbn = {978-1-4503-6646-5},
	url = {https://doi.org/10.1145/3301403.3301406},
	doi = {10.1145/3301403.3301406},
	abstract = {In recent years, artificial intelligence (AI) has played an increasingly important role in the medical field. AI based on big data analysis and deep learning algorithms has become the core driving force for the future development of the medical industry, but the biggest obstacle to its development is incompleteness and inaccuracy of medical data. The main reason is that medical big data is difficult to achieve sharing. This paper studies and analyzes the problems of medical big data sharing, proposes a medical data sharing platform based on permissioned blockchains (BCs), which uses dual-BCs architecture (Account BC and transaction BC), Concurrent Byzantine Fault Tolerance (CBFT) consensus mechanism, encryption technology and smart contract technology. Account BC (ABC) is used to store user data hash after encryption and transaction BC (TBC) is used to process computing tasks. The use of encryption technology ensures that users have full autonomy in their own medical data. Smart contract technology is used to enable users to set up different access permissions of medical data. A TBC can be used by multiple ABCs and TBC does not save users' medical data, but only obtains users' medical data from ABCs when needs computation. When the computing task is completed, the TBC deletes all users' medical data and packages the operation record to save into ABCs, thereby it realizes data sharing while protecting users' privacy. In addition, this paper compares the functions with other medical data systems, analyzes and compares their advantages and disadvantages. Finally, the conclusions and future works of the medical data sharing platform based on BC technology are prospected.},
	booktitle = {Proceedings of the 2018 {International} {Conference} on {Blockchain} {Technology} and {Application}},
	publisher = {Association for Computing Machinery},
	author = {Wang, Rong and Tsai, Wei-Tek and He, Juan and Liu, Can and Li, Qi and Deng, Enyan},
	year = {2018},
	note = {event-place: Xi'an, China},
	keywords = {Smart contract, Medical data, Medical data privacy, Medical data sharing, Permissioned blockchains},
	pages = {12--16},
}

@inproceedings{zhang_catering_2019,
	address = {New York, NY, USA},
	series = {{IECC} '19},
	title = {Catering {System} {Design} of {Smart} {Park} {Based} on {Blockchain} {Technology}},
	isbn = {978-1-4503-7177-3},
	url = {https://doi.org/10.1145/3343147.3343166},
	doi = {10.1145/3343147.3343166},
	abstract = {Smart Park becomes the main development direction of new-type industrial park. For the operation target of efficient, transparent and intelligent park, blockchain technology is applied to realize tamper-proof, traceability and high security. In this paper, the characteristics of blockchain type are analyzed, and consortium blockchain is proposed to construct the Smart Park System. Taking the catering system of Smart Park as an example, this paper explores the application of blockchain technology in the practical scene of Smart Park, analyzes the blockchain-based catering system process model and key technologies in detail, and designs the implementation method of smart contract.},
	booktitle = {Proceedings of the 1st {International} {Electronics} {Communication} {Conference}},
	publisher = {Association for Computing Machinery},
	author = {Zhang, Jing and Zeng, Junfang and Du, Huaming and An, Yuguo and Zhao, Jian},
	year = {2019},
	note = {event-place: Okinawa, Japan},
	keywords = {blockchain, smart contract, catering system, Smart Park},
	pages = {111--117},
}

@inproceedings{wang_computational_2022,
	address = {New York, NY, USA},
	series = {{ICCAI} '22},
	title = {A {Computational} {Trust} {Model} {Based} on {Hyperledger} {Fabric} {Blockchain}},
	isbn = {978-1-4503-9611-0},
	url = {https://doi.org/10.1145/3532213.3532239},
	doi = {10.1145/3532213.3532239},
	abstract = {The core component of the blockchain is smart contracts, which are the basis for connecting countless nodes and executing transactions. In smart contracts, trust often replaces trust in the form of proof of workload, proof of identity, proof of authorization, etc. Therefore, in the transaction process of the core chain, the node usually sees a concept of quantity, and does not know the change course of the agent's trust, so that it cannot fully grasp the dynamic process of the agent and the change of the trust evaluation value. The researches of computational trust has deeply affected the global economic and social development, and have been widely used in some large platforms such as ICAO PKD trust platform, EU's eIDAS platform, US FICAM system and so on. The current solution is a combination of limited mathematical models and assumptions that are far from the operational level. Hyperledger has superior performance in data access, invocation, operability, tamperability, traceability and other aspects, and is more suitable for the study of computational trust models. This study introduces the hyperledger technology to construct a computational trust model, and the main factors affecting the computational trust model are analyzed by using the Hyperledger Fabric technology, which is as the form of one to one to correspond to each node in the hyperledger, and realizes the trust transmission of the node, by sorting each node in the consensus chain, and passes. The interface technology realizes the docking between the model and the Hyperledger Fabric system. And then this paper analyzes the composition system of the computational trust model based on Hyperledger Fabric.},
	booktitle = {Proceedings of the 8th {International} {Conference} on {Computing} and {Artificial} {Intelligence}},
	publisher = {Association for Computing Machinery},
	author = {Wang, Qingnian and He, Xinyi and Wu, Li and Zeng, Yanfei},
	year = {2022},
	note = {event-place: Tianjin, China},
	keywords = {Hyperledger Fabric, Application, Computational Trust},
	pages = {172--180},
}

@inproceedings{manevich_service_2018,
	address = {New York, NY, USA},
	series = {{DEBS} '18},
	title = {Service {Discovery} for {Hyperledger} {Fabric}},
	isbn = {978-1-4503-5782-1},
	url = {https://doi.org/10.1145/3210284.3219766},
	doi = {10.1145/3210284.3219766},
	abstract = {Hyperledger Fabric (HLF) is a modular and extensible permissioned blockchain platform released to open-source and hosted by the Linux Foundation. The platform's design exhibits principles required by enterprise grade business applications like supply-chains, financial transactions, asset management, food safety, and many more. For that end HLF introduces several innovations, two of which are smart contracts in general purpose languages (chaincode in HLF), and flexible endorsement policies, which govern whether a transaction is considered valid.Typical blockchain applications are comprised of two tiers: the first tier focuses on the modelling of the data schema and embedding of business rules into the blockchain by means of smart contracts (chaincode) and endorsment policies; and the second tier uses the SDK (Software Development Kit) provided by HLF to implement client side application logic.However there is a gap between the two tiers that hinders the rapid adoption of changes in the chaincode and endorsement policies within the client SDK. Currently, the chaincode location and endorsement policies are statically configured into the client SDK. This limits the reliability and availability of the client in the event of changes in the platform, and makes the platform more difficult to use. In this work we address and bridge the gap by describing the design and implementation of Service Discovery.Service Discovery provides APIs which allow dynamic discovery of the configuration required for the client SDK to interact with the platform, alleviating the client from the burden of maintaining it. This enables the client to rapidly adapt to changes in the platform, thus significantly improving the reliability of the application layer. It also makes the HLF platform more consumable, simplifying the job of creating blockchain applications.},
	booktitle = {Proceedings of the 12th {ACM} {International} {Conference} on {Distributed} and {Event}-{Based} {Systems}},
	publisher = {Association for Computing Machinery},
	author = {Manevich, Yacov and Barger, Artem and Tock, Yoav},
	year = {2018},
	note = {event-place: Hamilton, New Zealand},
	keywords = {Blockchain, Distributed Ledger, Service Discovery},
	pages = {226--229},
}

@inproceedings{he_blotisrt_2021,
	address = {New York, NY, USA},
	series = {{CIAT} 2020},
	title = {{BloTISRT}: {Blockchain}-{Based} {Threat} {Intelligence} {Sharing} and {Rating} {Technology}},
	isbn = {978-1-4503-8782-8},
	url = {https://doi.org/10.1145/3444370.3444623},
	doi = {10.1145/3444370.3444623},
	abstract = {Computer and network technology is developing rapidly, meanwhile various cyber security incidents have occurred frequently. New vulnerabilities and many new security risks have emerged endlessly, which have caused serious threats to cyber security and business security. So the role and value of threat intelligence are increasing. However, there are still some problems of threat intelligence. The threat intelligence information can be tampered in the existing sharing mechanism. At the same time, there is no corresponding feedback mechanism for the quality of the threat intelligence information provided by the intelligence providers. There is a lack of credible judgment and corresponding incentive mechanism for threat intelligence providers. So, in order to solve these problems, a blockchain-based threat intelligence sharing and rating technology is proposed in this paper. Based on the characteristics of blockchain such as openness, consensus, autonomy and decentralization, trustlessness, non-tampering and traceability, the paper uses blockchain technology to build blocks of threat intelligence information, including IP address information, domain name information, URLs Information, security incident information, vulnerability information, threat intelligence source, user's evaluation, credibility of threat intelligence, contribution rate of threat intelligence, credibility of threat intelligence sources and contribution rate of threat intelligence sources. A threat intelligence sharing and rating system based on blockchain is designed in the paper, and the corresponding threat intelligence sharing method and rating method based on blockchain are given. It also proposes the smart contract for the threat intelligence sharing and rating in the paper. It can acquire and analyze the latest and most valuable threat intelligence information timely and effectively, so as to perform protection and emergency response timely, and promote the continuous and effective development of the closed loop of the entire threat intelligence ecosystem. The experimental environment and smart contract are designed, and its effectiveness is proved.},
	booktitle = {Proceedings of the 2020 {International} {Conference} on {Cyberspace} {Innovation} of {Advanced} {Technologies}},
	publisher = {Association for Computing Machinery},
	author = {He, Shen and Fu, Jun and Jiang, Wen and Cheng, Yexia and Chen, Jiake and Guo, Zhihui},
	year = {2021},
	note = {event-place: Guangzhou, China},
	keywords = {Blockchain, Smart Contract, Intelligence Rating, Intelligence Sharing, Threat intelligence},
	pages = {524--534},
}

@inproceedings{dasaklis_defining_2019,
	address = {New York, NY, USA},
	series = {{COINS} '19},
	title = {Defining {Granularity} {Levels} for {Supply} {Chain} {Traceability} {Based} on {IoT} and {Blockchain}},
	isbn = {978-1-4503-6640-3},
	url = {https://doi.org/10.1145/3312614.3312652},
	doi = {10.1145/3312614.3312652},
	abstract = {Identifying the optimal granularity level of traceable units is necessary when implementing traceability, particularly in food supply chains. In this paper we propose a generic framework for defining granularity levels based on product's unique characteristics, supply chain processes and stakeholders engagement. We determine different levels of granularity by using smart contracts within a blockchain-enabled supply chain traceability architecture. The granularity relates to different levels depending on the application of information within a company and between companies across complex supply chain networks. The applicability of the proposed framework is demonstrated with a food supply chain use case scenario by developing a local private blockchain-enabled architecture. The overall benefits of the proposed model are discussed along with several fruitful areas for further research directions.},
	booktitle = {Proceedings of the {International} {Conference} on {Omni}-{Layer} {Intelligent} {Systems}},
	publisher = {Association for Computing Machinery},
	author = {Dasaklis, Thomas K. and Casino, Fran and Patsakis, Constantinos},
	year = {2019},
	note = {event-place: Crete, Greece},
	keywords = {blockchain, smart contract, IoT, supply chain},
	pages = {184--190},
}

@inproceedings{bhumichitr_acachain_2020,
	address = {New York, NY, USA},
	series = {{IAIT2020}},
	title = {{AcaChain}: {Academic} {Credential} {Attestation} {System} {Using} {Blockchain}},
	isbn = {978-1-4503-7759-1},
	url = {https://doi.org/10.1145/3406601.3406614},
	doi = {10.1145/3406601.3406614},
	abstract = {Blockchain has been a part of people's interest in the development of various areas such as digital currencies (e.g., Bitcoin), securities, healthcare, record-keeping and much more. Some of the key features of blockchain technology are immutability, decentralization, distributed ledger, consensus, and smart contract. In this paper, we explore how blockchain technology could possibly be utilized for the academic credential attestation in the education domain. This paper aims to re-engineer the academic credential attestation process to reduce both time and resource consumption and human involvement. It also aims to design a unique way for academic data collection to prevent fraud academic credentials. A blockchain-based system for academic credential attestation has been implemented.},
	booktitle = {Proceedings of the 11th {International} {Conference} on {Advances} in {Information} {Technology}},
	publisher = {Association for Computing Machinery},
	author = {Bhumichitr, Kiratijuta and Channarukul, Songsak},
	year = {2020},
	note = {event-place: Bangkok, Thailand},
	keywords = {Blockchain, Hyperledger Fabric, Academic Credential Attestation},
}

@inproceedings{yang_blockchain_2021,
	address = {New York, NY, USA},
	series = {e-{Energy} '21},
	title = {Blockchain for {Transactive} {Energy} {Management} of {Distributed} {Energy} {Resources} in {Smart} {Grid}},
	isbn = {978-1-4503-8333-2},
	url = {https://doi.org/10.1145/3447555.3464848},
	doi = {10.1145/3447555.3464848},
	abstract = {This work presents the design and implementation of a blockchain system that enables the trustable transactive energy management for distributed energy resources (DERs). We model the interactions among DERs, including energy trading and flexible appliance scheduling, as a cost minimization problem. Considering the dispersed nature and diverse ownership of DERs, we develop a distributed algorithm to solve the optimization problem using the alternating direction method of multipliers (ADMM) method. Furthermore, we develop a blockchain system, on which we implement the proposed algorithm with the smart contract, to guarantee the transparency and correctness of the energy management. We prototype the blockchain in a small-scale test network and evaluate it through experiments using real-world data. The experimental results validate the feasibility and effectiveness of our design.},
	booktitle = {Proceedings of the {Twelfth} {ACM} {International} {Conference} on {Future} {Energy} {Systems}},
	publisher = {Association for Computing Machinery},
	author = {Yang, Qing and Wang, Hao and Wu, Xiaoxiao and Wang, Taotao and Zhang, Shengli},
	year = {2021},
	note = {event-place: Virtual Event, Italy},
	keywords = {Blockchain, Distributed energy resource (DER), Distributed optimization, Energy trading, Smart grid, Transactive energy},
	pages = {211--215},
}

@inproceedings{krol_chainsoft_2018-1,
	address = {New York, NY, USA},
	series = {{CryBlock}'18},
	title = {{ChainSoft}: {Collaborative} {Software} {Development} {Using} {Smart} {Contracts}},
	isbn = {978-1-4503-5838-5},
	url = {https://doi.org/10.1145/3211933.3211934},
	doi = {10.1145/3211933.3211934},
	abstract = {In recent years, more and more companies require dedicated software to increase the efficiency of their business. However, with rapidly changing technologies it is often inefficient to maintain a dedicated team of developers. On the other hand, outsourcing software development requires considerable effort and trust between involved parties to ensure the quality of the code and adequate payment.We present ChainSoft - a platform for outsourcing software development and automatic payments between parties that distrust each other, by means of blockchain technology. ChainSoft allows any developer to create software and submit software, includes automatic code verification and enforce users' proper behavior. We implement our system using Ethereum Smart Contracts and Github/Travis CI and present first evaluation proving its security and low usage cost.},
	booktitle = {Proceedings of the 1st {Workshop} on {Cryptocurrencies} and {Blockchains} for {Distributed} {Systems}},
	publisher = {Association for Computing Machinery},
	author = {Król, Micha{\textbackslash}l and Reñé, Sergi and Ascigil, Onur and Psaras, Ioannis},
	year = {2018},
	note = {event-place: Munich, Germany},
	keywords = {blockchain, smart contracts, github, software development},
	pages = {1--6},
}

@inproceedings{cardenas_robonomics_2020,
	address = {New York, NY, USA},
	series = {{HRI} '20},
	title = {Robonomics: {The} {Study} of {Robot}-{Human} {Peer}-to-{Peer} {Financial} {Transactions} and {Agreements}},
	isbn = {978-1-4503-7057-8},
	url = {https://doi.org/10.1145/3371382.3380735},
	doi = {10.1145/3371382.3380735},
	abstract = {Can or should a robot ever engage in a financial transaction with a human? If so, how? How about an enforceable agreement? Blockchain technology has enabled the development of cryptocurrencies, smart contracts, and unlocked a plethora of other disruptive technologies. But, beyond its use case in cryptocurrencies, and in network coordination, blockchain technology may have serious sociotechnical implications in the future co-existence of robots and humans. Motivated by the recent explosion of interest around blockchains, and our extensive work on open-source blockchain technology and its integration into robotics - this paper addresses these questions and provides insights into how blockchains and other decentralized technologies can impact our interactions with robots and enable the social integration of robots into human society.},
	booktitle = {Companion of the 2020 {ACM}/{IEEE} {International} {Conference} on {Human}-{Robot} {Interaction}},
	publisher = {Association for Computing Machinery},
	author = {Cardenas, Irvin Steve and Kim, Jong-Hoon},
	year = {2020},
	note = {event-place: Cambridge, United Kingdom},
	keywords = {blockchain, smart contracts, behavioral economics, cryptocurrencies, trust, contracts, cryptoeconomics, financial transactions, human-robot interaction, interaction models, robonomics, robots in society, social robotics},
	pages = {8--15},
}

@inproceedings{zhang_deconstructing_2018,
	address = {New York, NY, USA},
	series = {{DEBS} '18},
	title = {Deconstructing {Blockchains}: {Concepts}, {Systems}, and {Insights}},
	isbn = {978-1-4503-5782-1},
	url = {https://doi.org/10.1145/3210284.3219502},
	doi = {10.1145/3210284.3219502},
	abstract = {Popularly known for powering cryptocurrencies such as Bitcoin and Ethereum, blockchains is seen as a disruptive technology capable of impacting a wide variety of domains, ranging from finance to governance, by offering superior security, reliability, and transparency in a decentralized manner. In this tutorial presentation, we first study the original Bitcoin design, as well as Ethereum and Hyperledger, and reflect on their design from an academic perspective. We provide an overview of potential applications and associated research challenges, as well as a survey of ongoing research projects. We mention opportunities blockchain creates for event-based systems. Finally, we conclude with a walkthrough showing the process of developing a decentralized application (undefinedSApp), using a popular Smart Contract language (Solidity) for the blockchain platform of Ethereum.},
	booktitle = {Proceedings of the 12th {ACM} {International} {Conference} on {Distributed} and {Event}-{Based} {Systems}},
	publisher = {Association for Computing Machinery},
	author = {Zhang, Kaiwen and Vitenberg, Roman and Jacobsen, Hans-Arno},
	year = {2018},
	note = {event-place: Hamilton, New Zealand},
	keywords = {Blockchain, Ethereum, Smart Contracts, Bitcoin, Hyperledger, Distributed Ledger Technology},
	pages = {187--190},
}

@inproceedings{wang_hybrid-voting_2020,
	address = {New York, NY, USA},
	series = {{WWW} '20},
	title = {Hybrid-{Voting}: {A} {Hybrid} {Structured} {Electronic} {Voting} {System}},
	isbn = {978-1-4503-7024-0},
	url = {https://doi.org/10.1145/3366424.3382708},
	doi = {10.1145/3366424.3382708},
	abstract = {Recent development of electronic voting (e-voting) systems has been focusing on blockchain-based design\&nbsp;[4]. Despite blockchain’s advantages in public verifiability, existing blockchain-based voting systems are impractical due to the high block time and transaction costs of the underlying blockchain. To achieve verifiability and efficiency simultaneously, we propose Hybrid-Voting, a hybrid structured e-voting system that combines an untrusted centralized server with smart contracts on Ethereum blockchain. In addition, voter anonymity and privacy are guaranteed by using short linkable ring signature and ElGamal encryption. Our evaluation shows that Hybrid-Voting can support 10k voters by using one commodity computer, and the cost per voter is less than one US dollar, much lower than the cost per voter in today’s elections\&nbsp;[1].},
	booktitle = {Companion {Proceedings} of the {Web} {Conference} 2020},
	publisher = {Association for Computing Machinery},
	author = {Wang, Ping-Lun and Yang, Shao-Hong and Hsiao, Hsu-Chun},
	year = {2020},
	note = {event-place: Taipei, Taiwan},
	keywords = {blockchain, e-voting, ring signature},
	pages = {83--84},
}

@inproceedings{ramachandran_smartprovenance_2018,
	address = {New York, NY, USA},
	series = {{CODASPY} '18},
	title = {{SmartProvenance}: {A} {Distributed}, {Blockchain} {Based} {DataProvenance} {System}},
	isbn = {978-1-4503-5632-9},
	url = {https://doi.org/10.1145/3176258.3176333},
	doi = {10.1145/3176258.3176333},
	abstract = {Blockchain technology has evolved from being an immutable ledger of transactions for cryptocurrencies to a programmable interactive environment for building distributed reliable applications. Although the blockchain technology has been used to address various challenges, to our knowledge none of the previous work focused on using Blockchain to develop a secure and immutable scientific data provenance management framework that automatically verifies the provenance records. In this work, we leverage Blockchain as a platform to facilitate trustworthy data provenance collection, verification, and management. The developed system utilizes smart contracts and open provenance model (OPM) to record immutable data trails. We show that our proposed framework can securely capture and validate provenance data that prevents any malicious modification to the captured data as long as the majority of the participants are honest.},
	booktitle = {Proceedings of the {Eighth} {ACM} {Conference} on {Data} and {Application} {Security} and {Privacy}},
	publisher = {Association for Computing Machinery},
	author = {Ramachandran, Aravind and Kantarcioglu, Murat},
	year = {2018},
	note = {event-place: Tempe, AZ, USA},
	keywords = {blockchain platform, data provenance, distributed systems, knowledge management},
	pages = {35--42},
}

@inproceedings{corsi_ticketh_2019,
	address = {New York, NY, USA},
	series = {{SAC} '19},
	title = {{TickEth}, a {Ticketing} {System} {Built} on {Ethereum}},
	isbn = {978-1-4503-5933-7},
	url = {https://doi.org/10.1145/3297280.3297323},
	doi = {10.1145/3297280.3297323},
	abstract = {We propose TickEth, a system that aims at mitigating some of the problems encountered by the ticketing industry. The name TickEth is built by combining the words ticket, its application domain, and Ethereum, the underlying platform we adopted for the development of the prototype.Nowadays, ticketing ecosystem is wide and fragmented, and faces several problems. TickEth exploits Ethereum smart contracts to tackle the inability of checking the authenticity of tickets sold online (that can be fake or duplicates of a real ticket), the wild price range of resold tickets in the secondary market, and the unwieldy refund procedures.TickEth is an open specification, where different third-party clients can freely interact, and can be instantiated by different vendors as they like. We implemented a proof-of-concept prototype, available at: https://github.com/H221/TickEth},
	booktitle = {Proceedings of the 34th {ACM}/{SIGAPP} {Symposium} on {Applied} {Computing}},
	publisher = {Association for Computing Machinery},
	author = {Corsi, Pietro and Lagorio, Giovanni and Ribaudo, Marina},
	year = {2019},
	note = {event-place: Limassol, Cyprus},
	keywords = {blockchain, smart contract, ethereum, dApps, ticketing},
	pages = {409--416},
}

@inproceedings{zupan_hyperpubsub_2017,
	address = {New York, NY, USA},
	series = {Middleware '17},
	title = {Hyperpubsub: {A} {Decentralized}, {Permissioned}, {Publish}/{Subscribe} {Service} {Using} {Blockchains}: {Demo}},
	isbn = {978-1-4503-5201-7},
	url = {https://doi.org/10.1145/3155016.3155018},
	doi = {10.1145/3155016.3155018},
	abstract = {Since the introduction of Bitcoin in 2008, blockchain systems have evolved immensely in terms of performance and usability. There is a massive focus on building enterprise blockchain solutions, with providers such as IBM and Microsoft already providing Blockchain-as-a Service (BaaS). To facilitate the adoption of blockchain technologies across various business verticals, we argue that middleware plays an integral role in accelerating the development of automated business processes (i.e., smart contracts). We argue that decentralized messaging is a key requirement of many distributed applications and should be provided as a reusable blockchain middleware. Our system, called HyperPubSub, provides decentralized publish/subscribe messaging for a multi-federated, permissioned, environment. HyperPubSub provides secure and privacy-preserving messaging, which is audited using blockchains for validation and monetization purposes. We demonstrate our implementation using Kafka and Hyperledger.},
	booktitle = {Proceedings of the 18th {ACM}/{IFIP}/{USENIX} {Middleware} {Conference}: {Posters} and {Demos}},
	publisher = {Association for Computing Machinery},
	author = {Zupan, Nejc and Zhang, Kaiwen and Jacobsen, Hans-Arno},
	year = {2017},
	note = {event-place: Las Vegas, Nevada},
	keywords = {blockchain, hyperledger, kafka, publish/subscribe},
	pages = {15--16},
}

@inproceedings{sivakumar_challenges_2022,
	address = {New York, NY, USA},
	series = {{ICFNDS} 2021},
	title = {Challenges in {Scholarly} {Communication} and {Scientific} {Publication} – {Present} {Scenario} and {Opportunities} through {Blockchain} {Solutions}},
	isbn = {978-1-4503-8734-7},
	url = {https://doi.org/10.1145/3508072.3508174},
	doi = {10.1145/3508072.3508174},
	abstract = {The internet is flooded with predatory, cloned and hijacked journals. Even the senior researchers fall pray to these dubious publications. Blockchain being transparent, decentralized and immutable in nature has great potential in scientific publication industry. We found that certain blockchain based frameworks for journal publication are being developed. In this paper we have listed the opportunities through blockchain technology so as to disrupt the scientific publication houses. We have also compared the existing blockchain based frameworks and open research problems to tackle limitations faced in traditional scholarly communication and scientific publication. Development in the area of consensus algorithm, adopting Management Principles such as Business Process Management (BPM) and Lean Six Sigma (LSS), Smart Contract, verifying the genuinity of publication, reviewer selection process are the identified problems that can help scientific publication industry to be sustainable.},
	booktitle = {The 5th {International} {Conference} on {Future} {Networks} \&amp; {Distributed} {Systems}},
	publisher = {Association for Computing Machinery},
	author = {Sivakumar, Eashwar and Chawla, Paras and Ganesan, Geetha},
	year = {2022},
	note = {event-place: Dubai, United Arab Emirates},
	pages = {496--503},
}

@inproceedings{ten_engineering_2022,
	address = {New York, NY, USA},
	series = {{WebSci} '22},
	title = {Engineering {Blockchain} {Enabling} {Win} {A} {Fortune} {Game} among {Novice} through {EAOM}},
	isbn = {978-1-4503-9191-7},
	url = {https://doi.org/10.1145/3501247.3539018},
	doi = {10.1145/3501247.3539018},
	abstract = {Blockchain application development has received much attention nowadays. As development is complex and challenging, a systematic approach is needed to improve the product, services, and process quality. Despite the introduction of techniques, there are still inadequate models for demonstrating the blockchain's internal architecture. Hence, there is a gap when developing the blockchain application, a gap in the modelling environment of a blockchain development application. This paper introduces a new insight into blockchain application development through extended Agent-Oriented Modelling (eAOM). eAOM is a methodology for complex socio-technical system development, and we believe that it can reduce the complexity of implementing the blockchain application. In this paper, the eAOM is used to model a blockchain-based “win a fortune” system, which includes smart contract development. It showcases the feasibility of adopting eAOM to model a blockchain enabling application. A usability survey among the novices has further validated the usability and benefits of eAOM in the blockchain enabling application development.},
	booktitle = {14th {ACM} {Web} {Science} {Conference} 2022},
	publisher = {Association for Computing Machinery},
	author = {Ten, Michellelibin and Cheah, WaiShiang and Sim, Yee Wai},
	year = {2022},
	note = {event-place: Barcelona, Spain},
	keywords = {Agent Oriented Modelling, Blockchain application development, Ethereum Smart Contract, Model-driven Engineering},
	pages = {443--450},
}

@inproceedings{liu_government_2021,
	address = {New York, NY, USA},
	series = {{ICBCT} '21},
	title = {Government {Data} {Sharing} {Based} on {Blockchain}},
	isbn = {978-1-4503-8962-4},
	url = {https://doi.org/10.1145/3460537.3460562},
	doi = {10.1145/3460537.3460562},
	abstract = {With the development of smart city, the cooperation between government sectors is becoming more and more frequent, breaking the information island and big data sharing has become an inevitable trend. The traditional way of government data sharing is mainly based on one unified data center, which has high construction cost and maintenance cost, and fails to fully consider the sectoral interests, authority, security and traceability, so there are still many barriers in government data sharing. Taking advantage of the features of blockchain technology, such as distributed ledger, smart contract, data trust and traceability, this paper proposes an application model of government data sharing based on blockchain, which uses a unified data sharing model and autonomous authority management to provide efficient and safe bus service for distributed government big data sharing.},
	booktitle = {2021 {The} 3rd {International} {Conference} on {Blockchain} {Technology}},
	publisher = {Association for Computing Machinery},
	author = {Liu, Yu and Zeng, Junfang},
	year = {2021},
	note = {event-place: Shanghai, China},
	keywords = {Authority management, Bus service, City brain, Data sharing model},
	pages = {123--128},
}

@article{zhao_sigvm_2022,
	title = {{SigVM}: {Enabling} {Event}-{Driven} {Execution} for {Truly} {Decentralized} {Smart} {Contracts}},
	volume = {6},
	url = {https://doi.org/10.1145/3563312},
	doi = {10.1145/3563312},
	abstract = {This paper presents SigVM, the first blockchain virtual machine that extends EVM to support an event-driven execution model, enabling developers to build truly decentralized smart contracts. Contracts in SigVM can emit signal events, on which other contracts can listen. Once an event is triggered, corresponding handler functions are automatically executed as signal transactions. We build an end-to-end blockchain platform SigChain and a contract language compiler SigSolid to realize the potential of SigVM. Experimental results show that our benchmark applications can be reimplemented with SigVM in a truly decentralized way, eliminating the dependency on centralized and unreliable mechanisms like off-chain relay servers. The development effort of reimplementing these contracts with SigVM is small, i.e., we modified on average 3.17\% of the contract code. The runtime and the gas overhead of SigVM on these contracts is negligible.},
	number = {OOPSLA2},
	journal = {Proc. ACM Program. Lang.},
	author = {Zhao, Zihan and Beillahi, Sidi Mohamed and Song, Ryan and Cai, Yuxi and Veneris, Andreas and Long, Fan},
	month = oct,
	year = {2022},
	note = {Place: New York, NY, USA
Publisher: Association for Computing Machinery},
	keywords = {Blockchain, Smart Contracts, Event-Driven, Virtual Machine},
}

@inproceedings{li_clue_2021,
	address = {New York, NY, USA},
	series = {{SAC} '21},
	title = {{CLUE}: {Towards} {Discovering} {Locked} {Cryptocurrencies} in {Ethereum}},
	isbn = {978-1-4503-8104-8},
	url = {https://doi.org/10.1145/3412841.3442130},
	doi = {10.1145/3412841.3442130},
	abstract = {As the most popular blockchain that supports smart contracts, there are already more than 296 thousand kinds of cryptocurrencies built on Ethereum. However, not all cryptocurrencies can be controlled by users. For example, some money is permanently locked in wallets' accounts due to attacks. In this paper, we conduct the first systematic investigation on locked cryptocurrencies in Ethereum. In particular, we define three categories of accounts with locked cryptocurrencies and develop a novel tool named Clue to discover them. Results show that there are more than 216 million dollars value of cryptocurrencies locked in Ethereum. We also analyze the reasons (i.e., attacks/behaviors) why cryptocurrencies are locked. Because the locked cryptocurrencies can never be controlled by users, avoid interacting with the accounts discovered by Clue and repeating the same mistakes again can help users to save money.},
	booktitle = {Proceedings of the 36th {Annual} {ACM} {Symposium} on {Applied} {Computing}},
	publisher = {Association for Computing Machinery},
	author = {Li, Xiaoqi and Chen, Ting and Luo, Xiapu and Wang, Chenxu},
	year = {2021},
	note = {event-place: Virtual Event, Republic of Korea},
	keywords = {ethereum, cryptocurrency, distributed system security},
	pages = {1584--1587},
}

@inproceedings{alvarez-diaz_smart_2017,
	address = {New York, NY, USA},
	series = {{IML} '17},
	title = {Smart {Contracts} {Based} on {Blockchain} for {Logistics} {Management}},
	isbn = {978-1-4503-5243-7},
	url = {https://doi.org/10.1145/3109761.3158384},
	doi = {10.1145/3109761.3158384},
	abstract = {Current trade is being heavily influenced by emerging technologies. Despite many technological advances, logistics management is at a standstill about the improvements communication systems. Updating information during the whole process is an essential element in such systems but trust in that information is even more important. For this reason, providing a mechanism that can be verified and that allows increasing the level of trust of the stakeholders could contribute to the improvement of the logistic process. The main aim of this paper is to show an analysis of the current state of blockchain technology and its possibilities regarding the development of decentralized and self-verifiable applications focusing on their integrity. Besides, a new concept of program is defined thanks to the use of a set of smart contracts which should be deployed over the Ethereum blockchain.},
	booktitle = {Proceedings of the 1st {International} {Conference} on {Internet} of {Things} and {Machine} {Learning}},
	publisher = {Association for Computing Machinery},
	author = {Álvarez-Díaz, Néstor and Herrera-Joancomartí, Jordi and Caballero-Gil, Pino},
	year = {2017},
	note = {event-place: Liverpool, United Kingdom},
	keywords = {blockchain, ethereum, logistics, smart-contracts},
}

@inproceedings{zhang_research_2020,
	address = {New York, NY, USA},
	series = {{CSAE} '20},
	title = {Research on {Crowdsourcing} {Mode} of {Internet} + {Rural} {Logistics} {Based} on {Blockchain}},
	isbn = {978-1-4503-7772-0},
	url = {https://doi.org/10.1145/3424978.3425015},
	doi = {10.1145/3424978.3425015},
	abstract = {Blockchain is a new internet database technology, which ensures the authenticity and security of data through distributed supervision technology. It has excellent characteristics such as decentralization, non-tampering, traceability, high transparency and so on. The combination of blockchain and internet can help solve the trust problem that has always restricted the application of "internet plus", and thus speeds up the sharing economy. This paper first gives the concept of farmers' deep participation in the "internet + rural logistics" mode, then the crowdsourcing logistics operation mode based on farmers' deep participation is established by using blockchain technology. And the operation process is presented, the logical framework of smart contract under two scenarios of self-built platform and third-party platform is provided, which provides technical support and trust guarantee for the healthy development of "internet plus rural logistics" crowdsourcing mode.},
	booktitle = {Proceedings of the 4th {International} {Conference} on {Computer} {Science} and {Application} {Engineering}},
	publisher = {Association for Computing Machinery},
	author = {Zhang, Shuhong and Wang, Liyuan and Wang, Lan},
	year = {2020},
	note = {event-place: Sanya, China},
	keywords = {Blockchain, Farmers' deep participation, Internet plus, Rural logistics},
}

@inproceedings{chen_optimization_2022,
	address = {New York, NY, USA},
	series = {{ICDTE} '21},
	title = {Optimization of {Information} {Security} {Sharing} {Mechanism} of {Online} {Education} {Platform} {Based} on {Block} {Chain} {Technology}},
	isbn = {978-1-4503-8499-5},
	url = {https://doi.org/10.1145/3488466.3488474},
	doi = {10.1145/3488466.3488474},
	abstract = {Under the ravages of the COVID-19, online education platform business has achieved rapid development, and excessive platform integration and the spread of paid knowledge have also spawned security problems of data sharing between platforms and users. Meanwhile, the development of Internet technology has also increased the difficulty of knowledge safeguarding rights on education platforms and cracking down on piracy. Based on the application characteristics of blockchain technology, this paper proposes a dual authentication mode of node + platform based on hash detection. Through the smart contract provided by Ethereum, data encryption linking and two-way verification between different platforms are realized. After linking to blockchain, data transmitted over the network can be protected from hacking and tampering. The research in this paper has an enlightening effect on promoting the integration development of blockchain technology and emerging industries, and also makes a specific judgment on the next integration development direction.},
	booktitle = {Proceedings of the 5th {International} {Conference} on {Digital} {Technology} in {Education}},
	publisher = {Association for Computing Machinery},
	author = {Chen, Guoping and Miao, Guosen and Xue, Yingchun},
	year = {2022},
	note = {event-place: Busan, Republic of Korea},
	keywords = {Blockchain, Data sharing, Online education platform, two-way verification},
	pages = {82--86},
}

@inproceedings{elsden_recipes_2019,
	address = {New York, NY, USA},
	series = {{CHI} '19},
	title = {Recipes for {Programmable} {Money}},
	isbn = {978-1-4503-5970-2},
	url = {https://doi.org/10.1145/3290605.3300481},
	doi = {10.1145/3290605.3300481},
	abstract = {This paper presents a qualitative study of the recent integration of a UK-based, digital-first mobile banking app - Monzo - with the web automation service IFTTT (If This Then That). Through analysis of 113 unique IFTTT 'recipes' shared by Monzo users on public community forums, we illustrate the potentially diverse functions of these recipes, and how they are achieved through different kinds of automation. Beyond achieving more convenient and efficient financial management, we note many playful and expressive applications of conditionality and automation that far extend traditional functions of banking applications and infrastructure. We use these findings to map opportunities, challenges and areas of future research in the development of 'programmable money' and related financial technologies. Specifically, we present design implications for the extension of native digital banking applications; novel uses of banking data; the applicability of blockchains and smart contracts; and future forms of financial autonomy.},
	booktitle = {Proceedings of the 2019 {CHI} {Conference} on {Human} {Factors} in {Computing} {Systems}},
	publisher = {Association for Computing Machinery},
	author = {Elsden, Chris and Feltwell, Tom and Lawson, Shaun and Vines, John},
	year = {2019},
	note = {event-place: Glasgow, Scotland Uk},
	keywords = {automation, fintech, ifttt, money},
	pages = {1--13},
}

@article{nguyen_blockchain-based_2021,
	title = {A {Blockchain}-{Based} {Iterative} {Double} {Auction} {Protocol} {Using} {Multiparty} {State} {Channels}},
	volume = {21},
	issn = {1533-5399},
	url = {https://doi.org/10.1145/3389249},
	doi = {10.1145/3389249},
	abstract = {Although the iterative double auction has been widely used in many different applications, one of the major problems in its current implementations is that they rely on a trusted third party to handle the auction process. This imposes the risk of single point of failures, monopoly, and bribery. In this article, we aim to tackle this problem by proposing a novel decentralized and trustless framework for iterative double auction based on blockchain. Our design adopts the smart contract and state channel technologies to enable a double auction process among parties that do not need to trust each other, while minimizing the blockchain transactions. In specific, we propose an extension to the original concept of state channels that can support multiparty computation. Then, we provide a formal development of the proposed framework and prove the security of our design against adversaries. Finally, we develop a proof-of-concept implementation of our framework using Elixir and Solidity, on which we conduct various experiments to demonstrate its feasibility and practicality.},
	number = {2},
	journal = {ACM Trans. Internet Technol.},
	author = {Nguyen, Truc D. T. and Thai, My T.},
	month = mar,
	year = {2021},
	note = {Place: New York, NY, USA
Publisher: Association for Computing Machinery},
	keywords = {blockchain, Iterative double auction, state channel, trustless},
}

@inproceedings{utami_tjhin_study_2022,
	address = {New York, NY, USA},
	series = {{ICIT} 2021},
	title = {A {Study} for the {Implementation} of {Banking} 4.0 in {Indonesia}},
	isbn = {978-1-4503-8497-1},
	url = {https://doi.org/10.1145/3512576.3512600},
	doi = {10.1145/3512576.3512600},
	abstract = {Industry 4.0 is a smart factory where smart digital devices are connected and that communicate with raw materials, semi-finished products, products, machines, tools, robots and people. The pace of technological change in the banking sector and the current monetary environment in the industrial era 4.0 is very high. Realizing these opportunities, this paper aims to describe the possible relationships that can occur and be implemented between the two concepts. The framework designed in the paper focuses on self-service provided by banks by utilizing the development of one of the technologies from industry 4.0, namely the Internet of Things. The merging of Industry 4.0 and Banking 4.0 will later create an Integrated Customer Centric Ecosystem that implements several services such as Smart Home with Smart Procurement, Smart Wearables with smart Authentication for banking, Smart Banking Customer Services Using Virtual Assistant and Secure Banking with Smart Contracts.},
	booktitle = {2021 {The} 9th {International} {Conference} on {Information} {Technology}: {IoT} and {Smart} {City}},
	publisher = {Association for Computing Machinery},
	author = {Utami Tjhin, Viany and Eka Riantini, Regina},
	year = {2022},
	note = {event-place: Guangzhou, China},
	keywords = {Banking 4.0, Customer Centric Ecosystem, Financial, Industry 4.0},
	pages = {129--134},
}

@article{kim_intelligent_2021,
	title = {Intelligent {Mediator}-{Based} {Enhanced} {Smart} {Contract} for {Privacy} {Protection}},
	volume = {21},
	issn = {1533-5399},
	url = {https://doi.org/10.1145/3404892},
	doi = {10.1145/3404892},
	abstract = {With the development of ICT technology, users are actively participated in content creation and sharing. Service providers have provided more diverse and extensive information services. With the recent evolution to a customized service, the demand for the use of personal information is increasing. However, it affects the efficiency and convenience of service provision, as social problems and security threats such as personal information leakage, human trafficking, and misuse increase. In this article, we proposed an intelligent mediator-based enhanced smart contract for privacy protection. The proposed approach performs the tasks, which are mediation transactions, authorization, and transaction record management, with blockchain-based personal information management. Then it is possible to prevent misuse of personal information and to support rational decision-making on the transparency of information and the use of personal information by autonomously performing personal information management.},
	number = {1},
	journal = {ACM Trans. Internet Technol.},
	author = {Kim, Junho and Kim, Mucheol},
	month = jan,
	year = {2021},
	note = {Place: New York, NY, USA
Publisher: Association for Computing Machinery},
	keywords = {Blockchain, Information Management, Information Sharing, Personal Information, Platform},
}

@inproceedings{ibba_citysense_2017,
	address = {New York, NY, USA},
	series = {{XP} '17},
	title = {{CitySense}: {Blockchain}-{Oriented} {Smart} {Cities}},
	isbn = {978-1-4503-5264-2},
	url = {https://doi.org/10.1145/3120459.3120472},
	doi = {10.1145/3120459.3120472},
	abstract = {A smart city is a connected system in which things produce a huge quantity of data. We focused the attention on monitoring the environment quality in urban area by means of a distributed network of small mobile sensors that are devices on the Internet of Things (IoT). Sensors produce digital measurements, useful for investigating and studying the life quality in every part of the city. In our vision, environmental data must be available by everyone and shared with citizens, but it must be unmodifiable. We propose to solve the problem of the sensors data storage and management using a disruptive technology called blockchain. The blockchain responds to the demand of availability and unchangeability and, thanks to the potentiality of smart contracts, makes us able to manage sensor information and implement a control logic. In order to develop the software based on blockchain we chose to apply the SCRUM methodology because of its capabilities of being a flexible, adaptive and iterative methodology.},
	booktitle = {Proceedings of the {XP2017} {Scientific} {Workshops}},
	publisher = {Association for Computing Machinery},
	author = {Ibba, Simona and Pinna, Andrea and Seu, Matteo and Pani, Filippo Eros},
	year = {2017},
	note = {event-place: Cologne, Germany},
	keywords = {blockchain, internet of things, SCRUM, sensing, smart cities},
}

@inproceedings{peng_research_2022,
	address = {New York, NY, USA},
	series = {{AISS} '21},
	title = {Research on the {Application} of {Blockchain} in {Educational} {Resources}},
	isbn = {978-1-4503-8586-2},
	url = {https://doi.org/10.1145/3503047.3503092},
	doi = {10.1145/3503047.3503092},
	abstract = {In recent years, the development of digital educational resources has advanced by leaps and bounds, but the problem of copyright protection of educational resources has become increasingly prominent. Based on the phenomenon that it is difficult to solve the problems of copyright traceability, platform monopoly and transaction protection by existing digital resource protection methods, using the characteristics that it is difficult to tamper with the blockchain achieves the purpose of copyright traceability, using the decentralization feature realizes the resource antitrust function, and using the smart contract creates a secure trading environment. It is based on Spring Boot framework, Fabric distributed ledger, asymmetric encryption technology, IPFS and other technologies putting forward the design scheme of education platform based on blockchain technology. From the technical level, let the creators of educational resources be willing to share, dare to share educational resources, and let more learners obtain the knowledge they want.},
	booktitle = {Proceedings of the 3rd {International} {Conference} on {Advanced} {Information} {Science} and {System}},
	publisher = {Association for Computing Machinery},
	author = {Peng, Jiao and Yang, Shulin and Li, Xiang and Zhou, Meiqi and Huang, Yongliang},
	year = {2022},
	note = {event-place: Sanya, China},
	keywords = {Blockchain, Hyperledger Fabric, Educational Resources},
}

@inproceedings{goyal_blockchain_2021,
	address = {New York, NY, USA},
	series = {{SenSys} '21},
	title = {A {Blockchain} and {Machine} {Learning} {Based} {Framework} for {Efficient} {Health} {Insurance} {Management}},
	isbn = {978-1-4503-9097-2},
	url = {https://doi.org/10.1145/3485730.3493685},
	doi = {10.1145/3485730.3493685},
	abstract = {Having a health insurance is important for everybody, bearing in mind the increasing medical costs. Medical emergencies can have a severe financial and emotional impact. However, the current insurance system is very expensive and the claim settlement process is excessively lengthy, making it tedious. This results in policyholders not being able to successfully make a claim with their insurance company. In this paper, we focus on developing a fast and cost-effective framework based on blockchain technology and machine learning for the health insurance industry. Blockchain is capable of removing all third-party organisations by forming a smart contract, making the entire process more smooth, secure, and efficient. The contract settles the claim on documents submitted by the claimant. A ridge regression model is used for computing the premiums optimally, based on the total amount claimed under the current policy tenure, along with several other factors. A random forest classifier is applied for predicting the risk that helps in the computation of risk-rated premium rebate.},
	booktitle = {Proceedings of the 19th {ACM} {Conference} on {Embedded} {Networked} {Sensor} {Systems}},
	publisher = {Association for Computing Machinery},
	author = {Goyal, Adit and Elhence, Anubhav and Chamola, Vinay and Sikdar, Biplab},
	year = {2021},
	note = {event-place: Coimbra, Portugal},
	keywords = {Blockchain, Smart contract, Insurance, Machine Learning, Random Forest},
	pages = {511--515},
}

@inproceedings{wang_simulation-based_2021,
	series = {{WSC} '20},
	title = {Simulation-{Based} {Digital} {Twin} {Development} for {Blockchain} {Enabled} {End}-to-{End} {Industrial} {Hemp} {Supply} {Chain} {Risk} {Management}},
	isbn = {978-1-72819-499-8},
	abstract = {With the passage of the 2018 U.S. Farm Bill, Industrial Hemp production is moved from limited pilot programs to a regulated agriculture production system. However, Industrial Hemp Supply Chain (IHSC) faces critical challenges, including high complexity and variability, very limited production knowledge, and lack of data/information tracking. In this paper, we propose blockchain-enabled IHSC and develop a preliminary simulation-based digital twin for this distributed cyber-physical system (CPS) to support the process learning and risk management. Basically, we develop a two-layer blockchain with proof of authority smart contract, which can track the data and key information, improve the supply chain transparency, and leverage local authorities and state regulators to ensure the quality control verification. Then, we introduce a simulation-based digital twin for IHSC management, which can characterize the process spatial-temporal causal interdependencies and dynamic evolution to guide risk control and decision making. Our empirical study demonstrates the promising performance of proposed platform.},
	booktitle = {Proceedings of the {Winter} {Simulation} {Conference}},
	publisher = {IEEE Press},
	author = {Wang, Keqi and Xie, Wei and Wang, Bo and Pei, Jinxiang and Wu, Wencen and Baker, Mike and Zhou, Qi},
	year = {2021},
	note = {event-place: Orlando, Florida},
	pages = {3200--3211},
}

@inproceedings{pan_blockchain_2021,
	address = {New York, NY, USA},
	series = {{ICBCT} '21},
	title = {Blockchain {Based} {Transaction} {Management} {System} for {IC} {Industry}},
	isbn = {978-1-4503-8962-4},
	url = {https://doi.org/10.1145/3460537.3460539},
	doi = {10.1145/3460537.3460539},
	abstract = {With the development of Internet technology, all walks of life are undergoing industrial revolution and upgrading. Nowadays, many transactions in the integrated circuit (IC) industry chain have moved from offline to online, most of which are completed through trusted third-party platforms as the transaction medium. This transaction model, which relies on centralized institutions, is vulnerable to malicious cyberattacks, poses a risk of core technology theft for technology-intensive industries, and lacks the ability to trace the trajectory of transactions. To solve the above problems, this paper proposes a consortium chain-based transaction management system for the IC industry chain based on the transaction characteristics of commodities in the IC industry chain, designs an improved Raft consensus mechanism based on stability, credibility and contribution factors, a Prometheus-based data monitoring mechanism, and a set of smart contracts for on-chain transactions, implements a prototype system and tests its performance. The results show that the system can solve the above problems well and has high credibility and stability.},
	booktitle = {2021 {The} 3rd {International} {Conference} on {Blockchain} {Technology}},
	publisher = {Association for Computing Machinery},
	author = {Pan, Lei and Wu, Yue and Zhou, Min and Yu, Faxin and Lu, Zheming and Chen, Hua},
	year = {2021},
	note = {event-place: Shanghai, China},
	keywords = {Blockchain, Smart contract, Consensus mechanism, Data monitoring, IC industry, Transaction management},
	pages = {60--66},
}

@inproceedings{chen_power_2021,
	address = {New York, NY, USA},
	series = {Internetware '20},
	title = {Power {Trading} {Model} for {Distributed} {Power} {Generation} {Systems} {Based} on {Consortium} {Blockchains}},
	isbn = {978-1-4503-8819-1},
	url = {https://doi.org/10.1145/3457913.3457929},
	doi = {10.1145/3457913.3457929},
	abstract = {Distributed power generation systems based on clean energy experience a large development worldwide. However, existing centralized power trading models cannot support direct transactions between distributed power generation systems and power consumers. Existing centralized power trading models suffer from multi-agent untrustworthiness and risk of data tampering. In addition, the direct transactions involve a large number of producers and consumers, thus requiring high efficiency of transaction processing in power trading models. To tackle with the problems, we propose a weakly centralized power trading model based on consortium blockchains in this paper. The trading model facilitate the power trading process by using smart contracts on consortium blockchains. In addition, we propose an approach based on the Hotelling theory to determine the pricing for transaction in our power trading model. The experimental results show that our power trading model provides a stable throughput as the request rate of transactions increases. The power trading model proposed in this paper is more practical than those based on public blockchains.},
	booktitle = {Proceedings of the 12th {Asia}-{Pacific} {Symposium} on {Internetware}},
	publisher = {Association for Computing Machinery},
	author = {Chen, Ran and Zhang, Jiabei and Yuan, Fuquan and Zhou, Bo and Shi, Wei and Zhou, Haiming},
	year = {2021},
	note = {event-place: Singapore, Singapore},
	keywords = {Smart Contract, Hotelling Model, Keyword: Consortium Blockchain, Power Trading},
	pages = {91--98},
}

@inproceedings{xue_adaptive_2022,
	address = {New York, NY, USA},
	series = {{ICBCT}'22},
	title = {An {Adaptive} {State} {Supervising} {Method} for {Power} {Data} {Blockchain} {Based} on {Relay} {Mechanism}},
	isbn = {978-1-4503-9576-2},
	url = {https://doi.org/10.1145/3532640.3532659},
	doi = {10.1145/3532640.3532659},
	abstract = {With the continuous advancement of Power Blockchain constructions, many domestic companies have established multiple blockchain applications such as Smart Contract, Smart Finance, Energy Cloud and so on. While blockchain is in the stage of developing, thus there exists a lot of problems on these established blockchain applications. Supervision on chain data is one of these problems and it is always difficult, in order to resolve this problem, we propose a supervising method based on relay mechanism to monitor the chain data adaptively and to detect and control the abnormal data timely. We generate the data according to the data structure of the power distribution automation system for anomaly detection. The experimental results show that the proposed supervision algorithm detects abnormal power data in time, and adaptively updates the algorithm parameters according to the changes of the data on the chain, ensuring the accuracy of the detection results, and can help the supervisory unit to supervise the data on chain.},
	booktitle = {The 2022 4th {International} {Conference} on {Blockchain} {Technology}},
	publisher = {Association for Computing Machinery},
	author = {Xue, Wenhao and Yang, Cheng and Wu, Zhuofan},
	year = {2022},
	note = {event-place: Shanghai, China},
	keywords = {Blockchain, Power Distribution Automation System, Relay Mechanism},
	pages = {137--143},
}

@inproceedings{jacobsen_blockchain_2018,
	address = {New York, NY, USA},
	series = {Middleware '18},
	title = {Blockchain {Landscape} and {AI} {Renaissance}: {The} {Bright} {Path} {Forward}},
	isbn = {978-1-4503-6073-9},
	url = {https://doi.org/10.1145/3279945.3279947},
	doi = {10.1145/3279945.3279947},
	abstract = {Known for powering cryptocurrencies such as Bitcoin and Ethereum, blockchain is seen as a disruptive technology capable of revolutionizing a wide variety of domains, ranging from finance to governance, by offering superior security, reliability, and transparency founded upon a decentralized and democratic computational model. In this tutorial, we first present the original Bitcoin design, along with Ethereum and Hyperledger, and reflect on their design choices through the academic lens. We further provide an overview of potential applications and associated research challenges, as well as a survey of ongoing research directions related to byzantine fault-tolerance consensus protocols. We highlight the new opportunities blockchain creates for building the next generation of secure middleware platforms and explore the possible interplay between AI and blockchains, or more specifically, how blockchain technology can enable the notion of "decentralized intelligence." We conclude with a walkthrough demonstrating the process of developing a decentralized application using a popular Smart Contract language (Solidity) over the Ethereum platform},
	booktitle = {Proceedings of the 19th {International} {Middleware} {Conference} {Tutorials}},
	publisher = {Association for Computing Machinery},
	author = {Jacobsen, Hans-Arno and Sadoghi, Mohammad and Tabatabaei, Mohammad Hossein and Vitenberg, Roman and Zhang, Kaiwen},
	year = {2018},
	note = {event-place: Rennes, France},
	keywords = {Blockchain, Ethereum, Consensus, Bitcoin, Hyperledger},
}

@inproceedings{yang_blockchain_2019,
	address = {New York, NY, USA},
	series = {{ICCSE}'19},
	title = {A {Blockchain} {Based} {Smart} {Agent} {System} {Architecture}},
	isbn = {978-1-4503-7640-2},
	url = {https://doi.org/10.1145/3371238.3371244},
	doi = {10.1145/3371238.3371244},
	abstract = {With the popularity of artificial intelligence(AI), intelligent agents are potential to positively change people's lives in every aspect. Meanwhile, blockchain technology opens a new era of value exchange with trustless security among strangers. Its decentralized architecture and cryptography based data storage pattern bring light to vast application areas with high security and scalability requirements. In this work, we provide a general solution for intelligence application development on blockchain. Specifically, we propose a novel design of a smart agent inspired by the smart contract concept in the blockchain. Based on the proposed smart agents, a system architecture composed by smart agents is built supported by blockchain, where the agent network and blockchain network is overlapped. Then, a demonstration of the proposed architecture is designed in a case where private data required to be "properly protected" in a distributed manner. The implementation of the designed system is further conducted in the Ethereum development environment, showing the effectiveness and applicability of the proposed architecture in developing a secure distributed application.},
	booktitle = {Proceedings of the 4th {International} {Conference} on {Crowd} {Science} and {Engineering}},
	publisher = {Association for Computing Machinery},
	author = {Yang, Tianzhi and Liu, Yuan and Yang, Xiaodan and Kang, Yilin},
	year = {2019},
	note = {event-place: Jinan, China},
	keywords = {Blockchain, Smart contract, Smart agent},
	pages = {33--39},
}

@inproceedings{jian-zhi_research_2020,
	address = {New York, NY, USA},
	series = {{ICIIP} '19},
	title = {Research and {Implementation} of {Data} {Storage} {Management} {System} {Based} on {Blockchain} {Technology}},
	isbn = {978-1-4503-6191-0},
	url = {https://doi.org/10.1145/3378065.3378128},
	doi = {10.1145/3378065.3378128},
	abstract = {This thesis develops blockchain data storage management system based on the relevant basic theory of blockchain. The system is based on an open source project of Hyperledger. Through the integration of various projects, this paper introduces a blockchain data transmission management system to provide users with a series of services related to data sharing and management across units. The system uses blockchain technology to solve the problems of encryption, disaster tolerance, sharing, and multi-unit coordination. This system uses smart contracts to ensure the security of the data used, without the involvement of third-party authorities or central proxy services, and without the need to set up a separate server. The system mainly reflects the characteristics of system decentralization, trust, secure transmission, collective maintenance, and trusted data management. The system uses the Java language, the Linux development environment, based on the fabric project, the league chain as the technology foundation, and the hierarchical structure design idea.},
	booktitle = {Proceedings of the 4th {International} {Conference} on {Intelligent} {Information} {Processing}},
	publisher = {Association for Computing Machinery},
	author = {Jian-zhi, Deng and Hao, Wu and Xuan, Guo},
	year = {2020},
	note = {event-place: China, China},
	keywords = {Blockchain, smart contract, consensus, league chain},
	pages = {325--333},
}

@inproceedings{zheng_detailed_2018,
	address = {New York, NY, USA},
	series = {{ICSE}-{SEIP} '18},
	title = {A {Detailed} and {Real}-{Time} {Performance} {Monitoring} {Framework} for {Blockchain} {Systems}},
	isbn = {978-1-4503-5659-6},
	url = {https://doi.org/10.1145/3183519.3183546},
	doi = {10.1145/3183519.3183546},
	abstract = {Blockchain systems, with the characteristics of decentralization, irreversibility and traceability, have attracted a lot of attentions recently. However, the current performance of blockchain is poor, which becomes a major constraint of its applications. Additionally, different blockchain systems lack standard performance monitoring approach which can automatically adapt to different systems and provide detailed and real-time performance information. To solve this problem, we propose overall performance metrics and detailed performance metrics for the users to know the exact performance in different stages of the blockchain. Then we propose a performance monitoring framework with a log-based method. It has advantages of lower overhead, more details, and better scalability than the previous performance monitoring approaches. Finally we implement the framework to monitor four well-known blockchain systems, using a set of 1,000 open-source smart contracts. The experimental results show that our framework can make detailed and real-time performance monitoring of blockchain systems. We also provide some suggestions for the future development of blockchain systems.},
	booktitle = {Proceedings of the 40th {International} {Conference} on {Software} {Engineering}: {Software} {Engineering} in {Practice}},
	publisher = {Association for Computing Machinery},
	author = {Zheng, Peilin and Zheng, Zibin and Luo, Xiapu and Chen, Xiangping and Liu, Xuanzhe},
	year = {2018},
	note = {event-place: Gothenburg, Sweden},
	keywords = {blockchain, smart contract, performance, monitoring},
	pages = {134--143},
}

@inproceedings{gudgeon_defi_2020,
	address = {New York, NY, USA},
	series = {{AFT} '20},
	title = {{DeFi} {Protocols} for {Loanable} {Funds}: {Interest} {Rates}, {Liquidity} and {Market} {Efficiency}},
	isbn = {978-1-4503-8139-0},
	url = {https://doi.org/10.1145/3419614.3423254},
	doi = {10.1145/3419614.3423254},
	abstract = {We coin the term Protocols for Loanable Funds (PLFs) to refer to protocols which establish distributed ledger-based markets for loanable funds. PLFs are emerging as one of the main applications within Decentralized Finance (DeFi), and use smart contract code to facilitate the intermediation of loanable funds. In doing so, these protocols allow agents to borrow and save programmatically. Within these protocols, interest rate mechanisms seek to equilibrate the supply and demand for funds. In this paper, we review the methodologies used to set interest rates on three prominent DeFi PLFs, namely Compound, Aave and dYdX. We provide an empirical examination of how these interest rate rules have behaved since their inception in response to differing degrees of liquidity. We then investigate the market efficiency and inter-connectedness between multiple protocols, examining first whether Uncovered Interest Parity holds within a particular protocol and second whether the interest rates for a particular token market show dependence across protocols, developing a Vector Error Correction Model for the dynamics.},
	booktitle = {Proceedings of the 2nd {ACM} {Conference} on {Advances} in {Financial} {Technologies}},
	publisher = {Association for Computing Machinery},
	author = {Gudgeon, Lewis and Werner, Sam and Perez, Daniel and Knottenbelt, William J.},
	year = {2020},
	note = {event-place: New York, NY, USA},
	keywords = {Ethereum, Borrowing, Cryptocurrencies, DeFi Blockchain, Lending, Protocols for Loanable Funds},
	pages = {92--112},
}

@inproceedings{hou_su_automating_2022,
	address = {New York, NY, USA},
	series = {{WSDM} '22},
	title = {Automating {ETL} and {Mining} of {Ethereum} {Blockchain} {Network}},
	isbn = {978-1-4503-9132-0},
	url = {https://doi.org/10.1145/3488560.3502187},
	doi = {10.1145/3488560.3502187},
	abstract = {The popularity of blockchain technology led to the development of many web platforms with different functionalities. Ethereum, a decentralized, open-source blockchain featuring smart contracts, introduces an interesting ecosystem of human users and autonomous agents (the contracts). It is the most actively used blockchain platform, hosting ether, the second largest cryptocurrency by market capitalization, as its native store of value. The Ethereum blockchain contains a vast amount of user-to-user, user-to-contract, contract-to -user, and contract-to-contract interactions that can be modeled as complex networks. To mine these interactions as graphs through a preferred analytics toolbox, an end-user has to extract, transform, and load (ETL) the required data into the desired network format. However, it is costly and time-consuming to manage the ETL pipeline for the massive and complex blockchain data. To support research in this domain, we develop an end-to-end, automated tool - EtherNet, which performs ETL tasks from a single source of truth (Google BigQuery), and provides graph equivalent representations for visualization and mining on the entire Ethereum blockchain network.},
	booktitle = {Proceedings of the {Fifteenth} {ACM} {International} {Conference} on {Web} {Search} and {Data} {Mining}},
	publisher = {Association for Computing Machinery},
	author = {Hou Su, Voon and Sen Gupta, Sourav and Khan, Arijit},
	year = {2022},
	note = {event-place: Virtual Event, AZ, USA},
	keywords = {and load, ethereum blockchain network, extract, financial data mining, transform},
	pages = {1581--1584},
}

@inproceedings{hu_blockchain-based_2022,
	address = {New York, NY, USA},
	series = {{ICBCT}'22},
	title = {A {Blockchain}-{Based} {Cross}-{Domain} {Data} {Sharing} {Scheme} for {VANETs}},
	isbn = {978-1-4503-9576-2},
	url = {https://doi.org/10.1145/3532640.3532656},
	doi = {10.1145/3532640.3532656},
	abstract = {Recently, the rapid development of 5G communication technology enables the interaction and data sharing in the vehicular ad-hoc networks, which further improves the vehicular safety and travel efficiency. However, the current researches of vehicular data sharing and management only focus on a single domain, while fail to adapt to the multi-domain scenarios. Moreover, the issues of privacy preserving and resistance of attacks are also not considered. To this end, we propose a hierarchical data sharing and management system for vehicular ad-hoc networks by combining blockchain and trusted execution environments to achieve transparent data transmission and privacy preserving, wherein the consortium blockchain is regarded as the underlying platform, and the trusted execution environments using Intel SGX is leveraged to guarantee the secure execution of smart contract. Finally, the security analysis and performance evaluation are provided to show that our system can perform well in terms of privacy preserving and data sharing efficiency.},
	booktitle = {The 2022 4th {International} {Conference} on {Blockchain} {Technology}},
	publisher = {Association for Computing Machinery},
	author = {Hu, Juhao and Yang, Yuhan and Wu, Jing and Long, Chengnian},
	year = {2022},
	note = {event-place: Shanghai, China},
	keywords = {Data sharing, Consortium blockchain, Privacy preserving, Trusted execution environments, Vehicular ad-hoc networks},
	pages = {117--125},
}

@inproceedings{murugesan_survey_2022,
	address = {New York, NY, USA},
	series = {{ICEGOV} '21},
	title = {A {Survey} on {Blockchain}-{Based} {Student} {Certificate} {Management} {System}},
	isbn = {978-1-4503-9011-8},
	url = {https://doi.org/10.1145/3494193.3494199},
	doi = {10.1145/3494193.3494199},
	abstract = {Blockchain Technology's first application is Bitcoin. It started its journey with cryptocurrency in 2008 by Satoshi Nakamoto. After that, it travelled in many areas such as Government, healthcare, academics, supply chain management, Intellectual property management, social welfare, and energy system. Australia, UAE, Japan are some of the top countries using blockchain technology in various government projects. One can use blockchain technology with decentralised storage of data, which is distributed, immutable, tamper resistance, and securable with a consensus mechanism. Today, many government sectors, organisations, companies, and institutions follow blockchain technology using smart contracts that do not require third-party agreements. We have conducted a systematic survey on blockchain-based digital certification to find the research gap in this research work. We carry out the following: (i) Investigation on the reasons to use the blockchain in education system (ii) Classification of blockchain projects into five categories based on services provided by the projects and platforms used for development (iii) Identification of the services provided by the project and the technologies used for the development.},
	booktitle = {Proceedings of the 14th {International} {Conference} on {Theory} and {Practice} of {Electronic} {Governance}},
	publisher = {Association for Computing Machinery},
	author = {Murugesan, Sarala and Benakanahally Lakshminarasaiah, Muralidhara},
	year = {2022},
	note = {event-place: Athens, Greece},
	pages = {44--50},
}

@inproceedings{liao_speedster_2022,
	address = {New York, NY, USA},
	series = {{ASIA} {CCS} '22},
	title = {Speedster: {An} {Efficient} {Multi}-{Party} {State} {Channel} via {Enclaves}},
	isbn = {978-1-4503-9140-5},
	url = {https://doi.org/10.1145/3488932.3523259},
	doi = {10.1145/3488932.3523259},
	abstract = {State channel network is the most popular layer-2 solution to the issues of scalability, high transaction fees, and low transaction throughput of public Blockchain networks. However, the existing works have limitations that curb the wide adoption of the technology, such as the expensive creation and closure of channels, strict synchronization between the main chain and off-chain channels, frozen deposits, and inability to execute multi-party smart contracts. In this work, we present Speedster, an account-based state-channel system that aims to address the above issues. To this end, Speedster leverages the latest development of secure hardware to create dispute-free certified channels that can be operated efficiently off the Blockchain. Speedster is peer-to-peer decentralized and provides better privacy protection than prior channel projects. It supports fast native multi-party contract execution, which is previously unavailable in TEE-enabled channel networks. Compared to the Lightning Network, Speedster improves the throughput by about 10,000X and generates 97\%\$ less on-chain data with a comparable network scale.},
	booktitle = {Proceedings of the 2022 {ACM} on {Asia} {Conference} on {Computer} and {Communications} {Security}},
	publisher = {Association for Computing Machinery},
	author = {Liao, Jinghui and Zhang, Fengwei and Sun, Wenhai and Shi, Weisong},
	year = {2022},
	note = {event-place: Nagasaki, Japan},
	keywords = {layer-2, multi-party state channel, off-chain smart contracts, scalability},
	pages = {637--651},
}

@inproceedings{zichichi_governing_2021,
	address = {New York, NY, USA},
	series = {{GoodIT} '21},
	title = {Governing {Decentralized} {Complex} {Queries} {Through} a {DAO}},
	isbn = {978-1-4503-8478-0},
	url = {https://doi.org/10.1145/3462203.3475910},
	doi = {10.1145/3462203.3475910},
	abstract = {Recently, a new generation of P2P systems capable of addressing data integrity and authenticity has emerged for the development of new applications for a "more" decentralized Internet, i.e., Distributed Ledger Technologies (DLT) and Decentralized File Systems (DFS). However, these technologies still have some unanswered issues, mostly related to data lookup and discovery. In this paper, first, we propose a Distributed Hash Table (DHT) system that efficiently manages decentralized keyword-based queries executed on data stored in DFS. Through a hypercube logical layout, queries are efficiently routed among the network, where each node is responsible for a specific keywords set and the related contents. Second, we provide a framework for the governance of the above network, based on a Decentralized Autonomous Organization (DAO) implementation. We show how the use of smart contracts enables organizational decision making and rewards for nodes that have actively contributed to the DHT. Finally, we provide experimental validation of an implementation of our proposal, where the execution of the same protocol for different logical nodes of the hypercube allows us to evaluate the efficiency of communication within the network.},
	booktitle = {Proceedings of the {Conference} on {Information} {Technology} for {Social} {Good}},
	publisher = {Association for Computing Machinery},
	author = {Zichichi, Mirko and Serena, Luca and Ferretti, Stefano and D'Angelo, Gabriele},
	year = {2021},
	note = {event-place: Roma, Italy},
	keywords = {Smart Contracts, Decentralized File Storage, Distributed Hash Table, Distributed Ledger Technology, Keyword Search},
	pages = {121--126},
}

@inproceedings{kim_performance_2022,
	address = {New York, NY, USA},
	series = {{ICCDE} 2022},
	title = {Performance {Evaluation} of {NFT} {Trading} {Platform} {Based} on {Hyperledger} {Fabric} {Blockchain}},
	isbn = {978-1-4503-9571-7},
	url = {https://doi.org/10.1145/3512850.3512855},
	doi = {10.1145/3512850.3512855},
	abstract = {This paper proposes a NFT (Non-Fungible Token) trading platform over Hyperledger Fabric blockchain, proceeding with performance evaluation to confirm innovatory speed improvement and power conservation. The growing public interest for NFTs in recent years has played a major role in expanding the market size. However, as a result of expansion, massive overload to the Ethereum network occurred, leading to high gas costs for trading NFT assets, which is rather considered a burdensome amount. To overcome this problem, we introduce a NFT trading platform on Hyperledger Fabric with reference to ERC-721 standard of Ethereum. ERC-721 standard is implemented by Hyperledger Fabric chaincode, which is similar to Ethereum smart contract, where all features of the current protocol are implemented. Parallel processing of Hyperledger fabric enables fast NFT trade management with minimal cost since no gas cost is required with Hyperledger Fabric Raft consensus protocol. It is applicable to fields other than the most actively traded works of art. By providing an optimized trading environment, we expect further development of the NFT trading industry.},
	booktitle = {2022 {The} 8th {International} {Conference} on {Computing} and {Data} {Engineering}},
	publisher = {Association for Computing Machinery},
	author = {Kim, Ju Won and Song, Jae Geun and Lee, Tae Rim and Jang, Ju Wook},
	year = {2022},
	note = {event-place: Bangkok, Thailand},
	keywords = {Blockchain, Hyperledger Fabric, NFT (Non-Fungible Token)},
	pages = {65--70},
}

@inproceedings{kim_measuring_2018,
	address = {New York, NY, USA},
	series = {{IMC} '18},
	title = {Measuring {Ethereum} {Network} {Peers}},
	isbn = {978-1-4503-5619-0},
	url = {https://doi.org/10.1145/3278532.3278542},
	doi = {10.1145/3278532.3278542},
	abstract = {Ethereum, the second-largest cryptocurrency valued at a peak of \$138 billion in 2018, is a decentralized, Turing-complete computing platform. Although the stability and security of Ethereum—and blockchain systems in general—have been widely-studied, most analysis has focused on application level features of these systems such as cryptographic mining challenges, smart contract semantics, or block mining operators. Little attention has been paid to the underlying peer-to-peer (P2P) networks that are responsible for information propagation and that enable blockchain consensus. In this work, we develop NodeFinder to measure this previously opaque network at scale and illuminate the properties of its nodes. We analyze the Ethereum network from two vantage points: a three-month long view of nodes on the P2P network, and a single day snapshot of the Ethereum Mainnet peers. We uncover a noisy DEVp2p ecosystem in which fewer than half of all nodes contribute to the Ethereum Mainnet. Through a comparison with other previously studied P2P networks including BitTorrent, Gnutella, and Bitcoin, we find that Ethereum differs in both network size and geographical distribution.},
	booktitle = {Proceedings of the {Internet} {Measurement} {Conference} 2018},
	publisher = {Association for Computing Machinery},
	author = {Kim, Seoung Kyun and Ma, Zane and Murali, Siddharth and Mason, Joshua and Miller, Andrew and Bailey, Michael},
	year = {2018},
	note = {event-place: Boston, MA, USA},
	keywords = {Ethereum, DEVp2p, network measurement, peer-to-peer computing},
	pages = {91--104},
}

@inproceedings{li_privacy-protecting_2021,
	address = {New York, NY, USA},
	series = {{CIAT} 2020},
	title = {A {Privacy}-{Protecting} {Authorization} {System} {Based} on {Blockchain} and {Zk}-{SNARK}},
	isbn = {978-1-4503-8782-8},
	url = {https://doi.org/10.1145/3444370.3444610},
	doi = {10.1145/3444370.3444610},
	abstract = {With the rapid development of blockchain, many service providers tend to provide users with network resources and services on the basis of blockchain, and most network resources are inseparable from the authorization. However, the current authorization mechanism based on blockchain is not perfect, which is easy to cause the user's identity attributes to be leaked, and not conducive to protecting the privacy of users. In order to improve the authorization mechanism based on the blockchain and protect the user's privacy to the greatest extent during the authorization process, we proposed a privacy-protecting authorization system based on blockchain and zk-SNARK. First of all, SP can authorize users through the blockchain smart contract. Second, in the authorization process, we introduced zk-SNARK. Using the zero-knowledge property of zk-SNARK, the SP can still authorize the users without knowing the identity attribute value of the users. Therefore, the proposed system can better protect the users' attribute privacy. Finally, we analyze the security of the proposed system, and the results show that it is computationally infeasible for an attacker to attack the system.},
	booktitle = {Proceedings of the 2020 {International} {Conference} on {Cyberspace} {Innovation} of {Advanced} {Technologies}},
	publisher = {Association for Computing Machinery},
	author = {Li, Qinan and Xue, Zhihao},
	year = {2021},
	note = {event-place: Guangzhou, China},
	keywords = {Blockchain, Smart Contract, Authorization, Privacy-Protecting, zk-SNARK},
	pages = {439--444},
}

@inproceedings{dawaliby_blockchain-based_2020,
	address = {New York, NY, USA},
	series = {{DroneCom} '20},
	title = {Blockchain-{Based} {IoT} {Platform} for {Autonomous} {Drone} {Operations} {Management}},
	isbn = {978-1-4503-8105-5},
	url = {https://doi.org/10.1145/3414045.3415939},
	doi = {10.1145/3414045.3415939},
	abstract = {The growing number of unmanned aerial vehicles (UAVs), typically referred to as drones, poses new challenges on how to manage their operations in various internet of things (IoT) use cases such as surveillance and monitoring, weather prediction, agriculture, etc. The latter includes a massive number of devices that sometimes produce invalid messages due to lack of energy or system shutdown and needs to be autonomously monitored with drones in rural areas. In this paper, we develop a blockchain-based platform for managing drone IoT operations while maintaining trust and security. The test-bed consists of IoT devices, a drone and blockchain-enabled gateways through which drones are controlled to replace malfunctioning devices. The latter are detected using Z-score observation algorithm which launches a smart contract and sends the drone with clear operation order. The results obtained in realistic agriculture use case highlight the utility of our proposition in decreasing signaling and operation time, improving the percentage of successful maintenance operations and providing trust and security when managing drones in an autonomous manner.},
	booktitle = {Proceedings of the 2nd {ACM} {MobiCom} {Workshop} on {Drone} {Assisted} {Wireless} {Communications} for {5G} and {Beyond}},
	publisher = {Association for Computing Machinery},
	author = {Dawaliby, Samir and Aberkane, Arezki and Bradai, Abbas},
	year = {2020},
	note = {event-place: London, United Kingdom},
	keywords = {blockchain, internet of things, decentralized management, drone operations, unmanned aerial vehicles},
	pages = {31--36},
}

@inproceedings{adkins_encrypted_2020,
	address = {New York, NY, USA},
	series = {{AFT} '20},
	title = {Encrypted {Blockchain} {Databases}},
	isbn = {978-1-4503-8139-0},
	url = {https://doi.org/10.1145/3419614.3423266},
	doi = {10.1145/3419614.3423266},
	abstract = {Blockchain databases are storage systems that combine properties of blockchains and databases like decentralization, tamperproofness, low query latency and support for complex queries. Blockchain databases are an emerging and important class of blockchain technology that is critical to the development of non-trivial smart contracts, distributed applications and decentralized marketplaces.In this work, we consider the problem of designing end-to-end encrypted blockchain databases to support the development of decentralized applications that need to store and query sensitive data. In particular, we show how to design what we call blockchain encrypted multi-maps (EMM) which can be used to instantiate various kinds of NoSQL blockchain databases like key-value stores or document databases. We propose three blockchain EMM constructions, each of which achieves different tradeoffs between query, add and delete efficiency. All of our constructions are legacy-friendly in the sense that they can be implemented on top of any existing blockchain. This is particularly challenging since blockchains do not support data deletion.We implemented our schemes on the Algorand blockchain and evaluated their concrete efficiency empirically. Our experiments show that they are practical.},
	booktitle = {Proceedings of the 2nd {ACM} {Conference} on {Advances} in {Financial} {Technologies}},
	publisher = {Association for Computing Machinery},
	author = {Adkins, Daniel and Agarwal, Archita and Kamara, Seny and Moataz, Tarik},
	year = {2020},
	note = {event-place: New York, NY, USA},
	keywords = {dynamic data on blockchains, encrypted blockchains, searchable encryption},
	pages = {241--254},
}

@inproceedings{dienbauer_penalty-aware_2021,
	address = {New York, NY, USA},
	series = {{iiWAS} '20},
	title = {A {Penalty}-{Aware} {Cloud} {Monitoring} {System} {Based} on {Blockchains}},
	isbn = {978-1-4503-8922-8},
	url = {https://doi.org/10.1145/3428757.3429130},
	doi = {10.1145/3428757.3429130},
	abstract = {Today, traded cloud services are described by service level agreements that specify the obligations of providers such as availability or reliability. Violations of service level agreements lead to penalty payments. The recent development of prominent cloud platforms such as the re-design of Amazon's spot marketspace underpins a trend towards dynamic cloud markets where consumers migrate their services continuously to different marketspaces and providers to reach a cost-optimum. This leads to a heterogeneous IT infrastructure and consequently aggravates the monitoring of the delivered service quality. Hence, there is a need for a transparent penalty management system, which ensures that consumers automatically get penalty payments from providers in case of service violations.In the paper at hand, we present a cloud monitoring system that is able to execute penalty payments autonomously. In this regard, we revert to smart contracts hosted on blockchains. They continuously monitor cloud services and trigger penalty payments to consumers in case of service violations. We implemented the presented approach with the IBM Hyperledger Fabric framework and created a use case with Amazon's cloud services as well as Azures cloud services to illustrate the universal design of the introduced approach.},
	booktitle = {Proceedings of the 22nd {International} {Conference} on {Information} {Integration} and {Web}-{Based} {Applications} \&amp; {Services}},
	publisher = {Association for Computing Machinery},
	author = {Dienbauer, Christian and Pittl, Benedikt and Mach, Werner and Schikuta, Erich},
	year = {2021},
	note = {event-place: Chiang Mai, Thailand},
	keywords = {Smart Contracts, Cloud Computing, Cloud Monitoring},
	pages = {154--162},
}

@inproceedings{he_blockchain-enabled_2022,
	address = {New York, NY, USA},
	series = {{BIOTC} '22},
	title = {A {Blockchain}-{Enabled} {Location} {Privacy}-{Preserving} under {Local} {Differential} {Privacy} for {Internet} of {Vehicles}},
	isbn = {978-1-4503-9662-2},
	url = {https://doi.org/10.1145/3559795.3559807},
	doi = {10.1145/3559795.3559807},
	abstract = {Location and user information can be shared and interacted in the Internet of Vehicles (IoV), which bring many benefits to drivers and consumers. However, private issues become more acute as their data is outsourced to third parties. It is easy for sensitive information to be leaked in a big data environment. To solve these problems, a location data algorithm that satisfies Local Differential Privacy (LDP) is proposed to protect user privacy. In this paper, we use the randomized response mechanism to reconstruct the Laplace algorithm so that it satisfies LDP, perturbing the original location of each user from the client. The user location is clustered using k-means clustering algorithm, the perturbed data are noise reduced in the blockchain software development kit (SDK), and the noise reduced location data is uploaded to the blockchain network for storage through smart contracts. In addition, the effectiveness of the privacy protection mechanism is verified by comparative experiments. Compared with the existing privacy protection methods, the privacy protection mechanism not only can meet the privacy needs of users better, but also the noise reduction algorithm in the SDK can restore the original data and has higher data availability.},
	booktitle = {Proceedings of the 2022 4th {Blockchain} and {Internet} of {Things} {Conference}},
	publisher = {Association for Computing Machinery},
	author = {He, Miao and Bai, Fenhua and Zhang, Chi and Shen, Tao and Gong, Bei},
	year = {2022},
	note = {event-place: Tokyo, China},
	pages = {84--91},
}

@inproceedings{zhou_trustworthy_2022,
	address = {New York, NY, USA},
	series = {{BIOTC} '22},
	title = {A {Trustworthy} {Ciphertext}-{Policy} {Attribute}-{Based} {Encryption} {Access} {Control} {Method} {Based} on {FAME} and {Blockchain}},
	isbn = {978-1-4503-9662-2},
	url = {https://doi.org/10.1145/3559795.3559801},
	doi = {10.1145/3559795.3559801},
	abstract = {Ciphertext-policy attribute-based encryption (CP-ABE) has been extensively applied in various types of conditional access control systems since its introduction because of its ability to provide fine-grained and flexible access control to confidential data, thus offering a safe and effective data sharing environment. However, while developing rapidly, the existing CP-ABE access schemes also face some problems, such as trustworthiness issues involving third-party intermediary entities, secret key management problems brought by single attribute authorization centers, and privacy leakage of attributes. How to achieve safe and effective decentralized access control has been a problem to be explored and solved. In this paper, a trustworthy, secure, and efficient ABE(TSE ABE) based on blockchain and fast attribute-based message encryption (FAME) is proposed by us. First, we combine blockchain and FAME and optimize them to make CP-ABE perform better. Second, we implement a trusted authorization model with multiple entities based on the BLS signature and smart contracts to address key privacy issues. Finally, we protect the privacy of attributes in the authorization matching process by RSA encryption algorithm. Through the experimental results, it can be found that the scheme not only has good security and execution performance but also achieves effective protection of user privacy.},
	booktitle = {Proceedings of the 2022 4th {Blockchain} and {Internet} of {Things} {Conference}},
	publisher = {Association for Computing Machinery},
	author = {Zhou, Zijian and Bai, Fenhua and Liu, Yingli and Zhang, Chi and Shen, Tao},
	year = {2022},
	note = {event-place: Tokyo, China},
	pages = {38--45},
}

@inproceedings{ren_is_2021,
	address = {New York, NY, USA},
	series = {{ICICM} '21},
	title = {Is {All}-{Win} {Possible}? {A} {Novel} {Smart} {Contracts}-{Based} {Music} {Recommendation} {System}},
	isbn = {978-1-4503-9019-4},
	url = {https://doi.org/10.1145/3484399.3484402},
	doi = {10.1145/3484399.3484402},
	abstract = {The current streaming music ecosystem provides a mature and prevalent platform for artists to publish music products and for listeners to consume music services. However, as the main power of streaming content producers, artists have little to no control over their musical works after assigning their copyrights and management to third parties, especially for long-tail artists. The booming development of blockchain technology in recent years brings a fresh change to the music industry. The clear copyrights recorded on-chain attract more and more artists to stand in line, although blockchain-based music platforms are still in their early stage of development. As the number of users and artists keeps increasing, some platforms continue to use the recommendation design of the current streaming music ecosystem. The shortage in this system could cause a long-tail phenomenon again. In this work, we proposed a novel music recommendation system by considering the value of three parties on the platform. Through designing two scheme-based recommendations by leveraging the flexible agreement design of smart contracts, we proposed an effective music promotion strategy for the blockchain-based music platform. It has been verified that the new model has attained significant improvement in the loyalty enhancement of platform users.},
	booktitle = {Proceedings of the 11th {International} {Conference} on {Information} {Communication} and {Management}},
	publisher = {Association for Computing Machinery},
	author = {Ren, Jing and Zhang, Yimiao},
	year = {2021},
	note = {event-place: Tokyo, Japan},
	keywords = {Smart contracts, All-Win, Music recommendation, Referral rewards, Two-sided Value},
	pages = {18--23},
}

@inproceedings{gregoriadis_analysis_2022,
	address = {New York, NY, USA},
	series = {{WWW} '22},
	title = {Analysis of {Arbitrary} {Content} on {Blockchain}-{Based} {Systems} {Using} {BigQuery}},
	isbn = {978-1-4503-9130-6},
	url = {https://doi.org/10.1145/3487553.3524628},
	doi = {10.1145/3487553.3524628},
	abstract = {Blockchain-based systems have gained immense popularity as enablers of independent asset transfers and smart contract functionality. They have also, since as early as the first Bitcoin blocks, been used for storing arbitrary contents such as texts and images. On-chain data storage functionality is useful for a variety of legitimate use cases. It does, however, also pose a systematic risk. If abused, for example by posting illegal contents on a public blockchain, data storage functionality can lead to legal consequences for operators and users that need to store and distribute the blockchain, thereby threatening the operational availability of entire blockchain ecosystems. In this paper, we develop and apply a cloud-based approach for quickly discovering and classifying content on public blockchains. Our method can be adapted to different blockchain systems and offers insights into content-related usage patterns and potential cases of abuse. We apply our method on the two most prominent public blockchain systems—Bitcoin and Ethereum—and discuss our results. To the best of our knowledge, the presented study is the first to systematically analyze non-financial content stored on the Ethereum blockchain and the first to present a side-by-side comparison between different blockchains in terms of the quality and quantity of stored data.},
	booktitle = {Companion {Proceedings} of the {Web} {Conference} 2022},
	publisher = {Association for Computing Machinery},
	author = {Gregoriadis, Marcel and Muth, Robert and Florian, Martin},
	year = {2022},
	note = {event-place: Virtual Event, Lyon, France},
	keywords = {Blockchain, Ethereum, Bitcoin, BigQuery, Cryptocurrency},
	pages = {478--487},
}

@inproceedings{six_using_2022,
	address = {New York, NY, USA},
	series = {{SPLC} '22},
	title = {Using {Software} {Product} {Lines} to {Create} {Blockchain} {Products}: {Application} to {Supply} {Chain} {Traceability}},
	isbn = {978-1-4503-9443-7},
	url = {https://doi.org/10.1145/3546932.3547001},
	doi = {10.1145/3546932.3547001},
	abstract = {In recent years, blockchain has been growing rapidly from a niche technology to a promising solution for many sectors, due to its unique properties that empower the design of innovative applications. Nevertheless, the development of blockchain applications is still a challenge. Due to the technological novelty, only a few developers are familiar with blockchain technologies and smart contracts. Others might face a steep learning curve or difficulties to reuse existing code to build blockchain applications. This study proposes a novel approach to tackle these issues, through software product line engineering. To support the approach, a web platform to configure and generate a blockchain application for on-chain traceability is introduced. First, a feature model has been designed to model core features of the chosen domain, based on the existing literature. Then, a configurator has been implemented to support the feature selection phase. Finally, a generator is able to ingest such configurations to generate on-the-shelf blockchain products. The generalizability of the contribution is validated by reproducing on-chain traceability applications proposed in the literature by using the platform. This work provides the first evidence that the implementation of blockchain applications using software product lines enhances the quality of produced applications and reduces the time to market.},
	booktitle = {Proceedings of the 26th {ACM} {International} {Systems} and {Software} {Product} {Line} {Conference} - {Volume} {A}},
	publisher = {Association for Computing Machinery},
	author = {Six, Nicolas and Herbaut, Nicolas and Lopez-Herrejon, Roberto Erick and Salinesi, Camille},
	year = {2022},
	note = {event-place: Graz, Austria},
	keywords = {blockchain, code generation, software product line},
	pages = {97--107},
}

@inproceedings{marchesi_agile_2018,
	address = {New York, NY, USA},
	series = {{CEE}-{SECR} '18},
	title = {An {Agile} {Software} {Engineering} {Method} to {Design} {Blockchain} {Applications}},
	isbn = {978-1-4503-6176-7},
	url = {https://doi.org/10.1145/3290621.3290627},
	doi = {10.1145/3290621.3290627},
	abstract = {Cryptocurrencies and their foundation technology, the Blockchain, are reshaping finance and economics, allowing a decentralized approach enabling trusted applications with no trusted counterpart. More recently, the Blockchain and the programs running on it, called Smart Contracts, are also finding more and more applications in all fields requiring trust and sound certifications. Some people have come to the point of saying that the "Blockchain revolution" can be compared to that of the Internet and the Web in their early days. As a result, all the software development revolving around the Blockchain technology is growing at a staggering rate. The feeling of many software engineers about such huge interest in Blockchain technologies is that of unruled and hurried software development, a sort of competition on a first-come-first-served basis which does not assure neither software quality, nor that the basic concepts of software engineering are taken into account.This paper tries to cope with this issue, proposing a software development process to gather the requirement, analyze, design, develop, test and deploy Blockchain applications. The process is based on several Agile practices, such as User Stories and iterative and incremental development based on them. However, it makes also use of more formal notations, such as some UML diagrams describing the design of the system, with additions to represent specific concepts found in Blockchain development. The method is described in good detail, and an example is given to show how it works.},
	booktitle = {Proceedings of the 14th {Central} and {Eastern} {European} {Software} {Engineering} {Conference} {Russia}},
	publisher = {Association for Computing Machinery},
	author = {Marchesi, Michele and Marchesi, Lodovica and Tonelli, Roberto},
	year = {2018},
	note = {event-place: Moscow, Russian Federation},
	keywords = {Blockchain, Smart Contracts, UML, Blockchain-oriented software engineering, dApp design},
}

@inproceedings{qin_research_2021,
	address = {New York, NY, USA},
	series = {{ICBCT} '21},
	title = {Research on {Design} and {Application} of {Power} {Dispatch} {Based} on {Blockchain}},
	isbn = {978-1-4503-8962-4},
	url = {https://doi.org/10.1145/3460537.3460564},
	doi = {10.1145/3460537.3460564},
	abstract = {With the large-scale access of renewable energy and the rapid development of electricity market operation, power dispatch urgently needs to improve the level of instant information sharing and service management capabilities. Through the blockchain technology, it can realize the credible sharing and traceability of key data, and further promote the efficiency of power dispatch collaboration management as well as the openness and transparency of the process of power dispatch. In this paper, the adaptability of blockchain and power dispatch business is analyzed, a power dispatch model with hierarchical management and hierarchical storage based on blockchain is proposed, and a fully functional dispatch blockchain platform is developed. Customized smart contracts are used to realize the automatic execution of the dispatch assessment and evaluation, and a consistency check mechanism is designed for the key data of the security and stability control device. Finally, two typical scenarios of dispatch management assessment and dispatch data management are selected for application research. The results show that the power dispatch model based on blockchain can significantly improve the transparency and operation efficiency of power dispatch, reduce the impact of the misoperation of the security and stability control device on the power grid, and promote the safe and stable operation of power grid.},
	booktitle = {2021 {The} 3rd {International} {Conference} on {Blockchain} {Technology}},
	publisher = {Association for Computing Machinery},
	author = {Qin, Rizhen and Zhao, Lihua and Li, Da and Yang, Ke and Xuan, Jiaxing and Wang, Hejian},
	year = {2021},
	note = {event-place: Shanghai, China},
	keywords = {Blockchain, Smart Contract, Dispatch Data Management, Dispatch Management Assessment, Power Dispatch},
	pages = {155--162},
}

@inproceedings{rashid_blockchain-based_2022,
	address = {New York, NY, USA},
	series = {{GoodIT} '22},
	title = {A {Blockchain}-{Based} {Approach} in {Healthcare} {Supply} {Chain} {Using} {Smart} {Contracts} and {Decentralized} {Storage} {Systems}},
	isbn = {978-1-4503-9284-6},
	url = {https://doi.org/10.1145/3524458.3547251},
	doi = {10.1145/3524458.3547251},
	abstract = {Despite substantial advancements in healthcare systems and management, little progress has been achieved in addressing supply chain constraints such as, inefficient purchasing, ordering, predicting, and administration procedures. Healthcare authorities needs to effectively manage the healthcare supply chain processes not just during pandemics like COVID-19, but also in their everyday operations to guarantee best possible services. Product recalls, product supply shortage monitoring, expiry, and counterfeiting are some of the critical healthcare supply chain operations which must be ensured. Our suggested solution combines blockchain technology and distributed storage to increase transparency, improve stakeholder communication, and shorten product procurement timelines while eliminating crucial disparities and faults. We present a generic framework for the healthcare supply chain, equipped with comprehensive algorithms showing various stakeholder interactions. Our system uses the Ethereum network to link all parties, including the healthcare authority, manufacturer, wholesaler, retailer, and healthcare provider. Remix IDE platform was used to develop and test the smart contract codes. As decentralized storage, we have used the combination of InterPlanetary File System (IPFS) and Hyperledger Fabric. We have also examined a variety of security issues, provided a cost analysis of the various transactions proposed in our solution while making comparison with similar blockchain-based solutions.},
	booktitle = {Proceedings of the 2022 {ACM} {Conference} on {Information} {Technology} for {Social} {Good}},
	publisher = {Association for Computing Machinery},
	author = {Rashid, Md Mamunur and Lee, Suk-Hwan and Choi, Piljoo and Kwon, Ki-Ryong},
	year = {2022},
	note = {event-place: Limassol, Cyprus},
	keywords = {Blockchain, Healthcare, Supply Chain Management},
	pages = {300--307},
}

@inproceedings{du_seed_2022,
	address = {New York, NY, USA},
	series = {{SIGCSE} 2022},
	title = {{SEED} {Internet} {Emulator}: {An} {Open}-{Source} {Tool} for {Network} and {Cybersecurity} {Courses}},
	isbn = {978-1-4503-9071-2},
	url = {https://doi.org/10.1145/3478432.3499260},
	doi = {10.1145/3478432.3499260},
	abstract = {In cybersecurity courses, it is quite challenging to do hands-on activities that involve many components of the Internet, such as bringing down the Internet, attacking a blockchain, etc. To solve this problem, we have developed an open-source Internet Emulator, which is a Python library, consisting of the classes for each essential element of the Internet, including autonomous system, network, host, router, BGP router, Internet exchange, etc. It also includes the classes for a variety of services, including Web, DNS, Botnet, Darknet, Blockchain, and more are being developed. Using these classes, users can construct a mini-Internet to emulate the real-world Internet. Although it is small, it has all the essential elements of the real Internet. The construction is compiled into Docker container files, and the emulation is executed by Docker on a single machine or on multiple cloud machines. With this Internet Emulator, we can develop hands-on activities for cybersecurity courses, including BGP prefix hijacking, attacks on smart contract, using Darknet to achieve anonymity, launching Botnet and ransomware attacks, etc. While the emulator was initially developed for cybersecurity courses, it can also be used for network courses, for students to learn how the Internet technologies work, such as routing, BGP, IP Anycast, DNS, CDN, and many other interesting technologies.},
	booktitle = {Proceedings of the 53rd {ACM} {Technical} {Symposium} on {Computer} {Science} {Education} {V}. 2},
	publisher = {Association for Computing Machinery},
	author = {Du, Wenliang},
	year = {2022},
	note = {event-place: Providence, RI, USA},
	keywords = {cybersecurity, internet emulation, networking},
	pages = {1180},
}

@inproceedings{li_application_2022,
	address = {New York, NY, USA},
	series = {{EITCE} '21},
	title = {Application and {Research} of {Carbon} {Asset} {Management} {Based} on {Blockchain}},
	isbn = {978-1-4503-8432-2},
	url = {https://doi.org/10.1145/3501409.3501530},
	doi = {10.1145/3501409.3501530},
	abstract = {With the accelerated implementation of my country's carbon emission quota system and the continuous deepening of the national carbon market, more and more companies will participate in carbon asset management. Improving the level of intelligence in carbon asset management, reducing the cost of participating entities in the carbon market, and simplifying the carbon asset management process can effectively stimulate market vitality and innovate carbon market business models. Firstly, introduce the nature and necessity of carbon asset management, point out the basic process of carbon asset management, and analyze the current challenges facing my country's carbon asset management. Secondly, it introduces the technical characteristics and application status of blockchain, combined with the needs of carbon asset management, and proposes the application concept of carbon asset management based on blockchain. Then, it systematically elaborates the application design of blockchain technology in the whole process of carbon asset management, designing carbon asset data deposit certificates based on blockchain technology, carbon market entity identity authentication management, and application of smart contract transactions from the three aspects of architecture, and carbon emission traceability management, And carbon emission traceability management. Finally, a prospect is put forward for the future development of the blockchain carbon asset management application market that supports small, medium and micro enterprises as the main body.},
	booktitle = {Proceedings of the 2021 5th {International} {Conference} on {Electronic} {Information} {Technology} and {Computer} {Engineering}},
	publisher = {Association for Computing Machinery},
	author = {Li, Guomin and Li, Jiangtao and {Lili-Li}},
	year = {2022},
	note = {event-place: Xiamen, China},
	keywords = {Blockchain, Carbon asset management, carbontrading},
	pages = {672--679},
}

@inproceedings{chakraborty_understanding_2018,
	address = {New York, NY, USA},
	series = {{ESEM} '18},
	title = {Understanding the {Software} {Development} {Practices} of {Blockchain} {Projects}: {A} {Survey}},
	isbn = {978-1-4503-5823-1},
	url = {https://doi.org/10.1145/3239235.3240298},
	doi = {10.1145/3239235.3240298},
	abstract = {Background: The application of the blockchain technology has shown promises in various areas, such as smart-contracts, Internet of Things, land registry management, identity management, etc. Although Github currently hosts more than three thousand active blockchain software (BCS) projects, a few software engineering research has been conducted on their software engineering practices. Aims: To bridge this gap, we aim to carry out the first formal survey to explore the software engineering practices including requirement analysis, task assignment, testing, and verification of blockchain software projects. Method: We sent an online survey to 1,604 active BCS developers identified via mining the Github repositories of 145 popular BCS projects. The survey received 156 responses that met our criteria for analysis. Results: We found that code review and unit testing are the two most effective software development practices among BCS developers. The results suggest that the requirements of BCS projects are mostly identified and selected by community discussion and project owners which is different from requirement collection of general OSS projects. The results also reveal that the development tasks in BCS projects are primarily assigned on voluntary basis, which is the usual task assignment practice for OSS projects. Conclusions: Our findings indicate that standard software engineering methods including testing and security best practices need to be adapted with more seriousness to address unique characteristics of blockchain and mitigate potential threats.},
	booktitle = {Proceedings of the 12th {ACM}/{IEEE} {International} {Symposium} on {Empirical} {Software} {Engineering} and {Measurement}},
	publisher = {Association for Computing Machinery},
	author = {Chakraborty, Partha and Shahriyar, Rifat and Iqbal, Anindya and Bosu, Amiangshu},
	year = {2018},
	note = {event-place: Oulu, Finland},
	keywords = {blockchain, ethereum, cryptocurrency, bitcoin, survey},
}

@inproceedings{desai_blockfla_2021,
	address = {New York, NY, USA},
	series = {{CODASPY} '21},
	title = {{BlockFLA}: {Accountable} {Federated} {Learning} via {Hybrid} {Blockchain} {Architecture}},
	isbn = {978-1-4503-8143-7},
	url = {https://doi.org/10.1145/3422337.3447837},
	doi = {10.1145/3422337.3447837},
	abstract = {Federated Learning (FL) is a distributed, and decentralized machine learning protocol. By executing FL, a set of agents can jointly train a model without sharing their datasets with each other, or a third-party. This makes FL particularly suitable for settings where data privacy is desired.At the same time, concealing training data gives attackers an opportunity to inject backdoors into the trained model. It has been shown that an attacker can inject backdoors to the trained model during FL, and then can leverage the backdoor to make the model misclassify later. Several works tried to alleviate this threat by designing robust aggregation functions. However, given more sophisticated attacks are developed over time, which by-pass the existing defenses, we approach this problem from a complementary angle in this work. Particularly, we aim to discourage backdoor attacks by detecting, and punishing the attackers, possibly after the end of training phase.To this end, we develop a hybrid blockchain-based FL framework that uses smart contracts to automatically detect, and punish the attackers via monetary penalties. Our framework is general in the sense that, any aggregation function, and any attacker detection algorithm can be plugged into it. We conduct experiments to demonstrate that our framework preserves the communication-efficient nature of FL, and provide empirical results to illustrate that it can successfully penalize attackers by leveraging our novel attacker detection algorithm.},
	booktitle = {Proceedings of the {Eleventh} {ACM} {Conference} on {Data} and {Application} {Security} and {Privacy}},
	publisher = {Association for Computing Machinery},
	author = {Desai, Harsh Bimal and Ozdayi, Mustafa Safa and Kantarcioglu, Murat},
	year = {2021},
	note = {event-place: Virtual Event, USA},
	keywords = {ethereum, hyperledger, backdoor attacks, federated averaging, federated learning, hybrid blockchain, machine learning},
	pages = {101--112},
}

@inproceedings{vo_blockchain-based_2017,
	address = {New York, NY, USA},
	series = {{CIKM} '17},
	title = {Blockchain-{Based} {Data} {Management} and {Analytics} for {Micro}-{Insurance} {Applications}},
	isbn = {978-1-4503-4918-5},
	url = {https://doi.org/10.1145/3132847.3133172},
	doi = {10.1145/3132847.3133172},
	abstract = {In this paper, we demonstrate a blockchain-based solution for transparently managing and analyzing data in a pay-as-you-go car insurance application. This application allows drivers who rarely use cars to only pay insurance premium for particular trips they would like to travel. One of the key challenges from database perspective is how to ensure all the data pertaining to the actual trip and premium payment made by the users are transparently recorded so that every party in the insurance contract including the driver, the insurance company, and the financial institution is confident that the data are tamper-proof and traceable. Another challenge from information retrieval perspective is how to perform entity matching and pattern matching on customer data as well as their trip and claim history recorded on the blockchain for intelligent fraud detection. Last but not least, the drivers' trip history, once have been collected sufficiently, can be much valuable for the insurance company to do offline analysis and build statistics on past driving behaviour and past vehicle runtime. These statistics enable the insurance company to offer the users with transparent and individualized insurance quotes. Towards this end, we develop a blockchain-based solution for micro-insurance applications that transparently keeps records and executes smart contracts depending on runtime conditions while also connecting with off-chain analytic databases.},
	booktitle = {Proceedings of the 2017 {ACM} on {Conference} on {Information} and {Knowledge} {Management}},
	publisher = {Association for Computing Machinery},
	author = {Vo, Hoang Tam and Mehedy, Lenin and Mohania, Mukesh and Abebe, Ermyas},
	year = {2017},
	note = {event-place: Singapore, Singapore},
	keywords = {blockchain, data analytics, data management, information management, information retrieval},
	pages = {2539--2542},
}

@inproceedings{binbusayyyis_blockchain-based_2022,
	address = {New York, NY, USA},
	series = {{ICBTA} 2021},
	title = {Blockchain-{Based} {Services} for {Sharing} {Education} {Records} in {Industrial} {IoT} {Environment}},
	isbn = {978-1-4503-8746-0},
	url = {https://doi.org/10.1145/3510487.3510507},
	doi = {10.1145/3510487.3510507},
	abstract = {The path towards Industry 4.0 have pushed the workforce to continuously develop their skills to stay at the forefront of their careers and remain attractive to their employers. In this case, the electronic portfolio is designed as a promising tool for professionals and employers, in assessing and presenting guidance for further learning in the workplace environment. However, the implementation of electronic portfolios faces huge challenges, especially due to the lack of interoperability to collect and share competition evidence among multiple organizations and institutions. The growing trend of professional (learning) interoperability has brought other challenges that must be addressed in order to fully utilize the potential of the electronic product portfolio in the context of the fourth industry. This article proposes a framework taking the benefits of blockchain, decentralized storage systems, smart contracts and session management in achieving professional-centric interoperability while creating electronic portfolio and share evidences among multiple organizations without giving up the confidentiality, integrity and availability of shared evidence. The simulation of the proposed model for proof of concept on Ethereum proved its viability in real world practice. In expansion, the assessment of the proposed model proved its effectiveness in terms of cost, storage space and security as a possible solution in electronic portfolios implementation and assisting professionals to stay competitive in global labor market.},
	booktitle = {2021 4th {International} {Conference} on {Blockchain} {Technology} and {Applications}},
	publisher = {Association for Computing Machinery},
	author = {Binbusayyyis, Adel},
	year = {2022},
	note = {event-place: Xi'an, China},
	keywords = {Blockchain, Smart Contract, Data sharing, IPFS, Learner-centered interoperability, Lifelong learning, Session management},
	pages = {135--143},
}

@article{xu_l2chain_2022,
	title = {L2chain: {Towards} {High}-{Performance}, {Confidential} and {Secure} {Layer}-2 {Blockchain} {Solution} for {Decentralized} {Applications}},
	volume = {16},
	issn = {2150-8097},
	url = {https://doi.org/10.14778/3574245.3574278},
	doi = {10.14778/3574245.3574278},
	abstract = {With the rapid development of blockchain, the concept of decentralized applications (DApps), built upon smart contracts, has attracted much attention in academia and industry. However, significant issues w.r.t. system throughput, transaction confidentiality, and the security guarantee of the DApp transaction execution and order correctness hinder the border adoption of blockchain DApps.To address these issues, we propose L2chain, a novel blockchain framework aiming to scale the system through a layer-2 network where DApps process transactions in the layer-2 network and only the system state digest, acting as the state integrity proof, is maintained on-chain. To achieve high performance, we introduce the split-execute-merge (SEM) transaction processing workflow with the help of the RSA accumulator, allowing DApps to lock and update a part of the state digest in parallel. We also design a witness cache mechanism for DApp executors to reduce the transaction processing latency. To fulfill confidentiality, we leverage the trusted execution environment (TEE) for DApps to execute encrypted transactions off-chain. To ensure transaction execution and order correctness, we propose a two-step execution process for DApps to prevent attacks (i.e., rollback attacks) from subverting the state transition. Extensive experiments have demonstrated that L2chain can achieve 1.5X to 42.2X and 7.1X to 8.9X throughput improvements in permissioned and permissionless settings respectively.},
	number = {4},
	journal = {Proc. VLDB Endow.},
	author = {Xu, Zihuan and Chen, Lei},
	month = dec,
	year = {2022},
	note = {Publisher: VLDB Endowment},
	pages = {986--999},
}

@inproceedings{singi_cag_2019,
	series = {{WETSEB} '19},
	title = {{CAG}: {Compliance} {Adherence} and {Governance} in {Software} {Delivery} {Using} {Blockchain}},
	url = {https://doi.org/10.1109/WETSEB.2019.00011},
	doi = {10.1109/WETSEB.2019.00011},
	abstract = {The software development life cycle (SDLC) starts with business and functional specifications signed with a client. In addition to this, the specifications also capture policy / procedure / contractual / regulatory / legislation / standard compliances with respect to a given client industry. The SDLC must adhere to service level agreements (SLAs) while being compliant to development activities, processes, tools, frameworks, and reuse of open-source software components. In today's world, global software development happens across geographically distributed (autonomous) teams consuming extraordinary amounts of open source components drawn from a variety of disparate sources. Although this is helping organizations deal with technical and economic challenges, it is also increasing unintended risks, e.g., use of a non-complaint license software might lead to copyright issues and litigations, use of a library with vulnerabilities pose security risks etc. Mitigation of such risks and remedial measures is a challenge due to lack of visibility and transparency of activities across these distributed teams as they mostly operate in silos. We believe a unified model that non-invasively monitors and analyzes the activities of distributed teams will help a long way in building software that adhere to various compliances. In this paper, we propose a decentralized CAG - Compliance Adherence and Governance framework using blockchain technologies. Our framework (i) enables the capturing of required data points based on compliance specifications, (ii) analyzes the events for non-conformant behavior through smart contracts, (iii) provides real-time alerts, and (iv) records and maintains an immutable audit trail of various activities.},
	booktitle = {Proceedings of the 2nd {International} {Workshop} on {Emerging} {Trends} in {Software} {Engineering} for {Blockchain}},
	publisher = {IEEE Press},
	author = {Singi, Kapil and Kaulgud, Vikrant and Bose, R. P. Jagadeesh Chandra and Podder, Sanjay},
	year = {2019},
	note = {event-place: Montreal, Quebec, Canada},
	keywords = {blockchain, smart contract, distributed teams, crowd-sourcing, license verification, open-source components, vulnerability assessment},
	pages = {32--39},
}

@inproceedings{zhu_privacy-preserving_2021,
	address = {New York, NY, USA},
	series = {{ACM} {TURC} 2021},
	title = {Privacy-{Preserving} {Decentralized} {Federated} {Deep} {Learning}},
	isbn = {978-1-4503-8567-1},
	url = {https://doi.org/10.1145/3472634.3472642},
	doi = {10.1145/3472634.3472642},
	abstract = {Deep learning has achieved the high-accuracy of state-of-the-art algorithms in long-standing AI tasks. Due to the obvious privacy issues of deep learning, Google proposes Federal Deep Learning (FDL), in which distributed participants only upload local gradients and and a centralized server updates parameters based on the collected gradients. But few users are willing to participate in federated learning due to the lack of contribution evaluation and reward mechanisms. So a decentralized federated deep learning, called DFDL, has been proposed by introducing blockchain to form an effective incentive mechanism for participants. However, DFDL still faces serious privacy issues as blockchain does not guarantee the privacy of training data and model. In this paper, in order to address the aforementioned issues, we propose a new Privacy-preserving DFDL scheme, called PDFDL. With PDFDL, parties can securely learn a global model with their local gradients in the assistance of blockchain, and the parties’ sensitive data and the global model are well protected. Specifically, with a secure multi-party aggregation computing, all local gradients are encrypted by their owners before being sent to the smart contract, and can be directly aggregated without decryption. Detailed security analysis shows that PDFDL can resist various known security threats. Moreover, we give an implementation prototype by integrating deep learning module with a Blockchain development platform (Ethereum V1.6.4). We demonstrate the encryption performance and the training accuracy of our PDFDL on benchmark datasets.},
	booktitle = {{ACM} {Turing} {Award} {Celebration} {Conference} - {China} ( {ACM} {TURC} 2021)},
	publisher = {Association for Computing Machinery},
	author = {Zhu, Xudong and Li, Hui},
	year = {2021},
	note = {event-place: Hefei, China},
	keywords = {blockchain, federated deep learning, privacy-preserving},
	pages = {33--38},
}

@inproceedings{corradini_engineering_2020,
	address = {New York, NY, USA},
	series = {{SAC} '20},
	title = {Engineering {Trustable} {Choreography}-{Based} {Systems} {Using} {Blockchain}},
	isbn = {978-1-4503-6866-7},
	url = {https://doi.org/10.1145/3341105.3373988},
	doi = {10.1145/3341105.3373988},
	abstract = {The adoption of model-driven engineering methodologies contributes to reduce the complexity of developing distributed systems. A key point to master such complexity is the use of modelling languages, such as the BPMN standard. This permits to specify choreography diagrams describing, from a global point of view, the interactions that should occur among distributed components in order to reach given goals. Even though BPMN choreographies are promising to increase business possibilities, their concrete adoption has been challenging and faced complex hurdles. On the one hand, there is a lack of concrete support to the different phases of the choreography life-cycle, especially in relation to the choreography execution. Another obstacle consists in the lack of distributed infrastructures allowing the participants involved in the cooperation to trust each other, and in particular to get enough guarantees that all of them will behave as prescribed by the choreography model.In this paper, we face such challenges by proposing a methodology and a related model-driven framework, named ChorChain, that are based on the blockchain technology. We provide support to the whole life-cycle of choreographies, from their modelling to their distributed execution. More specifically, ChorChain takes as input a BPMN choreography model and automatically translates it in a Solidity smart contract. Such a contract will permit to enforce the interactions among the cooperating participants, so to satisfy the prescriptions reported in the starting model. The methodology and the framework have been evaluated through experiments conducted on the Rinkeby Ethereum Testnet.},
	booktitle = {Proceedings of the 35th {Annual} {ACM} {Symposium} on {Applied} {Computing}},
	publisher = {Association for Computing Machinery},
	author = {Corradini, F. and Marcelletti, A. and Morichetta, A. and Polini, A. and Re, B. and Tiezzi, F.},
	year = {2020},
	note = {event-place: Brno, Czech Republic},
	pages = {1470--1479},
}

@article{islam_enabling_2019,
	title = {Enabling {IC} {Traceability} via {Blockchain} {Pegged} to {Embedded} {PUF}},
	volume = {24},
	issn = {1084-4309},
	url = {https://doi.org/10.1145/3315669},
	doi = {10.1145/3315669},
	abstract = {Globalization of IC supply chain has increased the risk of counterfeit, tampered, and re-packaged chips in the market. Counterfeit electronics poses a security risk in safety critical applications like avionics, SCADA systems, and defense. It also affects the reputation of legitimate suppliers and causes financial losses. Hence, it becomes necessary to develop traceability solutions to ensure the integrity of supply chain, from the time of fabrication to the end of product-life, which allows a customer to verify the provenance of a device or a system. In this article, we present an IC traceability solution based on blockchain. A blockchain is a public immutable database that maintains a continuously growing list of data records secured from tampering and revision. Over the lifetime of an IC, all ownership transfer information is recorded and archived in a blockchain. This safe, verifiable method prevents any party from altering or challenging the legitimacy of the information being exchanged. However, a chain of sales record is not enough to ensure provenance of an IC. There is a need for clone-proof method for securely binding the identity of an IC to the blockchain information. In this article, we propose a method of IC supply chain traceability via blockchain pegged to embedded physically unclonable function (PUF). The blockchain provides ownership transfer record, while the PUF provides unique identification for an IC allowing it to be linked uniquely to a blockchain. Our proposed solution automates hardware and software protocols using blockchain-powered Smart Contract that allows supply chain participants to authenticate, track, trace, analyze, and provision chips throughout their entire life cycle.},
	number = {3},
	journal = {ACM Trans. Des. Autom. Electron. Syst.},
	author = {Islam, Md Nazmul and Kundu, Sandip},
	month = apr,
	year = {2019},
	note = {Place: New York, NY, USA
Publisher: Association for Computing Machinery},
	keywords = {Blockchain, smart contract, supply chain, ownership transfer, physically unclonable function, traceability},
}

@inproceedings{chen_application_2021,
	address = {New York, NY, USA},
	series = {{EITCE} '20},
	title = {Application of {Homomorphic} {Encryption} in {Blockchain} {Data} {Security}},
	isbn = {978-1-4503-8781-1},
	url = {https://doi.org/10.1145/3443467.3443754},
	doi = {10.1145/3443467.3443754},
	abstract = {With the continuous development of the Internet era, people's demand for network security is increasingly high, information is an essential component of the network, which implies numerous privacy, secrets, but also contains a large number of value, thus generating a multiparty trust issues of data security. Blockchain technology itself is still in the early stages of rapid development, the existing blockchain system in the design and implementation of the use of distributed systems, cryptography, game theory, network protocols and many other disciplines, for learning the principles and practical applications have brought considerable challenges. The blockchain, with its decentralized quality, quickly captures the attention of the public and solves many security problems derived from data security, thus attracting wide attention from people. In recent years, along with the increasing maturity of homomorphic encryption technology and push new, it is more and more people's favour and attention.Homomorphic encryption is an encryption technology that provides the ability to perform various operations on data in an encrypted state without compromising its confidentiality. Its concern is the security of data processing. That is, others can process the encrypted data, but the process does not reveal any of the original content. Also, the user who has the Key decrypts the processed data and gets the result of the processing precisely.The main encryption technique used in blockchain applications is the RSA encryption algorithm, [1] which is used to ensure that the user's private key is not compromised, but no project has been noticed about the homomorphic encryption method for smart contracts. [2] The purpose of this paper is to analyze the principle of homomorphic encryption and discuss its practical application in data security in combination with blockchain technology.},
	booktitle = {Proceedings of the 2020 4th {International} {Conference} on {Electronic} {Information} {Technology} and {Computer} {Engineering}},
	publisher = {Association for Computing Machinery},
	author = {Chen, Jingjing and You, Fucheng},
	year = {2021},
	note = {event-place: Xiamen, China},
	keywords = {Blockchain technology, Data security, Homomorphic encryption},
	pages = {205--209},
}

@inproceedings{ryabov_decentralized_2022,
	address = {New York, NY, USA},
	series = {{SPBPU} {IDE} '21},
	title = {Decentralized {Finance} ({DEFI}) as the {Basis} for the {Transformation} of the {Financial} {Sector} of the {Future}},
	isbn = {978-1-4503-8694-4},
	url = {https://doi.org/10.1145/3527049.3527080},
	doi = {10.1145/3527049.3527080},
	abstract = {The paper discusses the influence exerted by financial systems on the change of the financial sector and its further development. The study is relevant since there is need for building up more trust in blockchain. In the course of the research, the main trends of decentralized financial systems were identified and presented, including the problems related to decentralized financial systems and options for resolving them. The study is aimed at defining the problems and searching for ways to tackle them when regulating decentralized finances (DeFi) in order to ensure effective regulation on the part of the Central Bank and control risks. Rather than eliminating the need for regulation, DeFi, in fact, has to be regulated so as to achieve its main decentralization goal. In addition, DeFi presents a potential possibility for developing a fairly new regulation method: the idea of “integrated regulation”. The paper considers various approaches to regulation, which can be integrated in the DeFi design. It can potentially lead to the decentralization of both finance and its regulation, which eventually expresses RegTech (Regulatory Technology), which is used by financial organizations for being able to meet the requirements of the regulator more easily. The study defines the problems that are encountered in the course of using DeFi and points out the possible ways for dealing with them, including a way for switching to blockchain independently so that the transaction is not charged in ETH for calculation on blockchain; reducing the complexity and costs of use and understanding of DeFi software by most users. A whole lot of risks that decentralized financial protocols are susceptible to is analyzed: vulnerabilities in the code security of smart contracts, their stacking and layout; oracle risk, which is subject to manipulation in the process of data transfer; the financial risk of high volatility, regulatory risk and crisis of the global economy due to the inability to predict in which way the Covid-19 pandemic is going to be resolved.},
	booktitle = {Proceedings of the 3rd {International} {Scientific} {Conference} on {Innovations} in {Digital} {Economy}},
	publisher = {Association for Computing Machinery},
	author = {Ryabov, Oleg and Golubev, Artem and Goncharova, Natalia},
	year = {2022},
	note = {event-place: Saint - Petersburg, Russian Federation},
	keywords = {blockchain, cryptocurrency, currency, decentralized financial system, finance, financial sector},
	pages = {387--394},
}

@inproceedings{jain_solar_2019,
	address = {New York, NY, USA},
	series = {{IECC} '19},
	title = {Solar {Energy} {Distribution} {Using} {Blockchain} and {IoT} {Integration}},
	isbn = {978-1-4503-7177-3},
	url = {https://doi.org/10.1145/3343147.3343163},
	doi = {10.1145/3343147.3343163},
	abstract = {This research focuses on the decentralised distribution of solar energy between networks using IoT (Internet of Things) enabled devices and Blockchain technology. IoT provides a medium for software part to interact with the physical part which is energy and transmission grid. IoT connects the physical battery containing the energy to the cloud database which is then used to interact with the software. IoT also enables the transfer of energy through the physical medium on the command given by the user through the user application. To make the system decentralized, blockchain is used, which helps to connect all the users in the network where they can transact without the need of knowing each other or having the obligation of any intermediary. Decentralisation helps in achieving a system which doesn't require any middleman and works on the cumulative trust of the nodes - often referred to as the Consensus-Based Algorithm. There are a number of such algorithms but Proof of Work (PoW) and Proof of Stake (PoS) are widely used for blockchains. We suggest using the PoW algorithm. We need to take care if the certain conditions meet before enabling any user to transact. For such condition, we used the application logic on the server side to enable a valid transaction (similar to smart contracts on Ethereum). Blockchain also offers security, transparency, immutability and customer centricity to develop the most advanced and automated platform.In brief, the working of the system can be explained as - Sunlight makes the Solar panels charge the physical battery which is connected to the microcontroller. The microcontroller continuously updates the data to the cloud database which is accessed by the application. The application logic checks for the required conditions and if the required conditions are met, the transaction takes place and the blockchain is updated (a block is created and added to the blockchain enabling the transaction). On the physical side, the IoT devices receive a command to allow the transfer of energy to the particular node.},
	booktitle = {Proceedings of the 1st {International} {Electronics} {Communication} {Conference}},
	publisher = {Association for Computing Machinery},
	author = {Jain, Rishabh and Dogra, Aniket},
	year = {2019},
	note = {event-place: Okinawa, Japan},
	keywords = {Blockchain, Consensus, Internet of Things (IoT), Cryptocurrency, Decentralisation, Flask using Python, Integrity},
	pages = {118--123},
}

@article{pacheco_is_2022,
	title = {Is {My} {Transaction} {Done} yet? {An} {Empirical} {Study} of {Transaction} {Processing} {Times} in the {Ethereum} {Blockchain} {Platform}},
	issn = {1049-331X},
	url = {https://doi.org/10.1145/3549542},
	doi = {10.1145/3549542},
	abstract = {Ethereum is one of the most popular platforms for the development of blockchain-powered applications. These applications are known as ÐApps. When engineering ÐApps, developers need to translate requests captured in the front-end of their application into one or more smart contract transactions. Developers need to pay for these transactions and, the more they pay (i.e., the higher the gas price), the faster the transaction is likely to be processed. Developing cost-effective ÐApps is far from trivial, as developers need to optimize the balance between cost (transaction fees) and user experience (transaction processing times). Online services have been developed to provide transaction issuers (e.g., ÐApp developers) with an estimate of how long transactions will take to be processed given a certain gas price. These estimation services are crucial in the Ethereum domain and several popular wallets such as Metamask rely on them. However, despite their key role, their accuracy has not been empirically investigated so far. In this paper, we quantify the transaction processing times in Ethereum, investigate the relationship between processing times and gas prices, and determine the accuracy of state-of-the-practice estimation services. Our results indicate that transactions are processed in a median of 57s and that 90\% of the transactions are processed within 8m. We also show that higher gas prices result in faster transaction processing times with diminishing returns. In particular, we observe no practical difference in processing time between expensive and very expensive transactions. With regards to the accuracy of processing time estimation services, we observe that they are equivalent. However, when stratifying transactions by gas prices, we observe that Etherscan’s Gas Tracker is the most accurate estimation service for very cheap and cheap transaction. EthGasStation’s Gas Price API, in turn, is the most accurate estimation service for regular, expensive, and very expensive transactions. In a post-hoc study, we design a simple linear regression model with only one feature that outperforms the Gas Tracker for very cheap and cheap transactions and that performs as accurately as the EthGasStation model for the remaining categories. Based on our findings, ÐApp developers can make more informed decisions concerning the choice of the gas price of their application-issued transactions.},
	journal = {ACM Trans. Softw. Eng. Methodol.},
	author = {Pacheco, Michael and Oliva, Gustavo A. and Rajbahadur, Gopi Krishnan and Hassan, Ahmed E.},
	month = jul,
	year = {2022},
	note = {Place: New York, NY, USA
Publisher: Association for Computing Machinery},
	keywords = {Blockchain, Ethereum, Decentralized Applications (DApps), Transaction Processing Time},
	annote = {Just Accepted},
}

@inproceedings{richard_smart_2021-2,
	address = {New York, NY, USA},
	series = {{ICBTA} 2020},
	title = {Smart {Contract} {Development} {Model} and the {Future} of {Blockchain} {Technology}},
	isbn = {978-1-4503-8896-2},
	url = {https://doi.org/10.1145/3446983.3446994},
	doi = {10.1145/3446983.3446994},
	abstract = {Blockchain has become a mainstream technology in our society in recent years. With its nature of secure decentralization, people can create decentralized applications by developing smart contracts on top of a blockchain platform. With blockchain, technology is still in the developing phase, the smart contract development process in blockchain has its unique complexity and uncertainty. The condition will drive the challenge for any developers to work on this issue. In this research, we determine the smart contract development model in creating decentralized applications. Our proposed model aligned with our findings in the systematic mapping process of this study.},
	booktitle = {2020 the 3rd {International} {Conference} on {Blockchain} {Technology} and {Applications}},
	publisher = {Association for Computing Machinery},
	author = {Richard, Richard and Prabowo, Harjanto and Trisetyarso, Agung and Soewito, Benfano},
	year = {2021},
	note = {event-place: Xi'an, China},
	keywords = {Blockchain, Smart Contract, Smart Contract Development, Decentralized Applications, Systematic Mapping},
	pages = {34--39},
}

@inproceedings{krol_chainsoft_2018-2,
	address = {New York, NY, USA},
	series = {{CryBlock}'18},
	title = {{ChainSoft}: {Collaborative} {Software} {Development} {Using} {Smart} {Contracts}},
	isbn = {978-1-4503-5838-5},
	url = {https://doi.org/10.1145/3211933.3211934},
	doi = {10.1145/3211933.3211934},
	abstract = {In recent years, more and more companies require dedicated software to increase the efficiency of their business. However, with rapidly changing technologies it is often inefficient to maintain a dedicated team of developers. On the other hand, outsourcing software development requires considerable effort and trust between involved parties to ensure the quality of the code and adequate payment.We present ChainSoft - a platform for outsourcing software development and automatic payments between parties that distrust each other, by means of blockchain technology. ChainSoft allows any developer to create software and submit software, includes automatic code verification and enforce users' proper behavior. We implement our system using Ethereum Smart Contracts and Github/Travis CI and present first evaluation proving its security and low usage cost.},
	booktitle = {Proceedings of the 1st {Workshop} on {Cryptocurrencies} and {Blockchains} for {Distributed} {Systems}},
	publisher = {Association for Computing Machinery},
	author = {Król, Micha{\textbackslash}l and Reñé, Sergi and Ascigil, Onur and Psaras, Ioannis},
	year = {2018},
	note = {event-place: Munich, Germany},
	keywords = {blockchain, smart contracts, github, software development},
	pages = {1--6},
}

@inproceedings{ren_making_2021-2,
	address = {New York, NY, USA},
	series = {{ESEC}/{FSE} 2021},
	title = {Making {Smart} {Contract} {Development} {More} {Secure} and {Easier}},
	isbn = {978-1-4503-8562-6},
	url = {https://doi.org/10.1145/3468264.3473929},
	doi = {10.1145/3468264.3473929},
	abstract = {With the rapid development of distributed applications, smart contracts have attracted more and more developers' attentions. However, developers or domain experts have different levels of familiarity with specific programming languages, like Solidity, and those vulnerabilities hidden in the code would be exploited and result in huge property losses. Existing auxiliary tools lack security considerations. Most of them only provide word completion based on fuzzy search and detection services for limited types of vulnerabilities, which results in the manpower waste during coding and potential vulnerability threats after deployment. In this work, we propose an integrated framework to enhance security in the two stages of recommendation and validation, assisting developers to implement more secure contracts more quickly. First, we reinforce original smart contracts with general patch patterns and secure programming standards for training, and design a real-time code suggestion algorithm to predict secure words for selection. Then, we integrate multiple widely-used testing tools to provide validation services. For evaluation, we collected 47,398 real-world contracts, and the result shows that it outperforms existing platforms and tools, improving the average word suggestion accuracy by 30\%-60\% and helping detect about 25\%-61\% more vulnerabilities. In most cases, our framework can correctly predict next words with the probability up to 82\%-97\% within top ten candidates. Compared with professional vulnerability mining tools, it can find more vulnerabilities and provide targeted modification suggestions without frivolous configurations. Currently, this framework has been used as the official development tool of WeBank and integrated as the recommended platform by FISCO-BCOS community.},
	booktitle = {Proceedings of the 29th {ACM} {Joint} {Meeting} on {European} {Software} {Engineering} {Conference} and {Symposium} on the {Foundations} of {Software} {Engineering}},
	publisher = {Association for Computing Machinery},
	author = {Ren, Meng and Ma, Fuchen and Yin, Zijing and Fu, Ying and Li, Huizhong and Chang, Wanli and Jiang, Yu},
	year = {2021},
	note = {event-place: Athens, Greece},
	keywords = {Domain-specific Reinforcement, Integrated Testing, Smart Contract Development},
	pages = {1360--1370},
}

@inproceedings{ten_engineering_2022-1,
	address = {New York, NY, USA},
	series = {{WebSci} '22},
	title = {Engineering {Blockchain} {Enabling} {Win} {A} {Fortune} {Game} among {Novice} through {EAOM}},
	isbn = {978-1-4503-9191-7},
	url = {https://doi.org/10.1145/3501247.3539018},
	doi = {10.1145/3501247.3539018},
	abstract = {Blockchain application development has received much attention nowadays. As development is complex and challenging, a systematic approach is needed to improve the product, services, and process quality. Despite the introduction of techniques, there are still inadequate models for demonstrating the blockchain's internal architecture. Hence, there is a gap when developing the blockchain application, a gap in the modelling environment of a blockchain development application. This paper introduces a new insight into blockchain application development through extended Agent-Oriented Modelling (eAOM). eAOM is a methodology for complex socio-technical system development, and we believe that it can reduce the complexity of implementing the blockchain application. In this paper, the eAOM is used to model a blockchain-based “win a fortune” system, which includes smart contract development. It showcases the feasibility of adopting eAOM to model a blockchain enabling application. A usability survey among the novices has further validated the usability and benefits of eAOM in the blockchain enabling application development.},
	booktitle = {14th {ACM} {Web} {Science} {Conference} 2022},
	publisher = {Association for Computing Machinery},
	author = {Ten, Michellelibin and Cheah, WaiShiang and Sim, Yee Wai},
	year = {2022},
	note = {event-place: Barcelona, Spain},
	keywords = {Agent Oriented Modelling, Blockchain application development, Ethereum Smart Contract, Model-driven Engineering},
	pages = {443--450},
}
