Scopus
EXPORT DATE: 30 March 2023

@CONFERENCE{Zhou202123,
	author = {Zhou, Teng and Liu, Kui and Li, Li and Liu, Zhe and Klein, Jacques and Bissyande, Tegawende F.},
	title = {SmartGift: Learning to Generate Practical Inputs for Testing Smart Contracts},
	year = {2021},
	journal = {Proceedings - 2021 IEEE International Conference on Software Maintenance and Evolution, ICSME 2021},
	pages = {23 – 34},
	doi = {10.1109/ICSME52107.2021.00009},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85123371929&doi=10.1109%2fICSME52107.2021.00009&partnerID=40&md5=6f6688700e05c9ca4f93c25f7d485c78},
	abstract = {With the boom of Initial Coin Offerings (ICO) in the financial markets, smart contracts have gained rapid popularity among consumers. Smart contract vulnerabilities however made them a prime target to malicious attacks that are leading to huge losses. The research community is thus applying various software engineering technologies to smart contracts to address them. In general, to detect vulnerabilities in smart contracts, mutation and fuzz based testing approaches have been widely studied and indeed achieved promising performance on benchmark datasets. Generating test inputs with mutation approaches essentially relies on the available test cases in a smart contract program. In our preliminary study, however, we observed that 56.4% of 218 identified open-source smart contract project repositories do not provide any test case for validation. Fuzzing test inputs leads to random values and lacks practical usefulness. Our work addresses this problem: we propose an approach, Smartgift, which generates practical inputs for testing smart contracts by learning from the transaction records of real-world smart contracts. Leveraging a collected set of over 60 thousand transaction records, Smartgift is able to generate relevant test inputs for 77% smart contract functions, largely outperforming the traditional fuzzing approach (successful for only 60% functions). We further demonstrate the practicality of the test inputs by using them to replace the test inputs of the ContractFuzzer state of the art smart contract vulnerability detector: with inputs by Smartgift, ContractFuzzer can now detect 131 of the 154 vulnerabilities in its benchmark.  © 2021 IEEE.},
	type = {Conference paper},
	publication_stage = {Final},
	source = {Scopus},
	note = {Cited by: 4; All Open Access, Bronze Open Access, Green Open Access}
}

@CONFERENCE{Ait Hsain2021785,
	author = {Ait Hsain, Yassine and Laaz, Naziha and Mbarki, Samir},
	title = {Ethereum's smart contracts construction and development using model driven engineering technologies: A review},
	year = {2021},
	journal = {Procedia Computer Science},
	volume = {184},
	pages = {785 – 790},
	doi = {10.1016/j.procs.2021.03.097},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85106711522&doi=10.1016%2fj.procs.2021.03.097&partnerID=40&md5=12052d646e73ca9cccc1c97d44e6bb66},
	abstract = {In the Blockchain context, Smart Contracts are computer programs that run on the Ethereum platform. Benefiting from the properties of Blockchain, SCs development represents a major challenge to developers, as the code is deployed to an immutable system, besides the Ethereum platform is still evolving. This paper highlights how we can exploit model-driven engineering for generating long terms and high productivity smart contracts. It reviews researches on Smart Contracts generation in the Ethereum blockchain from a model-driven perspective. Based on the studied approaches, we defined a comparative framework to outline the advantages and disadvantages of each approach. The result can be used as a basis of tool selection for specific development aspects of SCs. © 2021 The Authors. Published by Elsevier B.V. This is an open access article under the CC BY-NC-ND license (http://creativecommons.org/licenses/by-nc-nd/4.0/)},
	type = {Conference paper},
	publication_stage = {Final},
	source = {Scopus},
	note = {Cited by: 7; All Open Access, Gold Open Access}
}

@CONFERENCE{Liu2022,
	author = {Liu, Ye and Li, Yi},
	title = {InvCon: A Dynamic Invariant Detector for Ethereum Smart Contracts},
	year = {2022},
	journal = {ACM International Conference Proceeding Series},
	doi = {10.1145/3551349.3559539},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85146969169&doi=10.1145%2f3551349.3559539&partnerID=40&md5=ca0418f7e2f8581bd9163031023ffa7e},
	abstract = {Smart contracts are self-executing computer programs deployed on blockchain to enable trustworthy exchange of value without the need of a central authority. With the absence of documentation and specifications, routine tasks such as program understanding, maintenance, verification, and validation, remain challenging for smart contracts. In this paper, we propose a dynamic invariant detection tool, InvCon, for Ethereum smart contracts to mitigate this issue. The detected invariants can be used to not only support the reverse engineering of contract specifications, but also enable standard-compliance checking for contract implementations. InvCon provides a Web-based interface and a demonstration video of it is available at: https://youtu.be/Y1QBHjDSMYk.  © 2022 ACM.},
	type = {Conference paper},
	publication_stage = {Final},
	source = {Scopus},
	note = {Cited by: 2; All Open Access, Bronze Open Access}
}

@ARTICLE{Zheng202095,
	author = {Zheng, Peilin and Zheng, Zibin and Wu, Jiajing and Dai, Hong-Ning},
	title = {XBlock-ETH: Extracting and exploring blockchain data from ethereum},
	year = {2020},
	journal = {IEEE Open Journal of the Computer Society},
	volume = {1},
	number = {1},
	pages = {95 – 106},
	doi = {10.1109/OJCS.2020.2990458},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85095330148&doi=10.1109%2fOJCS.2020.2990458&partnerID=40&md5=6a71abf22748c342d4cbf90661a76e16},
	abstract = {Blockchain-based cryptocurrencies have received extensive attention recently. Massive data has been stored on permission-less blockchains. The analysis of massive blockchain data can bring huge business values. However, the absence of well-processed up-to-date blockchain datasets impedes big data analytics of blockchain data. To fill this gap, we collect and process the up-to-date on-chain data from Ethereum, which is one of the most popular permission-less blockchains. We name such well-processed Ethereum data as XBlock-ETH, which consists of transactions, smart contracts, and cryptocurrencies (i.e., tokens). However, it is non-trivial to partition and categorize the collected raw Ethereum data to the well-processed datasets since the whole processing procedure requires sophisticated knowledge on software engineering as well as big data analytics. Moreover, we also present basic statistics and exploration for each of the well-processed datasets. Furthermore, we also outline the possible research opportunities based on XBlock-ETH, with the data and code released online. © 2020 IEEE. All rights reserved.},
	type = {Article},
	publication_stage = {Final},
	source = {Scopus},
	note = {Cited by: 44; All Open Access, Gold Open Access, Green Open Access}
}

@CONFERENCE{Olsthoorn2022202,
	author = {Olsthoorn, Mitchell and Stallenberg, Dimitri and Van Deursen, Arie and Panichella, Annibale},
	title = {SynTest-Solidity: Automated Test Case Generation and Fuzzing for Smart Contracts},
	year = {2022},
	journal = {Proceedings - International Conference on Software Engineering},
	pages = {202 – 206},
	doi = {10.1109/ICSE-Companion55297.2022.9793754},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85132357453&doi=10.1109%2fICSE-Companion55297.2022.9793754&partnerID=40&md5=3b056c0ba8d8f0f344c697d99c50d1d2},
	abstract = {Ethereum is the largest and most prominent smart contract platform. One key property of Ethereum is that once a contract is deployed, it can not be updated anymore. This increases the importance of thoroughly testing the behavior and constraints of the smart contract before deployment. Existing approaches in related work either do not scale or are only focused on finding crashing inputs. In this tool demo, we introduce SynTest-Solidity, an automated test case generation and fuzzing framework for Solidity. SynTest-Solidity implements various metaheuristic search algorithms, including random search (traditional fuzzing) and genetic algorithms (i.e., NSGA-II, MOSA, and DynaMOSA). Finally, we performed a preliminary empirical study to assess the effectiveness of SynTest-Solidity in testing Solidity smart contracts. © 2022 IEEE.},
	type = {Conference paper},
	publication_stage = {Final},
	source = {Scopus},
	note = {Cited by: 2; All Open Access, Bronze Open Access, Green Open Access}
}

@ARTICLE{Marchesi2020,
	author = {Marchesi, Lodovica and Marchesi, Michele and Tonelli, Roberto},
	title = {ABCDE—agile block chain DApp engineering},
	year = {2020},
	journal = {Blockchain: Research and Applications},
	volume = {1},
	number = {1-2},
	doi = {10.1016/j.bcra.2020.100002},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85138492894&doi=10.1016%2fj.bcra.2020.100002&partnerID=40&md5=d04a48b630c3df4ee5d95b519382686c},
	abstract = {Blockchain software development is becoming more and more important for any modern software developer and IT startup. Nonetheless, blockchain software production still lacks a disciplined, organized and mature development process, as demonstrated by the many and (in)famous failures and frauds occurred in recent years. In this paper we present ABCDE, a complete method addressing blockchain software development. The method considers the software integration among the blockchain components—smart contracts, libraries, data structures—and the out-of-chain components, such as web or mobile applications, which all together constitute a complete DApp system. We advocate for ABCDE the use of agile practices, because these are suited to develop systems whose requirements are not completely understood since the beginning, or tend to change, as it is the case of most blockchain-based applications. ABCDE is based on Scrum, and is therefore iterative and incremental. From Scrum, we kept the requirement gathering with user stories, the iterative-incremental approach, the key roles, and the meetings. The main difference with Scrum is the separation of development activities in two flows—one for smart contracts and the other for out-of-chain software interacting with the blockchain—each performed iteratively, with integration activities every 2–3 iterations. ABCDE makes explicit the activities that must be performed to design, develop, test and integrate smart contracts and out-of-chain software, and documents the smart contracts using formal diagrams to help development, security assessment, and maintenance. A diagram derived from UML class diagram helps to effectively model the data structure of smart contracts, whereas the exchange of messages between the entities of the system is modeled using a modified UML sequence diagram. The proposed method has also specific activities for security assessment and gas optimization, through systematic use of patterns and checklists. ABCDE focuses on Ethereum blockchain and its Solidity language, but preserves generality and with proper modifications might be applied to any blockchain software project. ABCDE method is described in detail, and an example is given to show how to concretely implement the various development steps. © 2020 The Authors},
	type = {Article},
	publication_stage = {Final},
	source = {Scopus},
	note = {Cited by: 25; All Open Access, Gold Open Access, Green Open Access}
}

@CONFERENCE{Akca2019482,
	author = {Akca, Sefa and Rajan, Ajitha and Peng, Chao},
	title = {SolAnalyser: A Framework for Analysing and Testing Smart Contracts},
	year = {2019},
	journal = {Proceedings - Asia-Pacific Software Engineering Conference, APSEC},
	volume = {2019-December},
	pages = {482 – 489},
	doi = {10.1109/APSEC48747.2019.00071},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85078175674&doi=10.1109%2fAPSEC48747.2019.00071&partnerID=40&md5=ea414d51e565bcd8f1851da36168d4bd},
	abstract = {Executing, verifying and enforcing credible transactions on permissionless blockchains is done using smart contracts. A key challenge with smart contracts is ensuring their correctness and security. To address this challenge, we present a fully automated technique, SolAnalyser, for vulnerability detection over Solidity smart contracts that uses both static and dynamic analysis. Analysis techniques in the literature rely on static analysis with a high rate of false positives or lack support for vulnerabilities like out of gas, unchecked send, timestamp dependency. Our tool, SolAnalyser, supports automated detection of 8 different vulnerability types that currently lack wide support in existing tools, and can easily be extended to support other types. We also implemented a fault seeding tool that injects different types of vulnerabilities in smart contracts. We use the mutated contracts for assessing the effectiveness of different analysis tools. Our experiment uses 1838 real contracts from which we generate 12866 mutated contracts by artificially seeding 8 different vulnerability types. We evaluate the effectiveness of our technique in revealing the seeded vulnerabilities and compare against five existing popular analysis tools-Oyente, Securify, Maian, SmartCheck and Mythril. This is the first large scale evaluation of existing tools that compares their effectiveness by running them on a common set of contracts. We find that our technique outperforms all five existing tools in supporting detection of all 8 vulnerability types and in achieving higher precision and recall rate. SolAnalyser was also faster in analysing the different vulnerabilities than any of the existing tools in our experiment. © 2019 IEEE.},
	type = {Conference paper},
	publication_stage = {Final},
	source = {Scopus},
	note = {Cited by: 17; All Open Access, Green Open Access}
}

@ARTICLE{Reynoso Vanderhorst2022,
	author = {Reynoso Vanderhorst, Hamlet David and Heesom, David and Suresh, Subashini and Renukappa, Suresh and Burnham, Keith},
	title = {Barriers and cost model of implementing unmanned aerial system (UAS) services in a decentralised system: case of the Dominican Republic},
	year = {2022},
	journal = {Construction Innovation},
	doi = {10.1108/CI-08-2021-0155},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85130352978&doi=10.1108%2fCI-08-2021-0155&partnerID=40&md5=8c254ace2cbd26b51c4e8d71d3ebe01d},
	abstract = {Purpose: The aim of this paper is to identify the business barriers that influence cost of implementing unmanned aerial system (UAS) and its suitability for a decentralised system. UAS, or drone, plays a role of data provider to architectural, engineering and construction professionals within a decentralised system. However, the expectations in the execution and test of the effectiveness of the UAS is often not met. The reasons for these fails are not well elaborated in the literature. Hence, the study investigates the barriers and cost analysis of UAS that can be used for a decentralised case, in which the UAS data are useful for multiple stakeholders, and provide illustration of the interactions within this approach. Design/methodology/approach: This paper is part of a longitudinal project by using a qualitative method of interviewing 24 participants involved in the process of application of drones in the country of the Dominican Republic. The open-ended semi-structured interviews were composed for questions regarding the application of UAS, barriers and business implications. The data gathered were transcribed and used thematic analysis for its interpretation. Later, conclusions of the barriers of UAS implementation in the organisation were analysed and a cost model was developed to identify a viable scenario. Findings: The paper provides empirical insights about the barriers and economic considerations faced in the implementation process of UAS. In this research, 16 barriers in the implementation process at the management level, 8 types of cases of business relationships and 13 business models were identified. Furthermore, recommendations were made about being the accountability of the dimensions and recurrent visits to the projects handled by the portfolio of the organisations. Research limitations/implications: Blockchain system is supported by UAS data and its tests require skills and resources that were outside of the scope of the main research intend regarding UAS implementation in construction. Furthermore, as these technologies are still under development, the assessment of the decentralised system, smart contract and swarm technology was addressed conceptually and further research are encouraged in this field. Practical implications: The paper includes barriers to consider before implementation, business implications, project examples and cost structure developed. Furthermore, the findings are fit theoretically into the context of a decentralised system. It was understood and contemplated that monitoring in open and outdoor spaces is the suitable approach for UAS implementations for decentralised system. The trend of decentralised autonomous organisations for transparency and efficiency of human tasks provides the foundations of human–robot interactions as well as the role of tokenisation of assets into the cyberspace. Therefore, the paper brings managers and technicians the implications for the future-proofing the implementation of UAS. Originality/value: This paper provides an overview of the implications of cost and the suitable scenarios for return of investment in the UAS implementation in the current stage of the technology development. In addition, the paper makes reference to decentralised systems, smart contracts and swarm technology as options in which reality capture technologies are essential for construction projects. © 2022, Emerald Publishing Limited.},
	type = {Article},
	publication_stage = {Article in press},
	source = {Scopus},
	note = {Cited by: 0; All Open Access, Green Open Access}
}

@ARTICLE{Muneeb202210719,
	author = {Muneeb, Muhammad and Raza, Zeeshan and Haq, Irfan Ul and Shafiq, Omair},
	title = {SmartCon: A Blockchain-Based Framework for Smart Contracts and Transaction Management},
	year = {2022},
	journal = {IEEE Access},
	volume = {10},
	pages = {10719 – 10730},
	doi = {10.1109/ACCESS.2021.3135562},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85121762454&doi=10.1109%2fACCESS.2021.3135562&partnerID=40&md5=0a1fabaf14d5d69455fdc996c26018a0},
	abstract = {A smart contract can be used for automating business processes triggered by specific events caused by IoT sensors, data feeds, or other applications. A blockchain-based smart contract management system is an innovative technology foreseen to automate future business-to-business (B2B) processes. By optimizing business workflow operations, especially in multi-party arrangements, blockchain can play central role in business process re-engineering. In this paper we present a multi-organizational smart contract management system in which a user can create, deploy, and execute smart contracts. This research article consists of two parts; in the first part, we have compared existing smart contract management systems based on different characteristics that can play a vital role in selecting a particular system for a specific business need. In the second part, we have proposed a framework for a blockchain-based smart contract management system. It is a unified architecture that supports both DAO and organizational level blockchain-based smart contract execution. There are two types of separate blockchains used in the proposed framework; SBlockchain and TBlockchain. SBlockchain is used to store smart contracts, whereas all the data generated by the smart contracts stores inside the TBlockchain. In addition, each smart contract has some terms and clauses which are necessary for some event execution. Various components of the framework and their implementation have been described in detail with the help of relevant use-cases. © 2022 Institute of Electrical and Electronics Engineers Inc.. All rights reserved.},
	type = {Article},
	publication_stage = {Final},
	source = {Scopus},
	note = {Cited by: 2; All Open Access, Gold Open Access}
}

@ARTICLE{Pacheco2023,
	author = {Pacheco, Michael and Oliva, Gustavo A. and Rajbahadur, Gopi Krishnan and Hassan, Ahmed E.},
	title = {What makes Ethereum blockchain transactions be processed fast or slow? An empirical study},
	year = {2023},
	journal = {Empirical Software Engineering},
	volume = {28},
	number = {2},
	doi = {10.1007/s10664-022-10283-7},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85147443028&doi=10.1007%2fs10664-022-10283-7&partnerID=40&md5=1622b3a56911cca2565bd18e37252974},
	abstract = {The Ethereum platform allows developers to implement and deploy applications called ÐApps onto the blockchain for public use through the use of smart contracts. To execute code within a smart contract, a paid transaction must be issued towards one of the functions that are exposed in the interface of a contract. However, such a transaction is only processed once one of the miners in the peer-to-peer network selects it, adds it to a block, and appends that block to the blockchain This creates a delay between transaction submission and code execution. It is crucial for ÐApp developers to be able to precisely estimate when transactions will be processed, since this allows them to define and provide a certain Quality of Service (QoS) level (e.g., 95% of the transactions processed within 1 minute). However, the impact that different factors have on these times have not yet been studied. Processing time estimation services are used by ÐApp developers to achieve predefined QoS. Yet, these services offer minimal insights into what factors impact processing times. Considering the vast amount of data that surrounds the Ethereum blockchain, changes in processing times are hard for ÐApp developers to predict, making it difficult to maintain said QoS. In our study, we build random forest models to understand the factors that are associated with transaction processing times. We engineer several features that capture blockchain internal factors, as well as gas pricing behaviors of transaction issuers. By interpreting our models, we conclude that features surrounding gas pricing behaviors are very strongly associated with transaction processing times. Based on our empirical results, we provide ÐApp developers with concrete insights that can help them provide and maintain high levels of QoS. © 2023, The Author(s), under exclusive licence to Springer Science+Business Media, LLC, part of Springer Nature.},
	type = {Article},
	publication_stage = {Final},
	source = {Scopus},
	note = {Cited by: 0; All Open Access, Bronze Open Access, Green Open Access}
}

@CONFERENCE{Chan2019157,
	author = {Chan, Ka Ching and Zhou, Xujuan and Gururajan, Raj and Zhou, Xiong and Ally, Mustafa and Gardiner, Michael},
	title = {Integration of Blockchains with Management Information Systems},
	year = {2019},
	journal = {Proceedings of the 2019 International Conference on Mechatronics, Robotics and Systems Engineering, MoRSE 2019},
	pages = {157 – 162},
	doi = {10.1109/MoRSE48060.2019.8998694},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85080869993&doi=10.1109%2fMoRSE48060.2019.8998694&partnerID=40&md5=fc022bce73ebe9d551e0444e546cdc45},
	abstract = {In the era of the fourth industrial revolution (In-dustry 4.0), many Management Information Systems (MIS) integrate real-time data collection and use technologies such as big data, machine learning, and cloud computing, to foster a wide range of creative innovations, business improvements, and new business models and processes. However, the integration of blockchain with MIS offers the blockchain trilemma of security, decentralisation and scalability. MIS are usually Web 2.0 client-server applications that include the front end web systems and back end databases; while blockchain systems are Web 3.0 decentralised applications. MIS are usually private systems that a single party controls and manages; while blockchain systems are usually public, and any party can join and participate. This paper clarifies the key concepts and illustrates with figures, the implementation of public, private and consortium blockchains on the Ethereum platform. Ultimately, the paper presents a framework for building a private blockchain system on the public Ethereum blockchain. Then, integrating the Web 2.0 client-server applications that are commonly used in MIS with Web 3.0 decentralised blockchain applications. © 2019 IEEE.},
	type = {Conference paper},
	publication_stage = {Final},
	source = {Scopus},
	note = {Cited by: 5; All Open Access, Green Open Access}
}

@ARTICLE{Lu20211059,
	author = {Lu, Qinghua and Binh Tran, An and Weber, Ingo and O'Connor, Hugo and Rimba, Paul and Xu, Xiwei and Staples, Mark and Zhu, Liming and Jeffery, Ross},
	title = {Integrated model-driven engineering of blockchain applications for business processes and asset management},
	year = {2021},
	journal = {Software - Practice and Experience},
	volume = {51},
	number = {5},
	pages = {1059 – 1079},
	doi = {10.1002/spe.2931},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85097142656&doi=10.1002%2fspe.2931&partnerID=40&md5=fedeec3294cfa10b2479d2d6ee4ed011},
	abstract = {Blockchain has attracted broad interests to build decentralised applications. A typical class of applications uses blockchain for the management of cross-organisational business processes as well as assets. However, developing such applications without introducing vulnerabilities is hard for developers, not the least because the deployed code is immutable and can be called by anyone with access to the network. Model-driven engineering (MDE) helps to reduce those risks, by combining proven code snippets as per the model specification, which is easier to understand than source code. Therefore, in this article, we present an approach for integrated MDE across business processes and asset management (e.g., for settlement). Our approach includes methods for fungible/non-fungible asset registration, escrow for conditional payment, and asset swap. The proposed MDE approach is implemented in a smart contract generation tool called Lorikeet, and evaluated in terms of feasibility, functional correctness, and cost effectiveness. © 2020 John Wiley & Sons, Ltd.},
	type = {Article},
	publication_stage = {Final},
	source = {Scopus},
	note = {Cited by: 23; All Open Access, Green Open Access}
}

@ARTICLE{Nazmul Islam2019,
	author = {Nazmul Islam, M.D. and Kundu, Sandip},
	title = {Enabling IC traceability via blockchain pegged to embedded PUF},
	year = {2019},
	journal = {ACM Transactions on Design Automation of Electronic Systems},
	volume = {24},
	number = {3},
	doi = {10.1145/3315669},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85065724970&doi=10.1145%2f3315669&partnerID=40&md5=9381f8b9449d7fc08ed1561c2d0c4ccf},
	abstract = {Globalization of IC supply chain has increased the risk of counterfeit, tampered, and re-packaged chips in the market. Counterfeit electronics poses a security risk in safety critical applications like avionics, SCADA systems, and defense. It also affects the reputation of legitimate suppliers and causes financial losses. Hence, it becomes necessary to develop traceability solutions to ensure the integrity of supply chain, from the time of fabrication to the end of product-life, which allows a customer to verify the provenance of a device or a system. In this article, we present an IC traceability solution based on blockchain. A blockchain is a public immutable database that maintains a continuously growing list of data records secured from tampering and revision. Over the lifetime of an IC, all ownership transfer information is recorded and archived in a blockchain. This safe, verifiable method prevents any party from altering or challenging the legitimacy of the information being exchanged. However, a chain of sales record is not enough to ensure provenance of an IC. There is a need for clone-proof method for securely binding the identity of an IC to the blockchain information. In this article, we propose a method of IC supply chain traceability via blockchain pegged to embedded physically unclonable function (PUF). The blockchain provides ownership transfer record, while the PUF provides unique identification for an IC allowing it to be linked uniquely to a blockchain. Our proposed solution automates hardware and software protocols using blockchain-powered Smart Contract that allows supply chain participants to authenticate, track, trace, analyze, and provision chips throughout their entire life cycle. © 2019 Association for Computing Machinery.},
	type = {Article},
	publication_stage = {Final},
	source = {Scopus},
	note = {Cited by: 39; All Open Access, Bronze Open Access}
}

@CONFERENCE{Genovese202151,
	author = {Genovese, Fabrizio Romano and Herold, Jelle and Loregian, Fosco and Palombi, Daniele},
	title = {A Categorical Semantics for Hierarchical Petri Nets},
	year = {2021},
	journal = {Electronic Proceedings in Theoretical Computer Science, EPTCS},
	volume = {350},
	pages = {51 – 68},
	doi = {10.4204/eptcs.350.4},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85122281759&doi=10.4204%2feptcs.350.4&partnerID=40&md5=46ea13b6e1d12b34b8cd2a99122bde9d},
	abstract = {We show how a particular variety of hierarchical nets, where the firing of a transition in the parent net must correspond to an execution in some child net, can be modelled utilizing a functorial semantics from a free category – representing the parent net – to the category of sets and spans between them. This semantics can be internalized via Grothendieck construction, resulting in the category of executions of a Petri net representing the semantics of the overall hierarchical net. We conclude the paper by giving an engineering-oriented overview of how our model of hierarchical nets can be implemented in a transaction-based smart contract environment. © 2021 Open Publishing Association. All rights reserved.},
	type = {Conference paper},
	publication_stage = {Final},
	source = {Scopus},
	note = {Cited by: 0; All Open Access, Gold Open Access, Green Open Access}
}

@ARTICLE{Hu20201,
	author = {Hu, Kai and Zhu, Jian and Ding, Yi and Bai, Xiaomin and Huang, Jiehua},
	title = {Smart contract engineering},
	year = {2020},
	journal = {Electronics (Switzerland)},
	volume = {9},
	number = {12},
	pages = {1 – 26},
	doi = {10.3390/electronics9122042},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85097162108&doi=10.3390%2felectronics9122042&partnerID=40&md5=4a0a93afcb8c75394fda72258479b8dd},
	abstract = {A smart contract is the algorithmic description of a contractual transaction protocol that is automatically executed together with the information provided by its parties. It is written in a simplified programming language that is specific to a particular domain. Not only correctness and unambiguity are its essential formal properties, but also conformance to any legislation governing the matter of the transaction. Finally, and importantly, the trustworthiness, safety and security of the platform executing the transactions are its main attributes. An emerging challenge is to define a proper engineering process to meet the demanding requirements while supporting mass production and distribution. This paper proposes the concept of smart contract engineering (SCE) to facilitate the generation of smart legal contracts, which is the combination of software engineering, formal methods and computational law. SCE aims to reduce the potential errors and improve efficiency during the contract development process, meanwhile promote the standardization of contract design methodologies. In this paper, the roadmap of an iterative refinement-based, model-driven formal design methodology is introduced, not only to validate smart contracts but also to support the whole life cycle of their engineering. © 2020 by the authors. Licensee MDPI, Basel, Switzerland.},
	type = {Article},
	publication_stage = {Final},
	source = {Scopus},
	note = {Cited by: 12; All Open Access, Gold Open Access}
}

@ARTICLE{Zheng2020475,
	author = {Zheng, Zibin and Xie, Shaoan and Dai, Hong-Ning and Chen, Weili and Chen, Xiangping and Weng, Jian and Imran, Muhammad},
	title = {An overview on smart contracts: Challenges, advances and platforms},
	year = {2020},
	journal = {Future Generation Computer Systems},
	volume = {105},
	pages = {475 – 491},
	doi = {10.1016/j.future.2019.12.019},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85076675572&doi=10.1016%2fj.future.2019.12.019&partnerID=40&md5=f5d402f40ec5c201a911ef05799c2a29},
	abstract = {Smart contract technology is reshaping conventional industry and business processes. Being embedded in blockchains, smart contracts enable the contractual terms of an agreement to be enforced automatically without the intervention of a trusted third party. As a result, smart contracts can cut down administration and save services costs, improve the efficiency of business processes and reduce the risks. Although smart contracts are promising to drive the new wave of innovation in business processes, there are a number of challenges to be tackled. This paper presents a survey on smart contracts. We first introduce blockchains and smart contracts. We then present the challenges in smart contracts as well as recent technical advances. We also compare typical smart contract platforms and give a categorization of smart contract applications along with some representative examples. © 2019 Elsevier B.V.},
	type = {Article},
	publication_stage = {Final},
	source = {Scopus},
	note = {Cited by: 328; All Open Access, Green Open Access}
}

@CONFERENCE{Barisic202137,
	author = {Barisic, Ankica and Zhu, Enlin and Mallet, Frederic},
	title = {Model-driven approach for the design of Multi-Chain Smart Contracts},
	year = {2021},
	journal = {2021 3rd Conference on Blockchain Research and Applications for Innovative Networks and Services, BRAINS 2021},
	pages = {37 – 38},
	doi = {10.1109/BRAINS52497.2021.9569809},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85118956309&doi=10.1109%2fBRAINS52497.2021.9569809&partnerID=40&md5=8cccde226b979ef3526f7cf7fbb9ef10},
	abstract = {Blockchain-based smart contracts provide transparent automation in a broad range of services, including finance, the Internet of Things, and autonomous systems. However, the implementation of such services may easily involve security risks and functional errors, especially for complex services composed of different blockchains. To help developers focus on their business model instead of diving into the blockchain architecture heterogeneity, we propose a framework to enable analysis and comparison of composed services before deployment. This is achieved through the intensive use of model-based engineering allowing reasoning on the model before generating concrete deployment artifacts, especially for the safe orchestration of contract calling transactions. © 2021 IEEE.},
	type = {Conference paper},
	publication_stage = {Final},
	source = {Scopus},
	note = {Cited by: 1; All Open Access, Green Open Access}
}

@CONFERENCE{Durieux2020530,
	author = {Durieux, Thomas and Ferreira, Joao F. and Abreu, Rui and Cruz, Pedro},
	title = {Empirical review of automated analysis tools on 47,587 ethereum smart contracts},
	year = {2020},
	journal = {Proceedings - International Conference on Software Engineering},
	pages = {530 – 541},
	doi = {10.1145/3377811.3380364},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85086825561&doi=10.1145%2f3377811.3380364&partnerID=40&md5=0c2de3588a789b208bd680837a09f74d},
	abstract = {Over the last few years, there has been substantial research on automated analysis, testing, and debugging of Ethereum smart contracts. However, it is not trivial to compare and reproduce that research. To address this, we present an empirical evaluation of 9 state-of-theart automated analysis tools using two new datasets: i) a dataset of 69 annotated vulnerable smart contracts that can be used to evaluate the precision of analysis tools; and ii) a dataset with all the smart contracts in the Ethereum Blockchain that have Solidity source code available on Etherscan (a total of 47,518 contracts). The datasets are part of SmartBugs, a new extendable execution framework that we created to facilitate the integration and comparison between multiple analysis tools and the analysis of Ethereum smart contracts. We used SmartBugs to execute the 9 automated analysis tools on the two datasets. In total, we ran 428,337 analyses that took approximately 564 days and 3 hours, being the largest experimental setup to date both in the number of tools and in execution time. We found that only 42% of the vulnerabilities from our annotated dataset are detected by all the tools, with the tool Mythril having the higher accuracy (27%). When considering the largest dataset, we observed that 97% of contracts are tagged as vulnerable, thus suggesting a considerable number of false positives. Indeed, only a small number of vulnerabilities (and of only two categories) were detected simultaneously by four or more tools.  © 2020 Association for Computing Machinery.},
	type = {Conference paper},
	publication_stage = {Final},
	source = {Scopus},
	note = {Cited by: 80; All Open Access, Green Open Access}
}

@CONFERENCE{Antonio Pierro202016,
	author = {Antonio Pierro, Giuseppe and Tonelli, Roberto},
	title = {PASO: A Web-Based Parser for Solidity Language Analysis},
	year = {2020},
	journal = {IWBOSE 2020 - Proceedings of the 2020 IEEE 3rd International Workshop on Blockchain Oriented Software Engineering},
	pages = {16 – 21},
	doi = {10.1109/IWBOSE50093.2020.9050263},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85083516356&doi=10.1109%2fIWBOSE50093.2020.9050263&partnerID=40&md5=956ae88bf5c7dcb64a8d246ddce86676},
	abstract = {Smart Contracts are computer programs which implement and execute transactions and manage business logic on a decentralized public ledger. Smart Contracts can be written in different programming languages and for different Blockchains. Currently the most used language for Smart Contracts is Solidity and the most used platform is the Ethereum Blockchain. Assessing the quality of Smart Contract programs is an important task required to professional programmers, especially when a programming language has so powerful economic implications. It is therefore crucial to provide professional programmers with tools for the evaluation of Smart Contracts. In software engineering, software metrics has been defined and used to measure software quality and, more in general, to qualify software under the principle 'You Can't Manage What You Don't Measure'. For the Solidity programming language there are only a few Standalone Applications to analyse the Smart Contract metrics. The aim of this paper is first to build a tool for the practical computation of a specific set of Solidity source code metrics, so that the set will be extensible in the future according also to Solidity compiler evolution, second to fully enable a web-based usage of the tool to access the metrics of the Solidity programming language. The tool, PASO, differently from the existing application, is able to give software metrics values for Smart Contracts written in Solidity programming language just using a web browser. © 2020 IEEE.},
	type = {Conference paper},
	publication_stage = {Final},
	source = {Scopus},
	note = {Cited by: 5; All Open Access, Green Open Access}
}

@ARTICLE{Matsuura20193,
	author = {Matsuura, Kanta},
	title = {Token model and interpretation function for blockchain-based Fintech applications},
	year = {2019},
	journal = {IEICE Transactions on Fundamentals of Electronics, Communications and Computer Sciences},
	number = {1},
	pages = {3 – 10},
	doi = {10.1587/transfun.E102.A.3},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85059979415&doi=10.1587%2ftransfun.E102.A.3&partnerID=40&md5=a35d1b1494a5aa82f89471977aebf25f},
	abstract = {Financial Technology (FinTech) is considered a taxonomy that describes a wide range of ICT (information and communications technology) associated with financial transactions and related operations. Improvement of service quality is the main issue addressed in this taxonomy, and there are a large number of emerging technologies including blockchain-based cryptocurrencies and smart contracts. Due to its innovative nature in accounting, blockchain can also be used in lots of other FinTech contexts where token models play an important role for financial engineering. This paper revisits some of the key concepts accumulated behind this trend, and shows a generalized understanding of the technology using an adapted stochastic process. With a focus on financial instruments using blockchain, research directions toward stable applications are identified with the help of a newly proposed stabilizer: interpretation function of token valuation. The idea of adapted stochastic process is essential for the stabilizer, too. Copyright © 2019 The Institute of Electronics, Information and Communication Engineers},
	type = {Article},
	publication_stage = {Final},
	source = {Scopus},
	note = {Cited by: 4; All Open Access, Bronze Open Access, Green Open Access}
}

@ARTICLE{Sillaber2021863,
	author = {Sillaber, Christian and Waltl, Bernhard and Treiblmaier, Horst and Gallersdörfer, Ulrich and Felderer, Michael},
	title = {Laying the foundation for smart contract development: an integrated engineering process model},
	year = {2021},
	journal = {Information Systems and e-Business Management},
	volume = {19},
	number = {3},
	pages = {863 – 882},
	doi = {10.1007/s10257-020-00465-5},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85079170235&doi=10.1007%2fs10257-020-00465-5&partnerID=40&md5=becbd0fd967a8ee729c19de6e79a1e8b},
	abstract = {Smart contracts are seen as the major building blocks for future autonomous blockchain- and Distributed Ledger Technology (DLT)-based applications. Engineering such contracts for trustless, append-only, and decentralized digital ledgers allows mutually distrustful parties to transform legal requirements into immutable and formalized rules. Previous experience shows this to be a challenging task due to demanding socio-technical ecosystems and the specificities of decentralized ledger technology. In this paper, we therefore develop an integrated process model for engineering DLT-based smart contracts that accounts for the specificities of DLT. This model was iteratively refined with the support of industry experts. The model explicitly accounts for the immutability of the trustless, append-only, and decentralized DLT ecosystem, and thereby overcomes certain limitations of traditional software engineering process models. More specifically, it consists of five successive and closely intertwined phases: conceptualization, implementation, approval, execution, and finalization. For each phase, the respective activities, roles, and artifacts are identified and discussed in detail. Applying such a model when engineering smart contracts will help software engineers and developers to better understand and streamline the engineering process of DLTs in general and blockchain in particular. Furthermore, this model serves as a generic framework which will support application development in all fields in which DLT can be applied. © 2020, The Author(s).},
	type = {Article},
	publication_stage = {Final},
	source = {Scopus},
	note = {Cited by: 14; All Open Access, Green Open Access, Hybrid Gold Open Access}
}

@CONFERENCE{Pani2019299,
	author = {Pani, Filippo Eros and Ibba, Giacomo and Marchesi, Michele and Pinna, Andrea and Porru, Simone and Tonelli, Roberto and Valcalda, Bartolomeo},
	title = {Blockchain certification and granular editing permissions in document management system},
	year = {2019},
	journal = {IC3K 2019 - Proceedings of the 11th International Joint Conference on Knowledge Discovery, Knowledge Engineering and Knowledge Management},
	volume = {3},
	pages = {299 – 306},
	doi = {10.5220/0008349902990306},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85074166162&doi=10.5220%2f0008349902990306&partnerID=40&md5=f6e43ed838c88c11dbedcae78a881bd7},
	abstract = {Ever-growing digitalization and increasingly competitive markets are driving industry and the public sector into fast-paced transformation. Competitive advantage is being acquired through technology investments made possible by previously unavailable resources, freed by process automation, simplification, and rationalization. Under these contingencies, we propose an innovative document management platform, featuring a collaborative document editing technique and a blockchain certification procedure. The two proposing parties - a private company and an academic organization - mutually agreed on employing open-source technologies as a strategic means to promote software reuse and developer communities' support, and consequently reduce implementation costs and ensure interoperability. Copyright © 2019 by SCITEPRESS - Science and Technology Publications, Lda. All rights reserved},
	type = {Conference paper},
	publication_stage = {Final},
	source = {Scopus},
	note = {Cited by: 0; All Open Access, Hybrid Gold Open Access}
}

@CONFERENCE{Wu2020826,
	author = {Wu, Zhenhao and Zhang, Jiashuo and Gao, Jianbo and Li, Yue and Li, Qingshan and Guan, Zhi and Chen, Zhong},
	title = {Kaya: A Testing Framework for Blockchain-based Decentralized Applications},
	year = {2020},
	journal = {Proceedings - 2020 IEEE International Conference on Software Maintenance and Evolution, ICSME 2020},
	pages = {826 – 829},
	doi = {10.1109/ICSME46990.2020.00103},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85096693644&doi=10.1109%2fICSME46990.2020.00103&partnerID=40&md5=283c35a3e47931872070ed417a7c2b72},
	abstract = {In recent years, many decentralized applications based on blockchain (DApp) have been developed. Some development tools provide testing functions, but only for developers to write unit tests for smart contracts rather than test DApp as a whole. Moreover, due to the difficulty for testers to understand the implementation details of smart contracts, insufficient functional testing causes some DApps not to meet functional design expectations. The inherent complexity of DApp, inconvenient pre-state setting, and not-so-readable logs make DApp testing challenging. In this paper, we propose Kaya, a testing framework for DApps to bridge these gaps. Firstly, Kaya formulate automatically executed test cases that cover both front-end behaviors and back-end logics with simple setting. Secondly, Kaya provides a flexible and convenient way for test engineers to set the blockchain pre-states. Thirdly, Kaya transforms incomprehensible addresses into readable variables for easier comprehension. Besides, to fit the various application environments, we provide both GUI and CLI for test engineers to use Kaya. Our case study and preliminary human study demonstrates the potential of Kaya in helping test engineers to test DApps more easily. A demo video is at https://youtu.be/7DyI_EpVZFw. © 2020 IEEE.},
	type = {Conference paper},
	publication_stage = {Final},
	source = {Scopus},
	note = {Cited by: 3; All Open Access, Green Open Access}
}

@CONFERENCE{Vacca2022214,
	author = {Vacca, Anna and Fredella, Michele and Di Sorbo, Andrea and Visaggio, Corrado A. and Canfora, Gerardo},
	title = {An Empirical Investigation on the Trade-off between Smart Contract Readability and Gas Consumption},
	year = {2022},
	journal = {IEEE International Conference on Program Comprehension},
	volume = {2022-March},
	pages = {214 – 224},
	doi = {10.1145/3524610.3529157},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85133169420&doi=10.1145%2f3524610.3529157&partnerID=40&md5=32d44b2928cdba7c73444b4e83935229},
	abstract = {Blockchain technology is becoming increasingly popular, and smart contracts (i.e., programs that run on top of the blockchain) represent a crucial element of this technology. In particular, smart contracts running on Ethereum (i.e., one of the most popular blockchain platforms) are often developed with Solidity, and their deployment and execution consume gas (i.e., a fee compensating the computing resources required). Smart contract development frequently involves code reuse, but poor readable smart contracts could hinder their reuse. However, writing readable smart contracts is challenging, since practices for improving the readability could also be in contrast with optimization strategies for reducing gas consumption. This paper aims at better understanding (i) the readability aspects for which traditional software and smart contracts differ, and (ii) the specific smart contract readability features exhibiting significant relationships with gas consumption. We leverage a set of metrics that previous research has proven correlated with code readability. In particular, we first compare the values of these metrics obtained for both Solidity smart contracts and traditional software systems (written in Java). Then, we investigate the correlations occurring between these metrics and gas consumption and between each pair of metrics. The results of our study highlight that smart contracts usually exhibit lower readability than traditional software for what concerns the number of parentheses, inline comments, and blank lines used. In addition, we found some readability metrics (such as the average length of identifiers and the average number of keywords) that significantly correlate with gas consumption.  © 2022 ACM.},
	type = {Conference paper},
	publication_stage = {Final},
	source = {Scopus},
	note = {Cited by: 0; All Open Access, Bronze Open Access}
}

@ARTICLE{Pustišek2022,
	author = {Pustišek, Matevž and Chen, Min and Kos, Andrej and Kos, Anton},
	title = {Decentralized Machine Autonomy for Manufacturing Servitization},
	year = {2022},
	journal = {Sensors},
	volume = {22},
	number = {1},
	doi = {10.3390/s22010338},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85122098985&doi=10.3390%2fs22010338&partnerID=40&md5=06f21eedabff5679335459aa54ce17a7},
	abstract = {Blockchain ecosystems are rapidly maturing and meeting the needs of business environ-ments (e.g., industry, manufacturing, and robotics). The decentralized approaches in industries enable novel business concepts, such as machine autonomy and servitization of manufacturing envi-ronments. Introducing the distributed ledger technology principles into the machine sharing and servitization economy faces several challenges, and the integration opens new interesting research questions. Our research focuses on data and event models and secure upgradeable smart contract platforms for machine servitization. Our research indicates that with the proposed approaches, we can efficiently separate on-and off-chain data and assure scalability of the DApp without compro-mising the trust. We demonstrate that the secure upgradeable smart contract platform, which was adapted for machine servitization, supports the business workflow and, at the same time, assures common identification and authorization of all the participants in the system, including people, de-vices, and legal entities. We present a hybrid decentralized application (DApp) for the servitization of 3D printing. The solution can be used for or easily adapted to other manufacturing domains. It comprises a modular, upgradeable smart contract platform and off-chain machine, customer and web management, and monitoring interfaces. We pay special attention to the data and event models during the design, which are fundamental for the hybrid data storage and DApp architecture and the responsiveness of off-chain interfaces. The smart contract platform uses a proxy contract to control the access of smart contracts and role-based access control in function calls for blockchain users. We deploy and evaluate the DApp in a consortium blockchain network for performance and pri-vacy. All the actors in the solution, including the machines, are identified by their blockchain ac-counts and are compeers. Our solution thus facilitates integration with the traditional information-communication systems in terms of the hybrid architectures and security standards for smart contract design comparable to those in traditional software engineering. © 2022 by the authors. Licensee MDPI, Basel, Switzerland.},
	type = {Article},
	publication_stage = {Final},
	source = {Scopus},
	note = {Cited by: 2; All Open Access, Gold Open Access, Green Open Access}
}

@ARTICLE{Chitti2019189,
	author = {Chitti, Phani and Murkin, Jordan and Chitchyan, Ruzanna},
	title = {Data management: Relational vs blockchain databases},
	year = {2019},
	journal = {Lecture Notes in Business Information Processing},
	volume = {349},
	pages = {189 – 200},
	doi = {10.1007/978-3-030-20948-3_17},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85066843358&doi=10.1007%2f978-3-030-20948-3_17&partnerID=40&md5=06cf54d1f285c0dc017393de1659aca2},
	abstract = {This paper presents an initial exploitative study of how the relational and blockchain databases compare in defining and deploying data structures, populating these with new entries, and retrieving the relevant data for further use. The aim of this study is to better inform the software developers in general and the distributed application developers in particular. © Springer Nature Switzerland AG 2019.},
	type = {Conference paper},
	publication_stage = {Final},
	source = {Scopus},
	note = {Cited by: 8; All Open Access, Green Open Access}
}

@CONFERENCE{Ibba202134,
	author = {Ibba, Giacomo and Pierro, Giuseppe Antonio and Francesco, Marco Di},
	title = {Evaluating Machine-Learning Techniques for Detecting Smart Ponzi Schemes},
	year = {2021},
	journal = {Proceedings - 2021 IEEE/ACM 4th International Workshop on Emerging Trends in Software Engineering for Blockchain, WETSEB 2021},
	pages = {34 – 40},
	doi = {10.1109/WETSEB52558.2021.00012},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85112863354&doi=10.1109%2fWETSEB52558.2021.00012&partnerID=40&md5=e26e19982bdf193bab11bca11cb6ef71},
	abstract = {Ethereum is one of the most popular platforms for exchanging cryptocurrencies as well as the most established for peer to peer programming and smart contracts publishing [3]. The versatility of the Solidity language allows developers to program general-purpose smart contracts. Among the various smart contracts, there may be some fraudulent ones, whose purpose is to steal Ether from the network participants. A notorious example of such cases are Ponzi schemes, i.e. a financial frauds that require investors to be repaid through the investments of others who have just entered the scheme. Within the Ethereum blockchain, several contracts have been identified as being Ponzi schemes. The paper proposes a machine learning model that uses textual classification techniques to recognize contracts emulating the behavior of a Ponzi scheme. Starting from a contracts dataset containing exclusively Ponzi schemes uploaded between 2016 and 2018, we built models able to properly classify Ponzi schemes contracts. We tested several models, some of which returned an overall accuracy of 99% on classification. The best model turned out to be the linear Support Vector Machine and the Multinomial Naive Bayes model, which provides the best results in terms of metrics evaluation.  © 2021 IEEE.},
	type = {Conference paper},
	publication_stage = {Final},
	source = {Scopus},
	note = {Cited by: 7; All Open Access, Green Open Access}
}

@ARTICLE{Köpke2023382,
	author = {Köpke, Julius and Meroni, Giovanni and Salnitri, Mattia},
	title = {Designing secure business processes for blockchains with SecBPMN2BC},
	year = {2023},
	journal = {Future Generation Computer Systems},
	volume = {141},
	pages = {382 – 398},
	doi = {10.1016/j.future.2022.11.013},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85143681101&doi=10.1016%2fj.future.2022.11.013&partnerID=40&md5=288775a9f763d9d847dc66e2e37aa1f0},
	abstract = {Collaborative business processes can be seen as smart contracts, as they are oftentimes adopted to express agreements among different organizations. Indeed, they provide mechanisms to formalize the obligations of each involved party. For instance, collaborative business processes can specify when a certain task should be executed, under which conditions a service should be offered to the other participants, and how physical objects and information should be manipulated. In this setting, to prevent misuse of smart contracts and services and information provided, it is paramount to guarantee by design that security requirements are fulfilled. With the rise in popularity of blockchains, several approaches exploiting the trusted smart contract execution environment offered by this technology to enforce collaborative business processes have been proposed. Yet, the complexity of business processes, security requirements, and blockchain applications calls for an engineering approach that guides the design of secure business processes. Such an approach should both take advantage of the possibilities offered by blockchain technology to enforce some security requirements (e.g., non-repudiation), and take into account the limitations blockchain poses for other security requirements (e.g., confidentiality). However, we are not aware of any existing work that aims at addressing such issues following a similar approach. In this article, we propose SecBPMN2BC: a model-driven approach to designing business processes with security requirements that are meant to be deployed on blockchains. SecBPMN2BC consists of: (i) an extension of BPMN 2.0 that allows designing secure smart contracts; (ii) a set of algorithms and their implementation that check incompatible security requirements and help the design of smart contracts; (iii) a workflow that guides the application of the method. The method has been validated with a survey conducted on security and BPMN experts. © 2022 The Author(s)},
	type = {Article},
	publication_stage = {Final},
	source = {Scopus},
	note = {Cited by: 0; All Open Access, Green Open Access, Hybrid Gold Open Access}
}

@ARTICLE{Yu2020,
	author = {Yu, Xiao Liang and Al-Bataineh, Omar and Lo, David and Roychoudhury, Abhik},
	title = {Smart Contract Repair},
	year = {2020},
	journal = {ACM Transactions on Software Engineering and Methodology},
	volume = {29},
	number = {4},
	doi = {10.1145/3402450},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85092691115&doi=10.1145%2f3402450&partnerID=40&md5=bdc47055036de9c4e06e4a32fff7455c},
	abstract = {Smart contracts are automated or self-enforcing contracts that can be used to exchange assets without having to place trust in third parties. Many commercial transactions use smart contracts due to their potential benefits in terms of secure peer-to-peer transactions independent of external parties. Experience shows that many commonly used smart contracts are vulnerable to serious malicious attacks, which may enable attackers to steal valuable assets of involving parties. There is, therefore, a need to apply analysis and automated repair techniques to detect and repair bugs in smart contracts before being deployed. In this work, we present the first general-purpose automated smart contract repair approach that is also gas-aware. Our repair method is search-based and searches among mutations of the buggy contract. Our method also considers the gas usage of the candidate patches by leveraging our novel notion of gas dominance relationship. We have made our smart contract repair tool SCRepair available open-source, for investigation by the wider community.  © 2020 ACM.},
	type = {Article},
	publication_stage = {Final},
	source = {Scopus},
	note = {Cited by: 17; All Open Access, Green Open Access}
}

@ARTICLE{Xenakis202173963,
	author = {Xenakis, Dionysis and Tsiota, Anastasia and Koulis, Christos-Thrasyvoulos and Xenakis, Christos and Passas, Nikos},
	title = {Contract-Less Mobile Data Access beyond 5G: Fully-Decentralized, High-Throughput and Anonymous Asset Trading over the Blockchain},
	year = {2021},
	journal = {IEEE Access},
	volume = {9},
	pages = {73963 – 74016},
	doi = {10.1109/ACCESS.2021.3079625},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85105892876&doi=10.1109%2fACCESS.2021.3079625&partnerID=40&md5=66cd05b5731befd7dc41a6f76177bcc8},
	abstract = {The new 'status quo' created by the emerging integration of Multi-Access Edge Computing (MEC) and Radio Access Network (RAN) infrastructures, combined with the openness of the 5G service market, have set new standards on how the multitude of 5G service domains should be incentivized and coordinated to comply with the performance requirements set on a per session basis. In this paper, we revisit the predominant offline contract-driven mobile data access model enabling users to gain access to the infrastructure of only a few network operators and propose a new blockchain-backed mobile data access model where the key 5G stakeholders can trade, share and consume mobile edge network assets (access to the internet, spectrum, processing, storage, local content etc.) in a fully decentralized, anonymous and highly-robust fashion. Blockchain-backed mobile data access should address critical practical challenges of blockchain decentralization, scalability and security in the context of 5G and Beyond networks. Accordingly, we provide a meticulous survey of existing solutions in the aforementioned three areas and present a comprehensive holistic framework of protocols to address the key challenges identified, including a delegated Proof-of-Stake (DPoS) for distributed blockchain consensus over 5G and Beyond mobile data networks, a future-proof smart-contract enabled payment relay service enabling instant off-chain payments in a highly robust fashion as well as a hybrid mixing protocol that enables payment relays to act as anonymous payment hubs while addressing the unique challenges opposed by the joint blockchain and network level interaction of the 5G and Beyond service components. A wide range of practical implications and mitigation measures for dishonest operation of the blockchain nodes are investigated and sophisticated yet highly-robust incentive engineering mechanisms are derived. Detailed numerical results also accompany the paper, bringing to light the unique performance trade-offs and valuable design guidelines towards blockchain-backed mobile data access for 5G and Beyond mobile data networks.  © 2013 IEEE.},
	type = {Article},
	publication_stage = {Final},
	source = {Scopus},
	note = {Cited by: 9; All Open Access, Gold Open Access}
}

@CONFERENCE{Gao20201400,
	author = {Gao, Zhipeng},
	title = {When Deep Learning Meets Smart Contracts},
	year = {2020},
	journal = {Proceedings - 2020 35th IEEE/ACM International Conference on Automated Software Engineering, ASE 2020},
	pages = {1400 – 1402},
	doi = {10.1145/3324884.3418918},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85099254386&doi=10.1145%2f3324884.3418918&partnerID=40&md5=f3e7838e9da081b105ff0f4a2cb758b7},
	abstract = {Ethereum has become a widely used platform to enable secure, Blockchain-based financial and business transactions. However, many identified bugs and vulnerabilities in smart contracts have led to serious financial losses, which raises serious concerns about smart contract security. Thus, there is a significant need to better maintain smart contract code and ensure its high reliability. In this research: (1) Firstly, we propose an automated deep learning based approach to learn structural code embeddings of smart contracts in Solidity, which is useful for clone detection, bug detection and contract validation on smart contracts. We apply our approach to more than 22K solidity contracts collected from the Ethereum blockchain, results show that the clone ratio of solidity code is at around 90%, much higher than traditional software. We collect a list of 52 known buggy smart contracts belonging to 10 kinds of common vulnerabilities as our bug database. Our approach can identify more than 1000 clone related bugs based on our bug databases efficiently and accurately. (2) Secondly, according to developers' feedback, we have implemented the approach in a web-based tool, named Smartembed, to facilitate Solidity developers for using our approach. Our tool can assist Solidity developers to efficiently identify repetitive smart contracts in the existing Ethereum blockchain, as well as checking their contract against a known set of bugs. which can help to improve the users' confidence in the reliability of the contract. We optimize the implementations of Smartembed which is sufficient in supporting developers in real-time for practical uses. The Ethereum ecosystem as well as the individual Solidity developer can both benefit from our research. Smartembed website: http://www.smartembed.tools Demo video: https://youtu.be/o9ylyOpYFq8 Replication package: https://github.com/beyondacm/SmartEmbed. © 2020 ACM.},
	type = {Conference paper},
	publication_stage = {Final},
	source = {Scopus},
	note = {Cited by: 2; All Open Access, Green Open Access}
}

@CONFERENCE{Bragagnolo20191,
	author = {Bragagnolo, Santiago and Marra, Matteo and Polito, Guillermo and Gonzalez Boix, Elisa},
	title = {Towards scalable blockchain analysis},
	year = {2019},
	journal = {Proceedings - 2019 IEEE/ACM 2nd International Workshop on Emerging Trends in Software Engineering for Blockchain, WETSEB 2019},
	pages = {1 – 7},
	doi = {10.1109/WETSEB.2019.00007},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85073159779&doi=10.1109%2fWETSEB.2019.00007&partnerID=40&md5=80d3b820b87b382a7c8a6a8965e50361},
	abstract = {Analysing the blockchain is becoming more and more relevant for detecting attacks and frauds on cryptocurrency exchanges and smart contract activations. However, this is a challenging task due to the continuous growth of the blockchain. For example, in early 2017 Ethereum was estimated to contain approximately 300GB of data [1], a number that keeps growing day after day. In order to analyse such ever-growing amount of data, this paper argues that blockchain analysis should be treated as a novel type of application for Big Data platforms. In this paper we explore the application of parallelization techniques from the Big Data domain, in particular Map/Reduce, to extract and analyse information from the blockchain. We show that our approach significantly improves the index generation by 7.77 times, with a setup of 20 worker nodes, 1 Ethereum node and 1 Database node. We also share our findings of our massively parallel setup for querying Ethereum in terms of architecture and the bottlenecks. This should help researchers setup similar infrastructures for analysing the blockchain in the future. © 2019 IEEE.},
	type = {Conference paper},
	publication_stage = {Final},
	source = {Scopus},
	note = {Cited by: 17; All Open Access, Green Open Access}
}

@ARTICLE{Daramola2020,
	author = {Daramola, Olawande and Thebus, Darren},
	title = {Architecture-centric evaluation of blockchain-based smart contract E-voting for national elections},
	year = {2020},
	journal = {Informatics},
	volume = {7},
	number = {2},
	doi = {10.3390/informatics7020016},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85091760555&doi=10.3390%2finformatics7020016&partnerID=40&md5=c63be9766a720296c6ae220c7654a126},
	abstract = {E-voting is one of the valid use cases of blockchain technology with many blockchain e-voting systems already proposed. But efforts that focus on critical analysis of blockchain e-voting architectures for national elections from stakeholders’ perspectives are mostly lacking in the literature. Therefore, government decision-makers and election stakeholders do not yet have a sufficient basis to understand the potential risks, challenges, and prospects that are associated with blockchain e-voting. This paper demonstrates how the use of the Architecture Trade-off Analysis Method (ATAM) can enable stakeholders in national elections to understand the risks, prospects, and challenges that could be associated with a blockchain e-voting system for national elections. By using a study context of South Africa, a proposed blockchain e-voting architecture was used as a basis to aid election stakeholders to reason on the concept of blockchain e-voting to get them to understand the potential risks, security threats, critical requirements attributes, and weaknesses that could be associated with using blockchain e-voting for national elections. The study found that blockchain e-voting can prevent many security attacks, internal vote manipulation, and promote transparency. However, voter validation and the security of the blockchain architecture are potential weaknesses that will need significant attention. © 2020 by the authors.},
	type = {Article},
	publication_stage = {Final},
	source = {Scopus},
	note = {Cited by: 19; All Open Access, Gold Open Access}
}

@CONFERENCE{Ivanov2021787,
	author = {Ivanov, Nikolay and Lou, Jianzhi and Chen, Ting and Li, Jin and Yan, Qiben},
	title = {Targeting the Weakest Link: Social Engineering Attacks in Ethereum Smart Contracts},
	year = {2021},
	journal = {ASIA CCS 2021 - Proceedings of the 2021 ACM Asia Conference on Computer and Communications Security},
	pages = {787 – 801},
	doi = {10.1145/3433210.3453085},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85108087620&doi=10.1145%2f3433210.3453085&partnerID=40&md5=3254e1542a975ea28f05a67d9bfae549},
	abstract = {Ethereum holds multiple billions of U.S. dollars in the form of Ether cryptocurrency and ERC-20 tokens, with millions of deployed smart contracts algorithmically operating these funds. Unsurprisingly, the security of Ethereum smart contracts has been under rigorous scrutiny. In recent years, numerous defense tools have been developed to detect different types of smart contract code vulnerabilities. When opportunities for exploiting code vulnerabilities diminish, the attackers start resorting to social engineering attacks, which aim to influence humans-often the weakest link in the system. The only known class of social engineering attacks in Ethereum are honeypots, which plant hidden traps for attackers attempting to exploit existing vulnerabilities, thereby targeting only a small population of potential victims. In this work, we explore the possibility and existence of new social engineering attacks beyond smart contract honeypots. We present two novel classes of Ethereum social engineering attacks-Address Manipulation and Homograph-and develop six zero-day social engineering attacks. To show how the attacks can be used in popular programming patterns, we conduct a case study of five popular smart contracts with combined market capitalization exceeding $29 billion, and integrate our attack patterns in their source codes without altering their existing functionality. Moreover, we show that these attacks remain dormant during the test phase but activate their malicious logic only at the final production deployment. We further analyze 85,656 open-source smart contracts, and discover that 1,027 of them can be used for the proposed social engineering attacks. We conduct a professional opinion survey with experts from seven smart contract auditing firms, corroborating that the exposed social engineering attacks bring a major threat to the smart contract systems. © 2021 ACM.},
	type = {Conference paper},
	publication_stage = {Final},
	source = {Scopus},
	note = {Cited by: 6; All Open Access, Green Open Access}
}

@ARTICLE{Cai2019138657,
	author = {Cai, Zhengying and Qu, Jing and Liu, Pingping and Yu, Jiao},
	title = {A blockchain smart contract based on light- weighted quantum blind signature},
	year = {2019},
	journal = {IEEE Access},
	volume = {7},
	pages = {138657 – 138668},
	doi = {10.1109/ACCESS.2019.2941153},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85077958709&doi=10.1109%2fACCESS.2019.2941153&partnerID=40&md5=3255fcf1c156eab58ff9102ab66dc147},
	abstract = {To improve the security performance of blockchain smart contracts against quantum attacks, a smart contract based on light-weighted quantum blind signature is proposed here. Firstly, a smart contract architecture is built after the discussion of related researches, and information processing and information transmitting for quantum blind signature are analyzed. Secondly, the life cycle and signature rules of quantum blind signature for smart contracts are presented. Thirdly, a quantum blind signature protocol for single signer in light-weighted smart contract is put forward, where its algorithm design and business flow are introduced in detail before the security performance of the proposed algorithm is analyzed. Fourthly, based on the former single-person signature algorithm, a more complex multi-person quantum blind signature algorithm is proposed, and its security is also analyzed. Fifthly, related references are compared to verify the proposed method. The proposed quantum signature schemes based on quantum entanglement features can be used in single signer case or more, and will improve the security of blockchain smart contracts against quantum attacks, but with light-weighted structure and no need of any trusted third party or arbitrary institute. Finally, some suggestions for engineering applications and the research results are summarized and the future research is prospected. © 2013 IEEE.},
	type = {Article},
	publication_stage = {Final},
	source = {Scopus},
	note = {Cited by: 15; All Open Access, Gold Open Access}
}

@ARTICLE{Alabdulatif2023,
	author = {Alabdulatif, Abdulatif and Al Asqah, Muneerah and Moulahi, Tarek and Zidi, Salah},
	title = {Leveraging Artificial Intelligence in Blockchain-Based E-Health for Safer Decision Making Framework},
	year = {2023},
	journal = {Applied Sciences (Switzerland)},
	volume = {13},
	number = {2},
	doi = {10.3390/app13021035},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85146678595&doi=10.3390%2fapp13021035&partnerID=40&md5=8f6c07e9b7c1895b4a8c82bce88ead01},
	abstract = {Machine learning-based (ML) systems are becoming the primary means of achieving the highest levels of productivity and effectiveness. Incorporating other advanced technologies, such as the Internet of Things (IoT), or e-Health systems, has made ML the first choice to help automate systems and predict future events. The execution environment of ML is always presenting contrasting types of threats, such as adversarial poisoning of training datasets or model parameters manipulation. Blockchain technology is known as a decentralized network of blocks that symbolizes means of protecting block content integrity and ensuring secure execution of operations.Existing studies partially incorporated Blockchain into the learning process. This paper proposes a more extensive secure way to protect the decision process of the learning model. Using smart contracts, this study executed the model’s decision by the reversal engineering of the learning model’s decision function from the extracted learning parameters. We deploy Support Vector Machine (SVM) and Multi-Layer Perceptron (MLP) classifiers decision functions on-chain for more comprehensive integration of Blockchain. The effectiveness of this proposed approach is measured by applying a case study of medical records. In a safe environment, SVM prediction scores were found to be higher than MLP. However, MLP had higher time efficiency. © 2023 by the authors.},
	type = {Article},
	publication_stage = {Final},
	source = {Scopus},
	note = {Cited by: 0; All Open Access, Gold Open Access, Green Open Access}
}

@ARTICLE{Udvaros2023,
	author = {Udvaros, József and Forman, Norbert and Avornicului, Szilárd Mihály},
	title = {Agile Storyboard and Software Development Leveraging Smart Contract Technology in Order to Increase Stakeholder Confidence},
	year = {2023},
	journal = {Electronics (Switzerland)},
	volume = {12},
	number = {2},
	doi = {10.3390/electronics12020426},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85146527594&doi=10.3390%2felectronics12020426&partnerID=40&md5=a83f3179959a2980ddc73f4cac607e99},
	abstract = {We present a solution based on blockchain technology and smart contracts for agile project management in light of the continuing transition in the software development industry. Due to the fact that these technologies are self-executing, customized, and impervious to tampering, they are considered to be crucial for the transition to a more efficient, transparent, and transactive payment gateway between major stakeholders. These major stakeholders will be able to communicate through smart contracts, which will act as a bridge between them. As part of their responsibility, they will make sure that all of the terms of the contract are met and acknowledged by all members of the team. As a result of our research, we propose a model in which payouts could be automatically enabled and penalties or grants could be introduced based on performance. If any changes were to be made to the contract in the future, all parties involved would be automatically notified. To maintain the development cycle, they should accept these changes as soon as possible. Because of this, the product owner and client are able to concentrate their resources on more profitable and productive tasks, without the need to monitor this aspect of agile project management. Our proposed model brings together different partners with the objective of successfully developing different IT projects by leveraging software engineering solutions such as smart contracts. © 2023 by the authors.},
	type = {Article},
	publication_stage = {Final},
	source = {Scopus},
	note = {Cited by: 0; All Open Access, Gold Open Access}
}

@ARTICLE{Trebbau2021167,
	author = {Trebbau, Simon and Wizenty, Philip and Sachweh, Sabine},
	title = {Towards Integrating Blockchains with Microservice Architecture Using Model-Driven Engineering},
	year = {2021},
	journal = {Lecture Notes in Business Information Processing},
	volume = {426},
	pages = {167 – 175},
	doi = {10.1007/978-3-030-88583-0_16},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85118120614&doi=10.1007%2f978-3-030-88583-0_16&partnerID=40&md5=0544017f64a0a74ea5369cbc1e6b4cbb},
	abstract = {Blockchain presents a feasible method to persist immutable information in a distributed ledger to improve the level of authentication and trust. Moreover, smart contracts enable the automated execution of any contract concluded between participants of the Blockchain network. On the other hand, Microservice Architecture (MSA) is a novel approach towards service-based scalable applications. In our paper, we present an approach based on Model-Driven Engineering (MDE) that aims to facilitate the integration process of Blockchains into MSA-based applications in order to benefit from the advantages attributed to Blockchains. © 2021, The Author(s).},
	type = {Conference paper},
	publication_stage = {Final},
	source = {Scopus},
	note = {Cited by: 1; All Open Access, Hybrid Gold Open Access}
}

@CONFERENCE{Contro2021127,
	author = {Contro, Filippo and Crosara, Marco and Ceccato, Mariano and Preda, Mila Dalla},
	title = {EtherSolve: Computing an Accurate Control-Flow Graph from Ethereum Bytecode},
	year = {2021},
	journal = {IEEE International Conference on Program Comprehension},
	volume = {2021-May},
	pages = {127 – 137},
	doi = {10.1109/ICPC52881.2021.00021},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85113201395&doi=10.1109%2fICPC52881.2021.00021&partnerID=40&md5=9627539c14f4ceba12bcce2ec90f3b62},
	abstract = {Motivated by the immutable nature of Ethereum smart contracts and of their transactions, quite many approaches have been proposed to detect defects and security problems before smart contracts become persistent in the blockchain and they are granted control on substantial financial value.Because smart contracts source code might not be available, static analysis approaches mostly face the challenge of analysing compiled Ethereum bytecode, that is available directly from the official blockchain. However, due to the intrinsic complexity of Ethereum bytecode (especially in jump resolution), static analysis encounters significant obstacles that reduce the accuracy of exiting automated tools.This paper presents a novel static analysis algorithm based on the symbolic execution of the Ethereum operand stack that allows us to resolve jumps in Ethereum bytecode and to construct an accurate control-flow graph (CFG) of the compiled smart contracts. EtherSolve is a prototype implementation of our approach. Experimental results on a significant set of real world Ethereum smart contracts show that EtherSolve improves the accuracy of the execrated CFGs with respect to the state of the art available approaches.Many static analysis techniques are based on the CFG representation of the code and would therefore benefit from the accurate extraction of the CFG. For example, we implemented a simple extension of EtherSolve that allows to detect instances of the re-entrancy vulnerability.  © 2021 IEEE.},
	type = {Conference paper},
	publication_stage = {Final},
	source = {Scopus},
	note = {Cited by: 9; All Open Access, Green Open Access}
}

@ARTICLE{Gu202015241,
	author = {Gu, ai and Yin, Zhenyu and Cui, Chuanyu and Li, Yue},
	title = {Integrated Functional Safety and Security Diagnosis Mechanism of CPS Based on Blockchain},
	year = {2020},
	journal = {IEEE Access},
	volume = {8},
	pages = {15241 – 15255},
	doi = {10.1109/aCCESS.2020.2967453},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85079789579&doi=10.1109%2faCCESS.2020.2967453&partnerID=40&md5=100b5dc58af083e75e0db397dcbfd190},
	abstract = {This paper proposes a functional safety and information security protection mechanism based on blockchain technology. The design of the basic level and integration level blockchain structure of CPS distributed architecture and related functional safety and information security measures are introduced. an effective communication judgment mechanism based on functional safety error threshold is proposed, which is stored and judged by smart contract. and a refund transaction with a clock is proposed to ensure the effective execution of the functional safety error threshold mechanism. The article takes cyber physical machine tool system as an example to describe the SIL judgment method of CPS physical equipment and functional safety loop and combines SIL with fault diagnosis and risk protection. Finally, the rationality of our proposed mechanism is proved by information security, functional security, real-time and maintainability. © 2013 IEEE.},
	type = {Article},
	publication_stage = {Final},
	source = {Scopus},
	note = {Cited by: 9; All Open Access, Gold Open Access}
}

@ARTICLE{Stahnke202085,
	author = {Stahnke, Susanne and Shumaiev, Klym and Cuellar, Jorge and Kasinathan, Prabhakaran},
	title = {Enforcing a cross-organizational workflow: An experience report},
	year = {2020},
	journal = {Lecture Notes in Business Information Processing},
	volume = {387 LNBIP},
	pages = {85 – 98},
	doi = {10.1007/978-3-030-49418-6_6},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85086311925&doi=10.1007%2f978-3-030-49418-6_6&partnerID=40&md5=a6843bded7ac0230a22aef292bf4e7e8},
	abstract = {Today business processes often exceed organizational boundaries and the participants may not fully trust each other. In the past, this trust was guaranteed solely through legal contracts. To digitally establish trust without requiring a trusted third party, Blockchain technology together with Smart Contracts is used to ensure that involved organizations can not break their agreements. This experience report introduces a workflow enforcement method for a particular use case, the certification of the construction of industrial plants. The method comprises the modelling of the workflow, the verification of the models and the translation into Smart Contracts. © Springer Nature Switzerland AG 2020.},
	type = {Conference paper},
	publication_stage = {Final},
	source = {Scopus},
	note = {Cited by: 4; All Open Access, Bronze Open Access}
}

@ARTICLE{Fridgen2021603,
	author = {Fridgen, Gilbert and Radszuwill, Sven and Schweizer, André and Urbach, Nils},
	title = {Blockchain Won’t Kill the Banks: Why Disintermediation Doesn’t Work in International Trade Finance},
	year = {2021},
	journal = {Communications of the Association for Information Systems},
	volume = {49},
	number = {1},
	pages = {603 – 623},
	doi = {10.17705/1CAIS.04932},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85126341293&doi=10.17705%2f1CAIS.04932&partnerID=40&md5=e2cffe385714be63a4687fb22824fdc5},
	abstract = {In the financial services industry, many people assume blockchain to have significant impacts. From research and practice, we observe two main paradigms of how organizations interact with blockchain. First, organizations use blockchain to optimize existing processes (blockchain-based business process optimization (BPO)). Second, organizations use blockchain to disrupt existing processes, foster disintermediation, and enable disruptive business models (blockchain-based business process disruption (BPD)). However, we lack scientific research that evaluates its de facto potential. We bridge this gap by following a design science research approach to design blockchain-based business process re-engineering (BPRE) for a letter of credit that combines the advantages of BPO and BPD. We conduct three design cycles and develop three artefacts: a BPO, a BPD, and a BPRE approach. Our BPRE approach combines the advantages of partial disintermediation (i.e., increased efficiency and transparency) with the advantages of intermediaries (i.e., process flexibility, liquidity provision, and dispute mediation). © 2021 by the Association for Information Systems.},
	type = {Article},
	publication_stage = {Final},
	source = {Scopus},
	note = {Cited by: 1; All Open Access, Green Open Access}
}

@CONFERENCE{Hu2021423,
	author = {Hu, Tianyuan and Pan, Zhenyu and Li, Bixin},
	title = {SolDetector: Detect defects based on knowledge graph of solidity smart contract},
	year = {2021},
	journal = {Proceedings of the International Conference on Software Engineering and Knowledge Engineering, SEKE},
	volume = {2021-July},
	pages = {423 – 428},
	doi = {10.18293/SEKE2021-133},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85114282646&doi=10.18293%2fSEKE2021-133&partnerID=40&md5=4bd76087f61e41419592df1a5d461dd0},
	abstract = {Smart contract security is one of core security issues in the application of blockchain. In recent years, attacks on smart contracts occur frequently, there are a lot of researches concerning on smart contract security issues. However, almost all solutions proposed in these researches are low precision and high False Negative Rate(FNR). In this paper, we propose a defect detection method for checking security of Solidity smart contract based on knowledge graph. Therefore, we first construct knowledge graph of smart contracts by fully integrating syntax and semantic information of Solidity source code; then, we define defect patterns by analyzing defect characteristics; furthermore, we define inference rules for defects based on knowledge graph and defect patterns; finally, we detect defects by SPARQL query. We also implement a tool named SolDetector and perform experiment on three different datasets, which shows that SolDetector is effective and efficient. © 2021 Knowledge Systems Institute Graduate School. All rights reserved.},
	type = {Conference paper},
	publication_stage = {Final},
	source = {Scopus},
	note = {Cited by: 0; All Open Access, Bronze Open Access}
}

@ARTICLE{Wang20221795,
	author = {Wang, Haijun and Liu, Ye and Li, Yi and Lin, Shang-Wei and Artho, Cyrille and Ma, Lei and Liu, Yang},
	title = {Oracle-Supported Dynamic Exploit Generation for Smart Contracts},
	year = {2022},
	journal = {IEEE Transactions on Dependable and Secure Computing},
	volume = {19},
	number = {3},
	pages = {1795 – 1809},
	doi = {10.1109/TDSC.2020.3037332},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85098794216&doi=10.1109%2fTDSC.2020.3037332&partnerID=40&md5=9150bb36aec88bee7fee91e6bcbba73f},
	abstract = {Despite the high stakes involved in smart contracts, they are often developed in an undisciplined manner, leaving the security and reliability of blockchain transactions at risk. In this article, we introduce ContraMaster - an oracle-supported dynamic exploit generation framework for smart contracts. Existing approaches mutate only single transactions; ContraMaster exceeds these by mutating the transaction sequences. ContraMaster uses data-flow, control-flow, and the dynamic contract state to guide its mutations. It then monitors the executions of target contract programs, and validates the results against a general-purpose semantic test oracle to discover vulnerabilities. Being a dynamic technique, it guarantees that each discovered vulnerability is a violation of the test oracle and is able to generate the attack script to exploit this vulnerability. In contrast to rule-based approaches, ContraMaster has not shown any false positives, and it easily generalizes to unknown types of vulnerabilities (e.g., logic errors). We evaluate ContraMaster on 218 vulnerable smart contracts. The experimental results confirm its practical applicability and advantages over the state-of-the-art techniques, and also reveal three new types of attacks.  © 2004-2012 IEEE.},
	type = {Article},
	publication_stage = {Final},
	source = {Scopus},
	note = {Cited by: 2; All Open Access, Green Open Access}
}

@ARTICLE{Alsaadi2021730,
	author = {Alsaadi, Afnan H. and Bamasoud, Doaa M.},
	title = {Blockchain Technology in Education System A Survey Examining Potential Uses of Blockchain in Saudi Arabia Education},
	year = {2021},
	journal = {International Journal of Advanced Computer Science and Applications},
	volume = {12},
	number = {5},
	pages = {730 – 739},
	doi = {10.14569/IJACSA.2021.0120585},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85107605904&doi=10.14569%2fIJACSA.2021.0120585&partnerID=40&md5=f383770bac400c33cf0128240836a16b},
	abstract = {The aim of this paper is to review the blockchain technology and its benefits in relations to education system. Blockchain technology is widely researched and highly evaluated and appraised for its unique infrastructure. In general, blockchain researched for its association with Bitcoin and cryptocurrency advantages. In this survey the plan is to conduct a full review of previous literatures focused on blockchain in education systems. Provide overall reviews of blockchain concepts and architecture behind the technology and to examine verification software that used by the technology to improve security and immutability. Brief discussion on the consensus algorithms and hashing function and how these operate and difference type of blockchain will be discussed. In this survey, the existing technology used in Saudi Arabia will be reviewed. In-depth research conducted for over 70 papers, of which 35 noted in this survey. Blockchain emerging promise a real time democracy and justice to all users over the world. Educational Industries said to revolutionize its communication system and accessibility and extend their market globally by widening their admissions and providing secure cost-effective, transparent and immutable communications across their educational platforms. © 2021. All Rights Reserved.},
	type = {Article},
	publication_stage = {Final},
	source = {Scopus},
	note = {Cited by: 1; All Open Access, Gold Open Access}
}

@CONFERENCE{Atzei20191124,
	author = {Atzei, Nicola and Bartoletti, Massimo and Lande, Stefano and Yoshida, Nobuko and Zunino, Roberto},
	title = {Developing secure bitcoin contracts with BitML},
	year = {2019},
	journal = {ESEC/FSE 2019 - Proceedings of the 2019 27th ACM Joint Meeting European Software Engineering Conference and Symposium on the Foundations of Software Engineering},
	pages = {1124 – 1128},
	doi = {10.1145/3338906.3341173},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85071914633&doi=10.1145%2f3338906.3341173&partnerID=40&md5=77588faf7f8f9a7cc7da6a5dbb169fde},
	abstract = {We present a toolchain for developing and verifying smart contracts that can be executed on Bitcoin. The toolchain is based on BitML, a recent domain-specific language for smart contracts with a computationally sound embedding into Bitcoin. Our toolchain automatically verifies relevant properties of contracts, among which liquidity, ensuring that funds do not remain frozen within a contract forever. A compiler is provided to translate BitML contracts into sets of standard Bitcoin transactions: executing a contract corresponds to appending these transactions to the blockchain. We assess our toolchain through a benchmark of representative contracts. © 2019 ACM.},
	type = {Conference paper},
	publication_stage = {Final},
	source = {Scopus},
	note = {Cited by: 14; All Open Access, Green Open Access}
}

@CONFERENCE{Gao201923,
	author = {Gao, Jianbo and Liu, Han and Liu, Chao and Li, Qingshan and Guan, Zhi and Chen, Zhong},
	title = {EASYFLOW: Keep ethereum away from overflow},
	year = {2019},
	journal = {Proceedings - 2019 IEEE/ACM 41st International Conference on Software Engineering: Companion, ICSE-Companion 2019},
	pages = {23 – 26},
	doi = {10.1109/ICSE-Companion.2019.00029},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85071837509&doi=10.1109%2fICSE-Companion.2019.00029&partnerID=40&md5=9b52e43fc04df10090a9065837379a73},
	abstract = {While Ethereum smart contracts enabled a wide range of blockchain applications, they are extremely vulnerable to different forms of security attacks. Due to the fact that transactions to smart contracts commonly involve cryptocurrency transfer, any successful attacks can lead to money loss or even financial disorder. In this paper, we focus on the overflow attacks in Ethereum, mainly because they widely rooted in many smart contracts and comparatively easy to exploit. We have developed EASYFLOW, an overflow detector at Ethereum Virtual Machine level. The key insight behind EASYFLOW is a taint analysis based tracking technique to analyze the propagation of involved taints. Specifically, EASYFLOW can not only divide smart contracts into safe contracts, manifested overflows, well-protected overflows and potential overflows, but also automatically generate transactions to trigger potential overflows. In our preliminary evaluation, EASYFLOW managed to find potentially vulnerable Ethereum contracts with little runtime overhead. A demo video of EASYFLOW is at https://youtu.be/QbUJkQI0L6o. © 2019 IEEE.},
	type = {Conference paper},
	publication_stage = {Final},
	source = {Scopus},
	note = {Cited by: 20; All Open Access, Green Open Access}
}

@ARTICLE{Hartel2019177539,
	author = {Hartel, Pieter and Homoliak, Ivan and Reijsbergen, Daniel},
	title = {An Empirical Study into the Success of Listed Smart Contracts in Ethereum},
	year = {2019},
	journal = {IEEE Access},
	volume = {7},
	pages = {177539 – 177555},
	doi = {10.1109/ACCESS.2019.2957284},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85077236404&doi=10.1109%2fACCESS.2019.2957284&partnerID=40&md5=504adc6a7eb154328790e6eecf618d3a},
	abstract = {Since it takes time and effort to put a new product or service on the market, one would like to predict whether it will be a success. In general this is not possible, but it is possible to follow best practices in order to maximize the chance of success. A smart contract is intended to encode business logic and is therefore at the heart of every new business on the Ethereum blockchain. We have investigated how to measure the success of smart contracts, and whether successful smart contracts have characteristics that less successful smart contracts lack. The appearance of a smart contract on a listing website such as Etherscan or StateoftheDapps is such a characteristic. In this paper, we present a three-pronged analysis of the relative success of listed smart contracts. First, we have used statistical analysis on the publicly visible transaction history of the Ethereum blockchain to determine that listed contracts are significantly more successful than their unlisted counterparts. Next, we have conducted a survey among more than 200 developers via an anonymous online survey about their experience with the listing process. A significant majority of respondents do not believe that listing a contract itself contributes to its success, but they believe that the extra attention that is typically paid in tandem with the listing process does contribute. Finally, based on the respondents' answers, we have drafted 10 recommendations for developers and validated them by submitting them to an international panel of experts. © 2013 IEEE.},
	type = {Article},
	publication_stage = {Final},
	source = {Scopus},
	note = {Cited by: 7; All Open Access, Gold Open Access, Green Open Access}
}

@CONFERENCE{Sai2020381,
	author = {Sai, Ashish Rajendra and Holmes, Conor and Buckley, Jim and Le Gear, Andre},
	title = {Inheritance software metrics on smart contracts},
	year = {2020},
	journal = {IEEE International Conference on Program Comprehension},
	pages = {381 – 385},
	doi = {10.1145/3387904.3389284},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85091893010&doi=10.1145%2f3387904.3389284&partnerID=40&md5=521ff1747a2c5a20180b2fb8400a5ce2},
	abstract = {Blockchain systems have gained substantial traction recently, partlydue to the potential of decentralized immutable mediation of economic activities. Ethereum is a prominent example that has theprovision for executing stateful computing scripts known as SmartContracts. These smart contracts resemble traditional programs, butwith immutability being the core differentiating factor. Given theirimmutability and potential high monetary value, it becomes imperative to develop high-quality smart contracts. Software metricshave traditionally been an essential tool in determining programming quality. Given the similarity between smart contracts (writtenin Solidity for Ethereum) and object-oriented (OO) programming,OO metrics would appear applicable. In this paper, we empiricallyevaluate inheritance-based metrics as applied to smart contracts.We adopt this focus because, traditionally, inheritance has beenlinked to a more complex codebase which we posit is not the casewith Solidity based smart contracts. In this work, we evaluate thehypothesis that, due to the differences in the context of smart contracts and OO programs, it may not be appropriate to use the sameinterpretation of inheritance based metrics for assessment. © 2020 Copyright held by the owner/author(s). Publication rights licensed to ACM.},
	type = {Conference paper},
	publication_stage = {Final},
	source = {Scopus},
	note = {Cited by: 1; All Open Access, Bronze Open Access, Green Open Access}
}

@ARTICLE{Sánchez-Gómez20212059,
	author = {Sánchez-Gómez, N. and Torres-Valderrama, J. and Risoto, Manuel Mejías and Garrido, Alejandra},
	title = {Blockchain Smart Contract Meta-modeling},
	year = {2021},
	journal = {Journal of Web Engineering},
	volume = {20},
	number = {7},
	pages = {2059 – 2080},
	doi = {10.13052/jwe1540-9589.2073},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85124817510&doi=10.13052%2fjwe1540-9589.2073&partnerID=40&md5=a402f88f5e56d9267ff5f26085514414},
	abstract = {One of the key benefits of blockchain technology is its ability to keep a permanent, unalterable record of transactions. In business environments, where companies interact with each other without a centralized authority to ensure trust between them, this has led to blockchain platforms and smart contracts being proposed as a means of implementing trustworthy collaborative processes. Software engineers must deal with them to ensure the quality of smart contracts in all phases of the smart contract lifecycle, from requirements specifications to design and deployment. This broad scope and criticality of smart contracts in business environments means that they have to be expressed in a language that is intuitive, easy-to-use, independent of the blockchain platform employed, and oriented towards software quality assurance. In this paper we present a key component: a first outline of a UML-based smart contract meta-model that would allow us to achieve these objectives. This meta-model will be enriched in future work to represent blockchain environments and automated testing. © 2021 River Publishers.},
	type = {Article},
	publication_stage = {Final},
	source = {Scopus},
	note = {Cited by: 1; All Open Access, Green Open Access}
}

@ARTICLE{Falazi2020134,
	author = {Falazi, Ghareeb and Breitenbücher, Uwe and Daniel, Florian and Lamparelli, Andrea and Leymann, Frank and Yussupov, Vladimir},
	title = {Smart Contract Invocation Protocol (SCIP): A Protocol for the Uniform Integration of Heterogeneous Blockchain Smart Contracts},
	year = {2020},
	journal = {Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)},
	volume = {12127 LNCS},
	pages = {134 – 149},
	doi = {10.1007/978-3-030-49435-3_9},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85086221057&doi=10.1007%2f978-3-030-49435-3_9&partnerID=40&md5=4af296dfed395e2398b0bd1f2f7ad8dd},
	abstract = {Blockchains are distributed ledgers that enable the disintermediation of collaborative processes and, at the same time, foster trust among partners. Modern blockchains support smart contracts, i.e., software deployed on the blockchain, and guarantee their repeatable, deterministic execution. Alas, blockchains and smart contracts lack standardization. Therefore, smart contracts come with heterogeneous properties, APIs and data formats. This hinders the integration of smart contracts running in different blockchains, e.g., into enterprise business processes. This paper introduces the Smart Contract Invocation Protocol (SCIP), which unifies interacting with smart contracts of different blockchains. The protocol supports invoking smart contract functions, monitoring function executions, emitted events, and transaction finality, as well as querying a blockchain. The protocol is accompanied by a prototypical implementation of a SCIP endpoint in the form of a gateway. © Springer Nature Switzerland AG 2020.},
	type = {Conference paper},
	publication_stage = {Final},
	source = {Scopus},
	note = {Cited by: 14; All Open Access, Bronze Open Access}
}

@ARTICLE{Grech2022,
	author = {Grech, Neville and Lagouvardos, Sifis and Tsatiris, Ilias and Smaragdakis, Yannis},
	title = {Elipmoc: Advanced decompilation of Ethereum smart contracts},
	year = {2022},
	journal = {Proceedings of the ACM on Programming Languages},
	volume = {6},
	number = {OOPSLA1},
	doi = {10.1145/3527321},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85129727844&doi=10.1145%2f3527321&partnerID=40&md5=de7ba66cbba861bb8df5c2b3bbadc507},
	abstract = {Smart contracts on the Ethereum blockchain greatly benefit from cutting-edge analysis techniques and pose significant challenges. A primary challenge is the extremely low-level representation of deployed contracts. We present Elipmoc, a decompiler for the next generation of smart contract analyses. Elipmoc is an evolution of Gigahorse, the top research decompiler, dramatically improving over it and over other state-of-the-art tools, by employing several high-precision techniques and making them scalable. Among these techniques are a new kind of context sensitivity (termed "transactional sensitivity") that provides a more effective static abstraction of distinct dynamic executions; a path-sensitive (yet scalable, through path merging) algorithm for inference of function arguments and returns; and a fully context sensitive private function reconstruction process. As a result, smart contract security analyses and reverse-engineering tools built on top of Elipmoc achieve high scalability, precision and completeness. Elipmoc improves over all notable past decompilers, including its predecessor, Gigahorse, and the state-of-the-art industrial tool, Panoramix, integrated into the primary Ethereum blockchain explorer, Etherscan. Elipmoc produces decompiled contracts with fully resolved operands at a rate of 99.5% (compared to 62.8% for Gigahorse), and achieves much higher completeness in code decompilation than Panoramix - e.g., up to 67% more coverage of external call statements - while being over 5x faster. Elipmoc has been the enabler for recent (independent) discoveries of several exploitable vulnerabilities on popular protocols, over funds in the many millions of dollars.  © 2022 Owner/Author.},
	type = {Article},
	publication_stage = {Final},
	source = {Scopus},
	note = {Cited by: 1; All Open Access, Bronze Open Access}
}

@ARTICLE{Khan2021103637,
	author = {Khan, Abdullah Ayub and Uddin, Mueen and Shaikh, Aftab Ahmed and Laghari, Asif Ali and Rajput, Adil E.},
	title = {MF-Ledger: Blockchain Hyperledger Sawtooth-Enabled Novel and Secure Multimedia Chain of Custody Forensic Investigation Architecture},
	year = {2021},
	journal = {IEEE Access},
	volume = {9},
	pages = {103637 – 103650},
	doi = {10.1109/ACCESS.2021.3099037},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85111070859&doi=10.1109%2fACCESS.2021.3099037&partnerID=40&md5=8e129ed876d0b2615fe9b3fe2996e07b},
	abstract = {Due to globalization and worldwide connectivity, multimedia data exchange has increased significantly over the Internet in the last decade. The life cycle of multimedia content is also getting more multifaceted as more people are accessing, sharing, modifying and re-using multimedia information. This poses serious challenges for the multimedia industry to provide integrity, reliability and trustworthiness for multimedia investigations against the growing cybersecurity threats. This paper bridges this gap by enabling a secure and transparent digital forensic investigations process using blockchain technology. MF-Ledger a Blockchain Hyperledger sawtooth-enabled novel, secure and efficient digital forensic investigation architecture is proposed where participating stakeholders create a private network to exchange and agree on different investigation activities before being stored on the blockchain ledger. We have created digital contracts (smart contracts) and implemented them using sequence diagrams to handle the stakeholders' secure interaction in the investigation process. The proposed architectural solution delivers robust information integrity, prevention, and preservation mechanism to permanently and immutably store the evidence (chain of custody) in a private permissioned encrypted blockchain ledger. © 2013 IEEE.},
	type = {Article},
	publication_stage = {Final},
	source = {Scopus},
	note = {Cited by: 13; All Open Access, Gold Open Access}
}

@CONFERENCE{Arndt2019231,
	author = {Arndt, Timothy},
	title = {An overview of blockchain for higher education},
	year = {2019},
	journal = {IC3K 2019 - Proceedings of the 11th International Joint Conference on Knowledge Discovery, Knowledge Engineering and Knowledge Management},
	volume = {3},
	pages = {231 – 235},
	doi = {10.5220/0008343902310235},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85074147267&doi=10.5220%2f0008343902310235&partnerID=40&md5=8a87eb0dc4d0f6f62e341757a40097f9},
	abstract = {Blockchain technology is one of the most widely acclaimed technologies of recent years. It enables the creation of distributed applications involving multiple actors or organizations in which transactions and data are not under the control of a central authority. Transactions are stored in a distributed public ledger in an immutable format in such a way that they can be verified by participants. This disintermediation promises to remove much of the “friction” (and lower costs) from distributed transactions by cutting out the intermediary party, thus enabling a variety of applications in finance, government, health, etc. This paper provides an overview of recent research in the application of blockchain technology to higher education for those who are interested in working in this area or just understanding how higher education may be positively impacted in the future by blockchain. Copyright © 2019 by SCITEPRESS - Science and Technology Publications, Lda. All rights reserved},
	type = {Conference paper},
	publication_stage = {Final},
	source = {Scopus},
	note = {Cited by: 1; All Open Access, Hybrid Gold Open Access}
}

@ARTICLE{Li20224423,
	author = {Li, Dun and Han, Dezhi and Weng, Tien-Hsiung and Zheng, Zibin and Li, Hongzhi and Liu, Han and Castiglione, Arcangelo and Li, Kuan-Ching},
	title = {Blockchain for federated learning toward secure distributed machine learning systems: a systemic survey},
	year = {2022},
	journal = {Soft Computing},
	volume = {26},
	number = {9},
	pages = {4423 – 4440},
	doi = {10.1007/s00500-021-06496-5},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85119379215&doi=10.1007%2fs00500-021-06496-5&partnerID=40&md5=89d3995448ec84687dfeab104a1a06e5},
	abstract = {Federated learning (FL) is a promising decentralized deep learning technology, which allows users to update models cooperatively without sharing their data. FL is reshaping existing industry paradigms for mathematical modeling and analysis, enabling an increasing number of industries to build privacy-preserving, secure distributed machine learning models. However, the inherent characteristics of FL have led to problems such as privacy protection, communication cost, systems heterogeneity, and unreliability model upload in actual operation. Interestingly, the integration with Blockchain technology provides an opportunity to further improve the FL security and performance, besides increasing its scope of applications. Therefore, we denote this integration of Blockchain and FL as the Blockchain-based federated learning (BCFL) framework. This paper introduces an in-depth survey of BCFL and discusses the insights of such a new paradigm. In particular, we first briefly introduce the FL technology and discuss the challenges faced by such technology. Then, we summarize the Blockchain ecosystem. Next, we highlight the structural design and platform of BCFL. Furthermore, we present the attempts ins improving FL performance with Blockchain and several combined applications of incentive mechanisms in FL. Finally, we summarize the industrial application scenarios of BCFL. © 2021, The Author(s), under exclusive licence to Springer-Verlag GmbH Germany, part of Springer Nature.},
	type = {Article},
	publication_stage = {Final},
	source = {Scopus},
	note = {Cited by: 26; All Open Access, Bronze Open Access, Green Open Access}
}

@ARTICLE{Di Sorbo2022,
	author = {Di Sorbo, Andrea and Laudanna, Sonia and Vacca, Anna and Visaggio, Corrado A. and Canfora, Gerardo},
	title = {Profiling gas consumption in solidity smart contracts},
	year = {2022},
	journal = {Journal of Systems and Software},
	volume = {186},
	doi = {10.1016/j.jss.2021.111193},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85122027163&doi=10.1016%2fj.jss.2021.111193&partnerID=40&md5=155d6be04753e5f79bdb607ced227bfc},
	abstract = {Nowadays, more and more applications are developed for running on a distributed ledger technology, namely dApps. The business logic of dApps is usually implemented within smart contracts developed through Solidity, a programming language for writing smart contracts on different blockchain platforms, including the popular Ethereum. In Ethereum, the smart contracts run on the machines of miners and the gas corresponds to the execution fee compensating such computing resources. However, the deployment and execution costs of a smart contract depend on the implementation choices done by developers. Unappropriated design choices could lead to higher gas consumption than necessary. In this paper, we (i) identify a set of 19 Solidity code smells affecting the deployment and transaction costs of a smart contract, and (ii) assess the relevance of such smells through a survey involving 34 participants. On top of these smells, we propose GasMet, a suite of metrics for statically evaluating the code quality of a smart contract from the gas consumption perspective. An experiment involving 2186 smart contracts demonstrates that the proposed metrics have direct associations with deployment costs. The metrics in our suite can be used for more easily identifying source code segments that need optimizations. © 2021 Elsevier Inc.},
	type = {Article},
	publication_stage = {Final},
	source = {Scopus},
	note = {Cited by: 3; All Open Access, Green Open Access}
}

@CONFERENCE{Eshghie2021305,
	author = {Eshghie, Mojtaba and Artho, Cyrille and Gurov, Dilian},
	title = {Dynamic vulnerability detection on smart contracts using machine learning},
	year = {2021},
	journal = {ACM International Conference Proceeding Series},
	pages = {305 – 312},
	doi = {10.1145/3463274.3463348},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85108912066&doi=10.1145%2f3463274.3463348&partnerID=40&md5=1f585bd201126a34e9d0195f05e8fb68},
	abstract = {In this work we propose Dynamit, a monitoring framework to detect reentrancy vulnerabilities in Ethereum smart contracts. The novelty of our framework is that it relies only on transaction metadata and balance data from the blockchain system; our approach requires no domain knowledge, code instrumentation, or special execution environment. Dynamit extracts features from transaction data and uses a machine learning model to classify transactions as benign or harmful. Therefore, not only can we find the contracts that are vulnerable to reentrancy attacks, but we also get an execution trace that reproduces the attack. Using a random forest classifier, our model achieved more than 90 percent accuracy on 105 transactions, showing the potential of our technique.  © 2021 ACM.},
	type = {Conference paper},
	publication_stage = {Final},
	source = {Scopus},
	note = {Cited by: 3; All Open Access, Green Open Access}
}

@ARTICLE{Crosara2022,
	author = {Crosara, Marco and Olivieri, Luca and Spoto, Fausto and Tagliaferro, Fabio},
	title = {Fungible and non-fungible tokens with snapshots in Java},
	year = {2022},
	journal = {Cluster Computing},
	doi = {10.1007/s10586-022-03756-3},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85139553605&doi=10.1007%2fs10586-022-03756-3&partnerID=40&md5=068e9f3b0e4f0e3d6cc85339b7189d87},
	abstract = {Many blockchain applications exchange tokens, such as bitcoin and ether, or implement them through smart contracts. A trend in blockchain is to apply standards for token interoperability, unchanged, from platform to platform, easing the design challenges with trusted and widely-used specifications. However, the exploitation of the target language semantics can result in technological advantages and more efficient contracts. This paper presents a re-engineering of OpenZeppelin’s implementation of the ERC-20 and ERC-721 standards in Takamaka, a Java framework for programming smart contracts. It describes a sound solution to the issue about the types allowed for the token holders and a novel implementation for making snapshots of tokens, based on tree maps, that is possible in Java, but not in Solidity, more efficient than the literal translation in Java from Solidity, within the Java virtual machine. Moreover, it applies to ERC-721 as well, where a snapshot mechanism was previously missing. The same snapshot mechanism can also be applied beyond the smart contracts for tokens. © 2022, The Author(s).},
	type = {Article},
	publication_stage = {Article in press},
	source = {Scopus},
	note = {Cited by: 0; All Open Access, Hybrid Gold Open Access}
}

@CONFERENCE{Marchesi202141,
	author = {Marchesi, Lodovica and Mannaro, Katiuscia and Porcu, Raffaele},
	title = {Automatic Generation of Blockchain Agri-food Traceability Systems},
	year = {2021},
	journal = {Proceedings - 2021 IEEE/ACM 4th International Workshop on Emerging Trends in Software Engineering for Blockchain, WETSEB 2021},
	pages = {41 – 48},
	doi = {10.1109/WETSEB52558.2021.00013},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85112864281&doi=10.1109%2fWETSEB52558.2021.00013&partnerID=40&md5=5634596f8dc242c4c1dfd0cd592cddbc},
	abstract = {Supply chain management, product provenance and quality certification are among the first and most popular applications of blockchain technology, due to the inherent trust and inalterability provided by the blockchain technology. However, the proposed supply chain management systems based on blockchain and smart contract technology tend to be specific to the particular production and production process. In this paper we present a general-purpose approach for the agrifood supply chain management, proposing a system that can be configured for most agri-food productions. The primary purpose is to provide a methodology to facilitate and make more efficient the development of such applications. It is based on general smart contracts and apps interacting with the same smart contracts, which are configured, starting from the description of the specific system to be managed, given using json files. A case study on olive oil production is described, to show how our approach works.  © 2021 IEEE.},
	type = {Conference paper},
	publication_stage = {Final},
	source = {Scopus},
	note = {Cited by: 3; All Open Access, Green Open Access}
}

@ARTICLE{De Villiers202065670,
	author = {De Villiers, Almero and Cuffe, Paul},
	title = {A Three-Tier Framework for Understanding Disruption Trajectories for Blockchain in the Electricity Industry},
	year = {2020},
	journal = {IEEE Access},
	volume = {8},
	pages = {65670 – 65682},
	doi = {10.1109/ACCESS.2020.2983558},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85083721501&doi=10.1109%2fACCESS.2020.2983558&partnerID=40&md5=4b78ad3cdb42195cc0857179effd8f73},
	abstract = {Ever since the invention of Bitcoin by the pseudonymous Satashi Nakamoto, cryptocurrency has provoked debate in banking and finance sectors, and is sometimes considered a potential successor to fiat currency. Blockchain, the new technology underpinning decentralised and immutable databases, has seen much discussion as a potentially game-changing development. Although many industries are exploring its value, the technology has thus far made only minor impacts. A rapidly expanding base of research has emerged on blockchain's role as a potential disruptor in the electrical energy industry. However, it may be difficult to distinguish hype from more imminently plausible impacts. This paper attempts to serve as a guide for engineering managers wishing to make sense of blockchain's potential in electricity. This is accomplished by formulating a novel blockchain industry disruption framework, which exists across three tiers. These tiers extend from ideas with the least effect on an industry to total revolutionary concepts that could completely transform an industry. This taxonomy is constructed by examining existing research into disruption hierarchies and blockchain classification methods. Through the lens of this taxonomy, a literature review is performed on blockchain's role in energy to draw out themes and ideas characterising each tier. The potential likelihood of real-world application of various ideas are discussed, considering how established industries may be affected or disrupted. The authors provide some conjecture here. Finally, courses of action are suggested for those whose sector may be affected by blockchain. © 2013 IEEE.},
	type = {Article},
	publication_stage = {Final},
	source = {Scopus},
	note = {Cited by: 17; All Open Access, Gold Open Access, Green Open Access}
}

@ARTICLE{Menges2021741,
	author = {Menges, Florian and Putz, Benedikt and Pernul, Günther},
	title = {DEALER: decentralized incentives for threat intelligence reporting and exchange},
	year = {2021},
	journal = {International Journal of Information Security},
	volume = {20},
	number = {5},
	pages = {741 – 761},
	doi = {10.1007/s10207-020-00528-1},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85097403300&doi=10.1007%2fs10207-020-00528-1&partnerID=40&md5=f6c5c8350e603aa915b3ca548198afad},
	abstract = {The exchange of threat intelligence information can make a significant contribution to improving IT security in companies and has become increasingly important in recent years. However, such an exchange also entails costs and risks, preventing many companies from participating. In addition, since legal reporting requirements were introduced in various countries, certain requirements must be taken into account in the exchange process. However, existing exchange platforms neither offer incentives to participate in the exchange process, nor fulfill requirements resulting from reporting obligations. With this work, we present a decentralized platform for the exchange of threat intelligence information. The platform supports the fulfillment of legal reporting obligations for security incidents and provides additional incentives for information exchange between the parties involved. We evaluate the platform by implementing it based on the EOS blockchain and IPFS distributed hash table. The prototype and cost measurements demonstrate the feasibility and cost-efficiency of our concept. © 2020, The Author(s).},
	type = {Article},
	publication_stage = {Final},
	source = {Scopus},
	note = {Cited by: 7; All Open Access, Green Open Access, Hybrid Gold Open Access}
}

@CONFERENCE{De Brito Goncalves2020541,
	author = {De Brito Goncalves, Joao Paulo and Gomes, Roberta Lima and Da Silva Villaca, Rodolfo and Municio, Esteban and Marquez-Barja, Johann},
	title = {A Service Level Agreement Verification System using Blockchains},
	year = {2020},
	journal = {Proceedings of the IEEE International Conference on Software Engineering and Service Sciences, ICSESS},
	volume = {2020-October},
	pages = {541 – 544},
	doi = {10.1109/ICSESS49938.2020.9237735},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85096178534&doi=10.1109%2fICSESS49938.2020.9237735&partnerID=40&md5=89b3397f581f9bc342aea5f7f948b989},
	abstract = {Service Level Agreements (SLAs) are used to establish a contract, an agreement between two parties, which can be between two operators, or between a customer and an operator. The SLAs methods are a key aspect between consumers and providers, which can continuously monitor the Quality of Service (QoS) attributes and enforce its reliability, but the SLA also needs an entity to manage it. Smarts contracts are programs that are executed in a blockchain and ensure integrity and reliability to data stored in the distributed structure. This work proposes a solution using smarts contracts and blockchains in order to simplify the process of SLA validation.  © 2020 IEEE.},
	type = {Conference paper},
	publication_stage = {Final},
	source = {Scopus},
	note = {Cited by: 3; All Open Access, Green Open Access}
}

@ARTICLE{Alzhrani2022110568,
	author = {Alzhrani, Fouzia E. and Saeedi, Kawther A. and Zhao, Liping},
	title = {A Taxonomy for Characterizing Blockchain Systems},
	year = {2022},
	journal = {IEEE Access},
	volume = {10},
	pages = {110568 – 110589},
	doi = {10.1109/ACCESS.2022.3214837},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85140726461&doi=10.1109%2fACCESS.2022.3214837&partnerID=40&md5=f7fbf1baf2ef727ec6ffd8b48d3fde06},
	abstract = {Since its inception more than a decade ago, blockchain technology has been quickly adopted by a large number of sectors, including finance, healthcare, energy supply, and logistics, due to its numerous benefits, such as decentralization, persistency, anonymity and auditability. However, blockchain applications are intrinsically complex, as they are heterogeneous in nature and require cooperation and interoperation with non-blockchain systems. The complexity of the blockchain systems is further exacerbated by the lack of a clear understanding of their composition. This paper aims to bridge this knowledge gap by proposing a taxonomy for characterizing blockchain systems. The proposed taxonomy classifies a blockchain system into a hierarchy of components: At the top level, the system is organized into an external subsystem, an internal subsystem and an execution environment subsystem. These subsystems are then decomposed into eight fundamental components: Platform, Network, Distributed Ledger, Smart Contract, Consensus Protocol, Digital Wallet, Token, and Node. Each component is further divided into different aspects and each aspect is characterized by various features. This taxonomy thus provides a comprehensive understanding of the composition of a blockchain system, which can better inform software developers in their design and implementation of blockchain systems. The paper presents and illustrates the proposed taxonomy through some application scenarios and a case study.  © 2013 IEEE.},
	type = {Article},
	publication_stage = {Final},
	source = {Scopus},
	note = {Cited by: 0; All Open Access, Gold Open Access}
}

@ARTICLE{Farooq202110426,
	author = {Farooq, Usama and Ahmed, Mansoor and Hussain, Shahid and Hussain, Faraz and Naseem, Alia and Aslam, Khurram},
	title = {Blockchain-Based Software Process Improvement (BBSPI): An approach for SMEs to perform process improvement},
	year = {2021},
	journal = {IEEE Access},
	volume = {9},
	pages = {10426 – 10442},
	doi = {10.1109/ACCESS.2021.3049904},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85099545111&doi=10.1109%2fACCESS.2021.3049904&partnerID=40&md5=14c3a9d999e1e3b3937e514a0ab9983d},
	abstract = {Progressively, Software development organizations are investing their resources, time and, money on Software Process Improvement (SPI) since it is beneficial in the enhancement of product quality, reduction in development time, and cost of software projects. However, the existing methodologies and approaches are time-consuming and costly and their major focus is on the SPI of Large Scale Enterprises (LSEs) therefore, we are introducing blockchain in SPI to overcome its major issues such as reliance on a central body of standardization for certification, knowledge management, high cost, resource management and change in organizational culture, etc. We have performed an exploratory case study to identify the different barriers of traditional SPI approaches. To overcome the identified issues, we have proposed and implemented a new approach by performing two case studies. The first case study was performed to identify the barriers in traditional SPI approaches and the second case study was performed to validate our proposed approach. We have performed our experiments on 55 representatives of 50 organizations. According to the results of proposed approach 56.4% of the population agreed that the SPI cost will decrease, 61.8% agreed that time of SPI will decrease and 60.3% of the population agreed that BBSPI will decrease resource utilization. Moreover, 69.1% of the population agreed with the fact that proposed BBSPI will make effective knowledge management and 83.3% of the population said that an organization can mature its processes equaliant to the central certification (CMMI, ISO) body by employing proposed BBSPI. Our results affirm that the BBSPI can reduce the time, cost, resources and helps to manage knowledge used to perform SPI. Moreover, results also depict that the BBSPI can be an efficient substitute of central bodies that could help small and medium-sized organizations to conform to common process improvement models by spending less money, time, and resources with effective knowledge management. © 2013 IEEE.},
	type = {Article},
	publication_stage = {Final},
	source = {Scopus},
	note = {Cited by: 5; All Open Access, Gold Open Access}
}

@ARTICLE{Volpe202279141,
	author = {Volpe, Gaetano and Mangini, Agostino Marcello and Fanti, Maria Pia},
	title = {An Architecture Combining Blockchain, Docker and Cloud Storage for Improving Digital Processes in Cloud Manufacturing},
	year = {2022},
	journal = {IEEE Access},
	volume = {10},
	pages = {79141 – 79151},
	doi = {10.1109/ACCESS.2022.3194264},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85135757542&doi=10.1109%2fACCESS.2022.3194264&partnerID=40&md5=dcd722dace3fcf1ef957f75d4595f2e0},
	abstract = {The Blockchain has been given great attention in recent literature among emerging technologies in software architectures. More specifically, when verifiable transactions between untrusted parties are concerned in a safe and reliable environment, its peculiar decentralized and tamper-proof structure makes it suitable for a vast class of business domains, such as Cloud Manufacturing, which is a new paradigm in the industry based on cloud technologies. However, the stiffness of existing solutions, that are unable to provide and implement heterogeneous services in a Cloud environment, emphasizes the need of a standard framework to overcome this limit and improve collaboration. Firstly, this paper introduces a Blockchain based platform designed with Smart Contracts for improving digital processes in a manufacturing environment. The primary contribution is the integration of two popular cloud technologies within the Blockchain: Docker, a scalable platform to run applications in lightweight environments, and Cloud Storage. Each process available in the platform requires input files and produces output files by using cloud storage as a repository and it is delivered by the owner as a self-contained Docker image, whose digest is safely stored in the chain. Secondly, with the purpose of selecting the fastest node for each new process instance required by consumers, we introduce a task assignment problem based on a deep learning approach and past metrics. The proposed platform is applied to a real-world industrial case study regarding ophthalmic lenses manufacturing and the optimization of lens surface calculation.  © 2022 IEEE.},
	type = {Article},
	publication_stage = {Final},
	source = {Scopus},
	note = {Cited by: 0; All Open Access, Gold Open Access}
}

@CONFERENCE{Chen20201382,
	author = {Chen, Jiachi},
	title = {Finding Ethereum Smart Contracts Security Issues by Comparing History Versions},
	year = {2020},
	journal = {Proceedings - 2020 35th IEEE/ACM International Conference on Automated Software Engineering, ASE 2020},
	pages = {1382 – 1384},
	doi = {10.1145/3324884.3418923},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85099200906&doi=10.1145%2f3324884.3418923&partnerID=40&md5=c61645a2f61c7474a016d301db246e4f},
	abstract = {Smart contracts are Turing-complete programs running on the blockchain. They cannot be modified, even when bugs are detected. The Selfdestruct function is the only way to destroy a contract on the blockchain system and transfer all the Ethers on the contract balance. Thus, many developers use this function to destroy a contract and redeploy a new one when bugs are detected. In this paper, we propose a deep learning-based method to find security issues of Ethereum smart contracts by finding the updated version of a destructed contract. After finding the updated versions, we use open card sorting to find security issues. © 2020 ACM.},
	type = {Conference paper},
	publication_stage = {Final},
	source = {Scopus},
	note = {Cited by: 5; All Open Access, Green Open Access}
}

@CONFERENCE{Celik2021,
	author = {Celik, Yasin and Petri, Ioan and Rezgui, Yacine},
	title = {Leveraging BIM and blockchain for digital twins},
	year = {2021},
	journal = {2021 IEEE International Conference on Engineering, Technology and Innovation, ICE/ITMC 2021 - Proceedings},
	doi = {10.1109/ICE/ITMC52061.2021.9570246},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85119075003&doi=10.1109%2fICE%2fITMC52061.2021.9570246&partnerID=40&md5=739d3d0a27a05a7386ce937a8773260c},
	abstract = {The digitalization of the construction industry has been supported recently with various building information modelling (BIM) methods applied to lifecycle stages. This has enabled the transition towards an improved management of information required in the development of different construction project tasks. In a digital construction context, traceability of models and collaboration across disciplines is required especially when dealing with sensitive data and critical infrastructures. Blockchain technology has the potential to advance the automation of processes in the construction industry by offering a higher level of data traceability, incentivising participation, and ensuring transparency with projects. This paper presents how BIM and Blockchain can be utilised to facilitate the establishment and implementation of Digital Twins for construction projects. A highway construction case study is used for demonstrating the implementation of smart contracts for managing tasks and processes across different disciplines involved in a construction project. © 2021 IEEE.},
	type = {Conference paper},
	publication_stage = {Final},
	source = {Scopus},
	note = {Cited by: 6; All Open Access, Green Open Access}
}

@ARTICLE{Pierro20201,
	author = {Pierro, Giuseppe Antonio and Tonelli, Roberto and Marchesi, Michele},
	title = {An organized repository of ethereum smart contracts’ source codes and metrics},
	year = {2020},
	journal = {Future Internet},
	volume = {12},
	number = {11},
	pages = {1 – 15},
	doi = {10.3390/fi12110197},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85096036922&doi=10.3390%2ffi12110197&partnerID=40&md5=7de8b1e1c8bdbdab8f767f02f5c62283},
	abstract = {Many empirical software engineering studies show that there is a need for repositories where source codes are acquired, filtered and classified. During the last few years, Ethereum block explorer services have emerged as a popular project to explore and search for Ethereum blockchain data such as transactions, addresses, tokens, smart contracts’ source codes, prices and other activities taking place on the Ethereum blockchain. Despite the availability of this kind of service, retrieving specific information useful to empirical software engineering studies, such as the study of smart contracts’ software metrics, might require many subtasks, such as searching for specific transactions in a block, parsing files in HTML format, and filtering the smart contracts to remove duplicated code or unused smart contracts. In this paper, we afford this problem by creating Smart Corpus, a corpus of smart contracts in an organized, reasoned and up-to-date repository where Solidity source code and other metadata about Ethereum smart contracts can easily and systematically be retrieved. We present Smart Corpus’s design and its initial implementation, and we show how the data set of smart contracts’ source codes in a variety of programming languages can be queried and processed to get useful information on smart contracts and their software metrics. Smart Corpus aims to create a smart-contract repository where smart-contract data (source code, application binary interface (ABI) and byte code) are freely and immediately available and are classified based on the main software metrics identified in the scientific literature. Smart contracts’ source codes have been validated by EtherScan, and each contract comes with its own associated software metrics as computed by the freely available software PASO. Moreover, Smart Corpus can be easily extended as the number of new smart contracts increases day by day. © 2020 by the authors. Licensee MDPI, Basel, Switzerland.},
	type = {Article},
	publication_stage = {Final},
	source = {Scopus},
	note = {Cited by: 21; All Open Access, Gold Open Access, Green Open Access}
}

@ARTICLE{Gec2019219,
	author = {Gec, Sandi and Lavbič, Dejan and Bajec, Marko and Stankovski, Vlado},
	title = {Smart contracts for container based video conferencing services: Architecture and implementation},
	year = {2019},
	journal = {Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)},
	volume = {11113 LNCS},
	pages = {219 – 233},
	doi = {10.1007/978-3-030-13342-9_19},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85063055727&doi=10.1007%2f978-3-030-13342-9_19&partnerID=40&md5=b2b202deb5895e950c7ba6003f6401ed},
	abstract = {Today, container-based virtualization is very popular due to the lightweight nature of containers and the ability to use them flexibly in various heterogeneously composed systems. This makes it possible to collaboratively develop services by sharing various types of resources, such as infrastructures, software and digitalized content. In this work, our home made video-conferencing (VC) system is used to study resource usage optimisation in business context. An application like this, does not provide monetization possibilities to all involved stakeholders including end users, cloud providers, software engineers and similar. Blockchain related technologies, such as Smart Contracts (SC) offer a possibility to address some of these needs. We introduce a novel architecture for monetization of added-value according to preferences of the stakeholders that participate in joint software service offers. The developed architecture facilitates use case scenarios of service and resource offers according to fixed and dynamic pricing schemes, fixed usage period, prepaid quota for flexible usage, division of income, consensual decisions among collaborative service providers, and constrained based usage of resources or services. Our container-based VC service, which is based on the Jitsi Meet Open Source software is used to demonstrate the proposed architecture and the benefits of the investigated use cases. © 2019, Springer Nature Switzerland AG.},
	type = {Conference paper},
	publication_stage = {Final},
	source = {Scopus},
	note = {Cited by: 2; All Open Access, Green Open Access}
}

@ARTICLE{Khan2022,
	author = {Khan, Zulfiqar Ali and Namin, Akbar Siami},
	title = {A Survey of DDOS Attack Detection Techniques for IoT Systems Using BlockChain Technology},
	year = {2022},
	journal = {Electronics (Switzerland)},
	volume = {11},
	number = {23},
	doi = {10.3390/electronics11233892},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85143640061&doi=10.3390%2felectronics11233892&partnerID=40&md5=3e23249c17079d891db5b9754a34071f},
	abstract = {The Internet of Things (IoT) is a network of sensors that helps collect data 24/7 withouthuman intervention. However, the network may suffer from problems such as the low battery,heterogeneity, and connectivity issues due to the lack of standards. Even though these problemscan cause several performance hiccups, security issues need immediate attention because hackersaccess vital personal and financial information and then misuse it. These security issues can allowhackers to hijack IoT devices and then use them to establish a Botnet to launch a Distributed Denial ofService (DDoS) attack. Blockchain technology can provide security to IoT devices by providing secureauthentication using public keys. Similarly, Smart Contracts (SCs) can improve the performance of theIoT–blockchain network through automation. However, surveyed work shows that the blockchainand SCs do not provide foolproof security; sometimes, attackers defeat these security mechanisms andinitiate DDoS attacks. Thus, developers and security software engineers must be aware of differenttechniques to detect DDoS attacks. In this survey paper, we highlight different techniques to detectDDoS attacks. The novelty of our work is to classify the DDoS detection techniques according toblockchain technology. As a result, researchers can enhance their systems by using blockchain-basedsupport for detecting threats. In addition, we provide general information about the studied systemsand their workings. However, we cannot neglect the recent surveys. To that end, we compare thestate-of-the-art DDoS surveys based on their data collection techniques and the discussed DDoSattacks on the IoT subsystems. The study of different IoT subsystems tells us that DDoS attacks alsoimpact other computing systems, such as SCs, networking devices, and power grids. Hence, ourwork briefly describes DDoS attacks and their impacts on the above subsystems and IoT. For instance,due to DDoS attacks, the targeted computing systems suffer delays which cause tremendous financialand utility losses to the subscribers. Hence, we discuss the impacts of DDoS attacks in the contextof associated systems. Finally, we discuss Machine-Learning algorithms, performance metrics, andthe underlying technology of IoT systems so that the readers can grasp the detection techniquesand the attack vectors. Moreover, associated systems such as Software-Defined Networking (SDN)and Field-Programmable Gate Arrays (FPGA) are a source of good security enhancement for IoTNetworks. Thus, we include a detailed discussion of future development encompassing all major IoTsubsystems. © 2022 by the authors.},
	type = {Article},
	publication_stage = {Final},
	source = {Scopus},
	note = {Cited by: 0; All Open Access, Gold Open Access}
}

@ARTICLE{Razzaq20224495,
	author = {Razzaq, Abdul},
	title = {Blockchain-based secure data transmission for internet of underwater things},
	year = {2022},
	journal = {Cluster Computing},
	volume = {25},
	number = {6},
	pages = {4495 – 4514},
	doi = {10.1007/s10586-022-03701-4},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85135756649&doi=10.1007%2fs10586-022-03701-4&partnerID=40&md5=5e43de0a9921a77751d544df86be9e85},
	abstract = {Internet of Things (IoTs) is an integrated network collection of heterogeneous objects which enable seamless integration between systems, humans, devices, and various other things, to support pervasive computing for smart systems. IoT-driven systems and sensors continuously ingest data resulting in an increased volume and velocity of information which can lead to critical concerns such as security of the data and scalability of the system. The Internet of Underwater Things (IoUTs) is a specific genre of IoTs in which data related to oceanic ecosystems is continuously sensed through underwater sensors. IoUT has emerged as an innovative paradigm to support smart oceans. However, there are several critical challenges which IoUT system designers must consider such as (1) scalability of the system to handle large volumes of oceanic data and (2) security of data that is transmitted from IoT sensors deployed underwater. Blockchain as a newly emerged technology and an enabling platform allows decentralized and secure transmission of data among a wide group of untrustworthy parties. This research aims to exploit blockchain technology to secure IoUT data transmission by exploiting Interplanetary File System (IPFS) method. Additionally, this study also addresses the system’s scalability in two aspects, (1) scalability, and (2) security. We used a case study-based approach and performed experiments to evaluate the proposed solution’s usability and efficiency in terms of query response (i.e., performance), and algorithmic execution (i.e., efficiency). The proposed solution unifies blockchain technologies to secure IoT-driven systems and provides guidelines to engineer and develop next-generation of robust and secure blockchain-aided distributed IoT systems. © 2022, The Author(s), under exclusive licence to Springer Science+Business Media, LLC, part of Springer Nature.},
	type = {Article},
	publication_stage = {Final},
	source = {Scopus},
	note = {Cited by: 5; All Open Access, Green Open Access}
}

@ARTICLE{Boubeta-Puig2021,
	author = {Boubeta-Puig, Juan and Rosa-Bilbao, Jesús and Mendling, Jan},
	title = {CEPchain: A graphical model-driven solution for integrating complex event processing and blockchain},
	year = {2021},
	journal = {Expert Systems with Applications},
	volume = {184},
	doi = {10.1016/j.eswa.2021.115578},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85110486090&doi=10.1016%2fj.eswa.2021.115578&partnerID=40&md5=3087202a75be547dff6e39b81bbe7eb2},
	abstract = {Blockchain provides an immutable distributed ledger for storing transactions. One of the challenges of blockchain is the particular processing of dynamic queries due to accumulating costs. Complex Event Processing (CEP) provides efficient and effective support for this in a way, however, that is difficult to integrate with blockchain. This paper addresses the research challenges of integrating blockchain with CEP. More specifically, we envision an effective development environment in which (i) event-driven smart contracts are modeled in a graphical way, which are, in turn, (ii) automatically transformed into complementary code that is deployed in both a CEP engine and a blockchain network, and then (iii) executed on off-chain CEP applications which, connected to different data sources and sinks, automatically invoke smart contracts when event pattern conditions are met. We follow a classic systems engineering approach for defining the concepts of our system, called CEPchain, which addresses the described requirements. CEPchain was evaluated using a real-world case study for vaccine delivery, which requires an unbroken cold chain. The results demonstrate that our approach can be applied without requiring experts on event processing and smart contract languages. Our contribution simplifies the design of integrated CEP and blockchain functionality by hiding implementation details and supporting efficient deployment. © 2021 The Authors},
	type = {Article},
	publication_stage = {Final},
	source = {Scopus},
	note = {Cited by: 8; All Open Access, Hybrid Gold Open Access}
}

@CONFERENCE{Mariano2020262,
	author = {Mariano, Benjamin and Chen, Yanju and Feng, Yu and Lahiri, Shuvendu K. and Dillig, Isil},
	title = {Demystifying Loops in Smart Contracts},
	year = {2020},
	journal = {Proceedings - 2020 35th IEEE/ACM International Conference on Automated Software Engineering, ASE 2020},
	pages = {262 – 274},
	doi = {10.1145/3324884.3416626},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85099244937&doi=10.1145%2f3324884.3416626&partnerID=40&md5=aefb6323e4890891e88da925f7445d99},
	abstract = {This paper aims to shed light on how loops are used in smart contracts. Towards this goal, we study various syntactic and semantic characteristics of loops used in over 20,000 Solidity contracts deployed on the Ethereum blockchain, with the goal of informing future research on program analysis for smart contracts. Based on our findings, we propose a small domain-specific language (DSL) that can be used to summarize common looping patterns in Solidity. To evaluate what percentage of smart contract loops can be expressed in our proposed DSL, we also design and implement a program synthesis toolchain called Solis that can synthesize loop summaries in our DSL. Our evaluation shows that at least 56% of the analyzed loops can be summarized in our DSL, and 81% of these summaries are exactly equivalent to the original loop. © 2020 ACM.},
	type = {Conference paper},
	publication_stage = {Final},
	source = {Scopus},
	note = {Cited by: 7; All Open Access, Bronze Open Access}
}

@CONFERENCE{Ding2021321,
	author = {Ding, Mengjie and Li, Peiru and Li, Shanshan and Zhang, He},
	title = {HFContractFuzzer: Fuzzing hyperledger fabric smart contracts for vulnerability detection},
	year = {2021},
	journal = {ACM International Conference Proceeding Series},
	pages = {321 – 328},
	doi = {10.1145/3463274.3463351},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85108905194&doi=10.1145%2f3463274.3463351&partnerID=40&md5=e83e5a55265453c98a9489e6dbb40a4d},
	abstract = {With its unique advantages such as decentralization and immutability, blockchain technology has been widely used in various fields in recent years. The smart contract running on the blockchain is also playing an increasingly important role in decentralized application scenarios. Therefore, the automatic detection of security vulnerabilities in smart contracts has become an urgent problem in the application of blockchain technology. Hyperledger Fabric is a smart contract platform based on enterprise-level licensed distributed ledger technology. However, the research on the vulnerability detection technology of Hyperledger Fabric smart contracts is still in its infancy. In this paper, we propose HFContractFuzzer, a method based on Fuzzing technology to detect Hyperledger Fabric smart contracts, which combines a Fuzzing tool for golang named go-fuzz and smart contracts written by golang. We use HFContractFuzzer to detect vulnerabilities in five contracts from typical sources and discover that four of them have security vulnerabilities, proving the effectiveness of the proposed method.  © 2021 ACM.},
	type = {Conference paper},
	publication_stage = {Final},
	source = {Scopus},
	note = {Cited by: 6; All Open Access, Green Open Access}
}

@CONFERENCE{Qasse202135,
	author = {Qasse, Ilham and Mishra, Shailesh and Hamdaqa, Mohammad},
	title = {IContractBot: A Chatbot for Smart Contracts' Specification and Code Generation},
	year = {2021},
	journal = {Proceedings - 2021 IEEE/ACM 3rd International Workshop on Bots in Software Engineering, BotSE 2021},
	pages = {35 – 38},
	doi = {10.1109/BotSE52550.2021.00015},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85112865562&doi=10.1109%2fBotSE52550.2021.00015&partnerID=40&md5=78981d50db4448e61b3e1dd933a67cf5},
	abstract = {Recently, Blockchain technology adoption has expanded to many application areas due to the evolution of smart contracts. However, developing smart contracts is non-trivial and challenging due to the lack of tools and expertise in this field. A promising solution to overcome this issue is to use Model-Driven Engineering (MDE), however, using models still involves a learning curve and might not be suitable for non-technical users. To tackle this challenge, chatbot or conversational interfaces can be used to assess the non-technical users to specify a smart contract in gradual and interactive manner. In this paper, we propose iContractBot, a chatbot for modeling and developing smart contracts. Moreover, we investigate how to integrate iContractBot with iContractML, a domainspecific modeling language for developing smart contracts, and instantiate intention models from the chatbot. The iContractBot framework provides a domain-specific language (DSL) based on the user intention and performs model-to-text transformation to generate the smart contract code. A smart contract use case is presented to demonstrate how iContractBot can be utilized for creating models and generating the deployment artifacts for smart contracts based on a simple conversation.  © 2021 IEEE.},
	type = {Conference paper},
	publication_stage = {Final},
	source = {Scopus},
	note = {Cited by: 3; All Open Access, Green Open Access}
}

@ARTICLE{Zecchini2020228,
	author = {Zecchini, Marco and Bracciali, Andrea and Chatzigiannakis, Ioannis and Vitaletti, Andrea},
	title = {On Refining Design Patterns for Smart Contracts},
	year = {2020},
	journal = {Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)},
	volume = {11997 LNCS},
	pages = {228 – 239},
	doi = {10.1007/978-3-030-48340-1_18},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85086251716&doi=10.1007%2f978-3-030-48340-1_18&partnerID=40&md5=2e6b26d8429d9acc9ce6482cb1e9a3fe},
	abstract = {The need for a Blockchain Oriented Software Engineering (BOSE) has been recognized in several research papers. Design Patterns are considered among the main and compelling areas to be developed in BOSE. Anyway, design patterns need to be enhanced with some additional fields to better support the specific needs of Blockchain development. In this paper, we discuss the use of Solidity design patterns applied to a water management use case and we introduce specific fields in their description, aiming at offering to Blockchain developers more support in the critical decisions to build efficient decentralized applications. © 2020, Springer Nature Switzerland AG.},
	type = {Conference paper},
	publication_stage = {Final},
	source = {Scopus},
	note = {Cited by: 1; All Open Access, Green Open Access}
}

@CONFERENCE{Wüstholz20201398,
	author = {Wüstholz, Valentin and Christakis, Maria},
	title = {Harvey: A greybox fuzzer for smart contracts},
	year = {2020},
	journal = {ESEC/FSE 2020 - Proceedings of the 28th ACM Joint Meeting European Software Engineering Conference and Symposium on the Foundations of Software Engineering},
	pages = {1398 – 1409},
	doi = {10.1145/3368089.3417064},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85097168930&doi=10.1145%2f3368089.3417064&partnerID=40&md5=e21b219b17d9867c7969050d428a6c55},
	abstract = {We present Harvey, an industrial greybox fuzzer for smart contracts, which are programs managing accounts on a blockchain. Greybox fuzzing is a lightweight test-generation approach that effectively detects bugs and security vulnerabilities. However, greybox fuzzers randomly mutate program inputs to exercise new paths; this makes it challenging to cover code that is guarded by narrow checks. Moreover, most real-world smart contracts transition through many different states during their lifetime, e.g., for every bid in an auction. To explore these states and thereby detect deep vulnerabilities, a greybox fuzzer would need to generate sequences of contract transactions, e.g., by creating bids from multiple users, while keeping the search space and test suite tractable. In this paper, we explain how Harvey alleviates both challenges with two key techniques. First, Harvey extends standard greybox fuzzing with a method for predicting new inputs that are more likely to cover new paths or reveal vulnerabilities in smart contracts. Second, it fuzzes transaction sequences in a targeted and demand-driven way. We have evaluated our approach on 27 real-world contracts. Our experiments show that our techniques significantly increase Harvey's effectiveness in achieving high coverage and detecting vulnerabilities, in most cases orders-of-magnitude faster. © 2020 ACM.},
	type = {Conference paper},
	publication_stage = {Final},
	source = {Scopus},
	note = {Cited by: 42; All Open Access, Green Open Access}
}

@ARTICLE{He2023,
	author = {He, Jiahao and Li, Shuangyin and Wang, Xinming and Cheung, Shing-Chi and Zhao, Gansen and Yang, Jinji},
	title = {Neural-FEBI: Accurate function identification in Ethereum Virtual Machine bytecode},
	year = {2023},
	journal = {Journal of Systems and Software},
	volume = {199},
	doi = {10.1016/j.jss.2023.111627},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85147551485&doi=10.1016%2fj.jss.2023.111627&partnerID=40&md5=f998eed484f4d2fd796349d2c5f9d878},
	abstract = {Millions of smart contracts have been deployed onto the Ethereum platform, posing potential attack subjects. Therefore, analyzing contract binaries is vital since their sources are unavailable, involving identification comprising function entry identification and detecting its boundaries. Such boundaries are critical to many smart contract applications, e.g. reverse engineering and profiling. Unfortunately, it is challenging to identify functions from these stripped contract binaries due to the lack of internal function call statements and the compiler-inducing instruction reshuffling. Recently, several existing works excessively relied on a set of handcrafted heuristic rules which impose several faults. To address this issue, we propose a novel neural network-based framework for EVM bytecode Function Entries and Boundaries Identification (neural-FEBI) that does not rely on a fixed set of handcrafted rules. Instead, it used a two-level bi-Long Short-Term Memory network and a Conditional Random Field network to locate the function entries. The suggested framework also devises a control flow traversal algorithm to determine the code segments reachable from the function entry as its boundary. Several experiments on 38,996 publicly available smart contracts collected as binary demonstrate that neural-FEBI confirms the lowest and highest F1-scores for the function entries identification task across different datasets of 88.3 to 99.7, respectively. Its performance on the function boundary identification task is also increased from 79.4% to 97.1% compared with state-of-the-art. We further demonstrate that the identified function information can be used to construct more accurate intra-procedural CFGs and call graphs. The experimental results confirm that the proposed framework significantly outperforms state-of-the-art, often based on handcrafted heuristic rules. © 2023 The Authors},
	type = {Article},
	publication_stage = {Final},
	source = {Scopus},
	note = {Cited by: 0; All Open Access, Green Open Access}
}

@ARTICLE{Shi2022,
	author = {Shi, Wenquan and Huang, Qibao},
	title = {The Blockchain Technology Applied in the Development of Real Economy in Jiangsu under Deep Learning},
	year = {2022},
	journal = {Computational Intelligence and Neuroscience},
	volume = {2022},
	doi = {10.1155/2022/3088043},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85130043263&doi=10.1155%2f2022%2f3088043&partnerID=40&md5=2329cdf8b62c6ddcb79012f7d4453a44},
	abstract = {This study focuses on the financing difficulties of small and medium enterprises (SMEs) in China to study the application of blockchain technology in developing the real economy. Deep learning neural network is applied to the vulnerability analysis and detection of smart contracts in blockchain technology by analyzing the connotation of blockchain technology and deep learning. A multiparty joint financial service platform based on blockchain technology is established to help SMEs financing institutions reduce transaction costs, thereby helping them reduce loan interest rates. Finally, Jiangsu Province is studied as a pilot unit. The results show that the Recall and F-score of Bidirectional Neural Network for smart contract vulnerability detection are higher than those of the original neural network. The Recall rate and F-score value of the Wide and Deep model are up to 96.2% and 94.7%, which are higher than those of other vulnerability detection schemes. The Timestamp vulnerability has the highest Recall rate, 94.2%, which can rely on a large amount of valid data to improve detection efficiency. The distribution of financing needs of SMEs in Jiangsu Province from 2020 to 2021 shows that the loan number of SMEs is generally not high. Still, financial institutions and enterprises must spend the same transaction cost. After a technology company in Nanjing made a loan through a blockchain financial service platform, its financing cost decreased by 0.5331%. Blockchain technology has played a great role in the financing process of SMEs, reducing intermediate links and credit costs, and promoting the development of SMEs and the real economy.  © 2022 Wenquan Shi and Qibao Huang.},
	type = {Article},
	publication_stage = {Final},
	source = {Scopus},
	note = {Cited by: 0; All Open Access, Gold Open Access}
}

@ARTICLE{Villarreal20235629,
	author = {Villarreal, Edgar R. Dulce and Garcia-Alonso, Jose and Moguel, Enrique and Alegria, Julio Ariel Hurtado},
	title = {Blockchain for Healthcare Management Systems: A Survey on Interoperability and Security},
	year = {2023},
	journal = {IEEE Access},
	volume = {11},
	pages = {5629 – 5652},
	doi = {10.1109/ACCESS.2023.3236505},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85147281305&doi=10.1109%2fACCESS.2023.3236505&partnerID=40&md5=6485c98d74ac7a50746ef7d647c4f07f},
	abstract = {n recent years it has been shown that the secure exchange of medical information significantly benefits people's life quality, improving their care and treatment. The interoperability of the entire healthcare ecosystem is a constant challenge, and even more, with all the risks posed to the security of healthcare information. Blockchain technology is emerging as one of the main alternatives when it comes to finding a balance in the healthcare ecosystem. However, the constant development of new Blockchain technologies and the evolution of healthcare systems make it difficult to find established proposals. From an architectural point of view, the design of blockchain-based solutions requires trade-offs e.g., security and interoperability. This paper focuses on two main objectives, in the first one, it was carried out a Systematic Literature Review for exploring architectural mechanisms used to support the interoperability and security of Blockchain-based Health Management Systems. Taking into account of results, a series of scenarios were generated where these mechanisms can be used along with their context, issues, and various architectural concerns (interoperability and security). In the second objective, a high-level architecture and its validation were proposed through an experiment for the whole process of developing a Domain Specific Language, using the Model Driven Engineering methodology for specific Smart Contracts.  © 2013 IEEE.},
	type = {Article},
	publication_stage = {Final},
	source = {Scopus},
	note = {Cited by: 0; All Open Access, Gold Open Access}
}

@ARTICLE{Singh2022,
	author = {Singh, Irish and Lee, Seok-Won},
	title = {SRE_BBC: A Self‐Adaptive Security Enabled Requirements Engineering Approach for SLA Smart Contracts in Blockchain‐Based Cloud Systems},
	year = {2022},
	journal = {Sensors},
	volume = {22},
	number = {10},
	doi = {10.3390/s22103903},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85130215326&doi=10.3390%2fs22103903&partnerID=40&md5=b663ffa8a3578cbfbb4e93993560eb90},
	abstract = {Current blockchain‐based cloud (BBC) systems have several security vulnerabilities regarding smart contracts (SC), and several attacks have been reported recently. The SC development lacks standard design processes that follow software lifecycle principles to model secure SC. Secondly, the security mechanisms in the SC are not constantly evolved to resist evolving adversary attacks. BBC systems lack self‐adaptive security capability to make spontaneous decisions when adversarial attacks are encountered. To build a self‐adaptive secure BBC system that follows standard software development lifecycle principles to model secure SC, we propose the so‐called selfadaptive security RE_BBC framework. The framework would utilize the MAPE‐BBC adaptation loop to make decisions internally based on the threat models, goal models, and service level agreement (SLA) SC security specifications. The framework identifies vulnerabilities and threats and takes precautionary measures using self‐adaptive SC agents. We validated the proposed methodology theoretically and empirically, and statistically proved the research questions and hypothesis using the t‐test and Mann–Whitney U test. Subsequently, we compare our proposed approach with the Security Quality Requirements Engineering approach (SQUARE). The feasibility results and the replicated study results indicate that the proposed approach outperformed the SQUARE approach in terms of artifacts quality, self‐adaptive security evaluation quality, efficiency in response time, complexity, and usefulness of the proposed approach for the Healthcare Data Management (HDM) system. SC security developers can immensely benefit from our proposed methodology. They need not reengineer SC from scratch; depending on their security needs and plan, the contract can be adapted to execute a new plan. © 2022 by the authors. Licensee MDPI, Basel, Switzerland.},
	type = {Article},
	publication_stage = {Final},
	source = {Scopus},
	note = {Cited by: 0; All Open Access, Gold Open Access, Green Open Access}
}