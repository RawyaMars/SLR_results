
@book{wanjala_beginners_2018,
	title = {A {Beginners} {Journey} to {Ethereums} {Smart} {Contracts}: {Engineering} {Smart} {Contracts} and {DApps} in {Solidity} and {Web3}.{Js}},
	isbn = {1-980877-28-9},
	abstract = {The potentials of Ethereum smart contractspowered by the ubiquitous Blockchain technologyhas been the subject of raging debate in recent times. Pundits have long held the argument that smart contracts hold the promise of curing hurdles associated with financial contracts, banking transactions, e-commerce, logistics, supply chain and legal contracts. It is no secret that reliance on classical contractswhich uses physical documentshas led to delays in transactions, inefficiencies, and exposures to fraudulent activities. Employing smart contracts can help companies lower administration costs, reduce risks, and promote efficient business operations across multiple sectors of the economy. However, to appreciate these benefits and develop better smart contracts, developers have understood how to use the technologies to engineer Blockchain projects. This book provides a big picture view of engineering Ethereum smart contracts. It delves deeper to explore how Solidity and Web3.Js can be used to build enterprise-level smart contracts and DApps. The book has been structured into 10 chapters as follows: Chapter 1: Overview of Blockchain and smart contracts. It explores the basic concepts about Blockchain, cryptography, smart contracts, and DApps to provide you with a solid understanding on what is required to start creating smart contracts. Chapter 2: Smart Contracts with Web3.Js. It introduces you to Web3.Js and how you can use it to start building smart contracts. Chapter 3: Smart Contracts Events with Web3.Js. You will learn all the basics of applying smart contract events in Web3.Js. Chapter 4: Functions, mappings, and structs. It explores the Soliditys functions, mappings and structs and how to use them to enhance the development of smart contracts. Chapter 5: Inheritance and Deployment. It examines how smart contracts can be inherited and deployed on the Ethereum Virtual Machine (EVM). Chapter 6: Embark Framework. It examines the Embark framework and how it can fast-track the development and deployment of smart contracts on EVM. Chapter 7: Testing Smart Contracts. It explores how smart contracts can be tested in different environments. Chapter 8: Contracts Management with Factories. It examines how factories can be used to manage multiple smart contracts. Chapter 9: IPFS and Web Hosting. It introduces the Interplanetary File System protocol and how it can be leveraged to host smart contracts. Chapter 10: End-to-end Development of DApps. It summarizes the various steps involved in the development of DApps. Ultimately, the focus of this book is an exploration of all aspects of smart contracts and DApps that you need to know for you to start creating Ethereum-based Blockchain projects. Lets get started.},
	publisher = {Independently published},
	author = {Wanjala, Peter Namisiko},
	year = {2018},
}

@inproceedings{yan_eshield_2020,
	address = {New York, NY, USA},
	series = {{ISSTA} 2020},
	title = {{EShield}: {Protect} {Smart} {Contracts} against {Reverse} {Engineering}},
	isbn = {978-1-4503-8008-9},
	url = {https://doi.org/10.1145/3395363.3404365},
	doi = {10.1145/3395363.3404365},
	abstract = {Smart contracts are the back-end programs of blockchain-based applications and the execution results are deterministic and publicly visible. Developers are unwilling to release source code of some smart contracts to generate randomness or for security reasons, however, attackers still can use reverse engineering tools to decompile and analyze the code. In this paper, we propose EShield, an automated security enhancement tool for protecting smart contracts against reverse engineering. EShield replaces original instructions of operating jump addresses with anti-patterns to interfere with control flow recovery from bytecode. We have implemented four methods in EShield and conducted an experiment on over 20k smart contracts. The evaluation results show that all the protected smart contracts are resistant to three different reverse engineering tools with little extra gas cost.},
	booktitle = {Proceedings of the 29th {ACM} {SIGSOFT} {International} {Symposium} on {Software} {Testing} and {Analysis}},
	publisher = {Association for Computing Machinery},
	author = {Yan, Wentian and Gao, Jianbo and Wu, Zhenhao and Li, Yue and Guan, Zhi and Li, Qingshan and Chen, Zhong},
	year = {2020},
	note = {event-place: Virtual Event, USA},
	keywords = {Blockchain, Ethereum, Smart Contract, Program Analysis, Reverse Engineering},
	pages = {553--556},
}

@phdthesis{kolb_language-based_2020,
	type = {{PhD} {Thesis}},
	title = {A {Language}-{Based} {Approach} to {Smart} {Contract} {Engineering}},
	abstract = {Blockchain-based smart contracts have emerged as a popular means of enforcing agreements among a collection of parties without a prior assumption of trust. However, it has proven difficult to write correct contracts that are robust when operating in the adversarial environment of public blockchains. This thesis evaluates the ability of a domain-specific contract programming language to support the expression and systematic testing of practical smart contracts. We present the design, implementation, and evaluation of Quartz, a contract language based on the state machine model of execution.The design and evaluation of Quartz is grounded in a suite of case study smart contracts. These are intended to span a wide range of application scenarios and design patterns encountered in practice by contract developers. The language's implementation is organized around the translation of a contract to two targets: a formal specification expressed in TLA+ and an implementation expressed in Solidity. Through its support for model checking contract specifications, Quartz enables the discovery of implementation flaws identical to those that have compromised real-world smart contracts. Moreover, its generated Solidity code imposes at most minor execution overhead compared to equivalent handwritten code. Finally, we discuss Quartz's future potential to validate contracts against economic notions of correctness, which are often central concerns in contract design yet are not addressed by current verification techniques.},
	school = {University of California, Berkeley},
	author = {Kolb, John and Parlour, Christine},
	year = {2020},
	note = {ISBN: 9798597063607},
	annote = {AAI28263637},
}

@inproceedings{ivanov_targeting_2021,
	address = {New York, NY, USA},
	series = {{ASIA} {CCS} '21},
	title = {Targeting the {Weakest} {Link}: {Social} {Engineering} {Attacks} in {Ethereum} {Smart} {Contracts}},
	isbn = {978-1-4503-8287-8},
	url = {https://doi.org/10.1145/3433210.3453085},
	doi = {10.1145/3433210.3453085},
	abstract = {Ethereum holds multiple billions of U.S. dollars in the form of Ether cryptocurrency and ERC-20 tokens, with millions of deployed smart contracts algorithmically operating these funds. Unsurprisingly, the security of Ethereum smart contracts has been under rigorous scrutiny. In recent years, numerous defense tools have been developed to detect different types of smart contract code vulnerabilities. When opportunities for exploiting code vulnerabilities diminish, the attackers start resorting to social engineering attacks, which aim to influence humans - often the weakest link in the system. The only known class of social engineering attacks in Ethereum are honeypots, which plant hidden traps for attackers attempting to exploit existing vulnerabilities, thereby targeting only a small population of potential victims.In this work, we explore the possibility and existence of new social engineering attacks beyond smart contract honeypots. We present two novel classes of Ethereum social engineering attacks - Address Manipulation and Homograph - and develop six zero-day social engineering attacks. To show how the attacks can be used in popular programming patterns, we conduct a case study of five popular smart contracts with combined market capitalization exceeding \$29 billion, and integrate our attack patterns in their source codes without altering their existing functionality. Moreover, we show that these attacks remain dormant during the test phase but activate their malicious logic only at the final production deployment. We further analyze 85,656 open-source smart contracts, and discover that 1,027 of them can be used for the proposed social engineering attacks. We conduct a professional opinion survey with experts from seven smart contract auditing firms, corroborating that the exposed social engineering attacks bring a major threat to the smart contract systems.},
	booktitle = {Proceedings of the 2021 {ACM} {Asia} {Conference} on {Computer} and {Communications} {Security}},
	publisher = {Association for Computing Machinery},
	author = {Ivanov, Nikolay and Lou, Jianzhi and Chen, Ting and Li, Jin and Yan, Qiben},
	year = {2021},
	note = {event-place: Virtual Event, Hong Kong},
	keywords = {smart contracts, ethereum, security, attacks, social engineering},
	pages = {787--801},
}

@inproceedings{wan_smart_2021,
	series = {{ICSE} '21},
	title = {Smart {Contract} {Security}: {A} {Practitioners}' {Perspective}: {The} {Artifact} of a {Paper} {Accepted} in the 43rd {IEEE}/{ACM} {International} {Conference} on {Software} {Engineering} ({ICSE} 2021)},
	url = {https://doi.org/10.1109/ICSE-Companion52605.2021.00104},
	doi = {10.1109/ICSE-Companion52605.2021.00104},
	abstract = {Blockchain is a distributed ledger that provides an open, decentralized, and fault-tolerant transaction mechanism. Blockchain technology has attracted considerable attention from both industry and academia since it is originally introduced for Bitcoin [7] to support the exchange of cryptocurrency. Blockchain technology evolves to facilitate generalpurpose computations with a wide range of decentralized applications. The Smart contract technology is one appealing decentralized application that enables the computations on top of a blockchain.},
	booktitle = {Proceedings of the 43rd {International} {Conference} on {Software} {Engineering}: {Companion} {Proceedings}},
	publisher = {IEEE Press},
	author = {Wan, Zhiyuan and Xia, Xin and Lo, David and Chen, Jiachi and Luo, Xiapu and Yang, Xiaohu},
	year = {2021},
	note = {event-place: Virtual Event, Spain},
	pages = {227--228},
}

@article{sillaber_laying_2021,
	title = {Laying the {Foundation} for {Smart} {Contract} {Development}: {An} {Integrated} {Engineering} {Process} {Model}},
	volume = {19},
	issn = {1617-9846},
	url = {https://doi.org/10.1007/s10257-020-00465-5},
	doi = {10.1007/s10257-020-00465-5},
	abstract = {Smart contracts are seen as the major building blocks for future autonomous blockchain- and Distributed Ledger Technology (DLT)-based applications. Engineering such contracts for trustless, append-only, and decentralized digital ledgers allows mutually distrustful parties to transform legal requirements into immutable and formalized rules. Previous experience shows this to be a challenging task due to demanding socio-technical ecosystems and the specificities of decentralized ledger technology. In this paper, we therefore develop an integrated process model for engineering DLT-based smart contracts that accounts for the specificities of DLT. This model was iteratively refined with the support of industry experts. The model explicitly accounts for the immutability of the trustless, append-only, and decentralized DLT ecosystem, and thereby overcomes certain limitations of traditional software engineering process models. More specifically, it consists of five successive and closely intertwined phases: conceptualization, implementation, approval, execution, and finalization. For each phase, the respective activities, roles, and artifacts are identified and discussed in detail. Applying such a model when engineering smart contracts will help software engineers and developers to better understand and streamline the engineering process of DLTs in general and blockchain in particular. Furthermore, this model serves as a generic framework which will support application development in all fields in which DLT can be applied.},
	number = {3},
	journal = {Inf. Syst. E-Bus. Manag.},
	author = {Sillaber, Christian and Waltl, Bernhard and Treiblmaier, Horst and Gallersdörfer, Ulrich and Felderer, Michael},
	month = sep,
	year = {2021},
	note = {Place: Berlin, Heidelberg
Publisher: Springer-Verlag},
	keywords = {Blockchain, Smart contract, Design science, Development process model, Distributed ledger technology, Software engineering, Survey, Trustless append-only decentralized digital ledgers (TADDL)},
	pages = {863--882},
}

@article{demichev_business_2021,
	title = {Business {Process} {Engineering} for {Data} {Storing} and {Processing} in a {Collaborative} {Distributed} {Environment} {Based} on {Provenance} {Metadata}, {Smart} {Contracts} and {Blockchain} {Technology}},
	volume = {19},
	issn = {1570-7873},
	url = {https://doi.org/10.1007/s10723-021-09544-4},
	doi = {10.1007/s10723-021-09544-4},
	abstract = {We suggest a novel approach to designing totally decentralized data management systems in distributed environments with administratively unrelated or loosely related user groups and in conditions of partial or complete lack of trust between them. This approach is based on the integration of blockchain technology, smart contracts and provenance metadata driven data management. Provenance metadata (PMD) contain key information that is necessary to determine the origin, authorship and quality of relevant data, their storage and usage consistency, and for interpretation and confirmation of relevant results of data processing. Architecture, operation principles and algorithms have been developed for the system, entitled ProvHL (Provenance HyperLedger), which provides fault-tolerant, safe and reliable management of provenance metadata, control of operations with data files, as well as resource access management in collaborative distributed computing systems (CDCS). CDCS refers to distributed systems formed by combining into a single pool of computer resources of various organizations (institutions) to work together in the framework of a project. The paper also suggests a new blockchain-based method for delegation of rights within distributed computing systems which is free from shortcomings inherent in other solutions. The main goal of the work is to demonstrate the capabilities of the proposed approach and the above technologies to improve the functional properties of CDCSs.},
	number = {1},
	journal = {J. Grid Comput.},
	author = {Demichev, Andrey and Kryukov, Alexander and Prikhod’ko, Nikolai},
	month = mar,
	year = {2021},
	note = {Place: Berlin, Heidelberg
Publisher: Springer-Verlag},
	keywords = {Blockchain technology, Hyperledger fabric, Access rights, Distributed computing systems, Provenance metadata, Rights delegation},
}

@inproceedings{zhou_erays_2018,
	address = {USA},
	series = {{SEC}'18},
	title = {Erays: {Reverse} {Engineering} {Ethereum}'s {Opaque} {Smart} {Contracts}},
	isbn = {978-1-931971-46-1},
	abstract = {Interacting with Ethereum smart contracts can have potentially devastating financial consequences. In light of this, several regulatory bodies have called for a need to audit smart contracts for security and correctness guarantees. Unfortunately, auditing smart contracts that do not have readily available source code can be challenging, and there are currently few tools available that aid in this process. Such contracts remain opaque to auditors. To address this, we present Erays, a reverse engineering tool for smart contracts. Erays takes in smart contract from the Ethereum blockchain, and produces high-level pseudocode suitable for manual analysis. We show how Erays can be used to provide insight into several contract properties, such as code complexity and code reuse in the ecosystem. We then leverage Erays to link contracts with no previously available source code to public source code, thus reducing the overall opacity in the ecosystem. Finally, we demonstrate how Erays can be used for reverse-engineering in four case studies: high-value multisignature wallets, arbitrage bots, exchange accounts, and finally, a popular smart-contract game, Cryptokitties. We conclude with a discussion regarding the value of reverse engineering in the smart contract ecosystem, and how Erays can be leveraged to address the challenges that lie ahead.},
	booktitle = {Proceedings of the 27th {USENIX} {Conference} on {Security} {Symposium}},
	publisher = {USENIX Association},
	author = {Zhou, Yi and Kumar, Deepak and Bakshi, Surya and Mason, Joshua and Miller, Andrew and Bailey, Michael},
	year = {2018},
	note = {event-place: Baltimore, MD, USA},
	pages = {1371--1385},
}

@inproceedings{zhou_erays_2018-1,
	address = {USA},
	series = {{SEC}'18},
	title = {Erays: {Reverse} {Engineering} {Ethereum}'s {Opaque} {Smart} {Contracts}},
	isbn = {978-1-931971-46-1},
	abstract = {Interacting with Ethereum smart contracts can have potentially devastating financial consequences. In light of this, several regulatory bodies have called for a need to audit smart contracts for security and correctness guarantees. Unfortunately, auditing smart contracts that do not have readily available source code can be challenging, and there are currently few tools available that aid in this process. Such contracts remain opaque to auditors. To address this, we present Erays, a reverse engineering tool for smart contracts. Erays takes in smart contract from the Ethereum blockchain, and produces high-level pseudocode suitable for manual analysis. We show how Erays can be used to provide insight into several contract properties, such as code complexity and code reuse in the ecosystem. We then leverage Erays to link contracts with no previously available source code to public source code, thus reducing the overall opacity in the ecosystem. Finally, we demonstrate how Erays can be used for reverse-engineering in four case studies: high-value multisignature wallets, arbitrage bots, exchange accounts, and finally, a popular smart-contract game, Cryptokitties. We conclude with a discussion regarding the value of reverse engineering in the smart contract ecosystem, and how Erays can be leveraged to address the challenges that lie ahead.},
	booktitle = {Proceedings of the 27th {USENIX} {Conference} on {Security} {Symposium}},
	publisher = {USENIX Association},
	author = {Zhou, Yi and Kumar, Deepak and Bakshi, Surya and Mason, Joshua and Miller, Andrew and Bailey, Michael},
	year = {2018},
	note = {event-place: Baltimore, MD, USA},
	pages = {1371--1385},
}

@inproceedings{ivanov_targeting_2021-1,
	address = {New York, NY, USA},
	series = {{ASIA} {CCS} '21},
	title = {Targeting the {Weakest} {Link}: {Social} {Engineering} {Attacks} in {Ethereum} {Smart} {Contracts}},
	isbn = {978-1-4503-8287-8},
	url = {https://doi.org/10.1145/3433210.3453085},
	doi = {10.1145/3433210.3453085},
	abstract = {Ethereum holds multiple billions of U.S. dollars in the form of Ether cryptocurrency and ERC-20 tokens, with millions of deployed smart contracts algorithmically operating these funds. Unsurprisingly, the security of Ethereum smart contracts has been under rigorous scrutiny. In recent years, numerous defense tools have been developed to detect different types of smart contract code vulnerabilities. When opportunities for exploiting code vulnerabilities diminish, the attackers start resorting to social engineering attacks, which aim to influence humans - often the weakest link in the system. The only known class of social engineering attacks in Ethereum are honeypots, which plant hidden traps for attackers attempting to exploit existing vulnerabilities, thereby targeting only a small population of potential victims.In this work, we explore the possibility and existence of new social engineering attacks beyond smart contract honeypots. We present two novel classes of Ethereum social engineering attacks - Address Manipulation and Homograph - and develop six zero-day social engineering attacks. To show how the attacks can be used in popular programming patterns, we conduct a case study of five popular smart contracts with combined market capitalization exceeding \$29 billion, and integrate our attack patterns in their source codes without altering their existing functionality. Moreover, we show that these attacks remain dormant during the test phase but activate their malicious logic only at the final production deployment. We further analyze 85,656 open-source smart contracts, and discover that 1,027 of them can be used for the proposed social engineering attacks. We conduct a professional opinion survey with experts from seven smart contract auditing firms, corroborating that the exposed social engineering attacks bring a major threat to the smart contract systems.},
	booktitle = {Proceedings of the 2021 {ACM} {Asia} {Conference} on {Computer} and {Communications} {Security}},
	publisher = {Association for Computing Machinery},
	author = {Ivanov, Nikolay and Lou, Jianzhi and Chen, Ting and Li, Jin and Yan, Qiben},
	year = {2021},
	note = {event-place: Virtual Event, Hong Kong},
	keywords = {smart contracts, ethereum, security, attacks, social engineering},
	pages = {787--801},
}

@inproceedings{barboni_smart_2023,
	address = {New York, NY, USA},
	series = {{WETSEB} '22},
	title = {Smart {Contract} {Testing}: {Challenges} and {Opportunities}},
	isbn = {978-1-4503-9331-7},
	url = {https://doi.org/10.1145/3528226.3528370},
	doi = {10.1145/3528226.3528370},
	abstract = {Blockchain technologies have found important and concrete applications in the real world. Active solutions leverage Smart Contracts for the management of cryptocurrencies, sensitive data, and other valuable assets. One of the core objectives of blockchain-oriented software engineering (BOSE) is ensuring that Smart Contracts receive adequate pre-release testing to guarantee the deployment of reliable code. However, the novelty and the complexity of the blockchain environment pose new challenges to the validation and verification of Smart Contract based software. In this paper, we analyze the aforementioned challenges to foster the discussion on the specific topic of Smart Contract testing and identify relevant research directions.},
	booktitle = {Proceedings of the 5th {International} {Workshop} on {Emerging} {Trends} in {Software} {Engineering} for {Blockchain}},
	publisher = {Association for Computing Machinery},
	author = {Barboni, Morena and Morichetta, Andrea and Polini, Andrea},
	year = {2023},
	note = {event-place: Pittsburgh, Pennsylvania},
	keywords = {blockchain, smart contract, BOSE, testing},
	pages = {21--24},
}

@inproceedings{medeiros_solunit_2019,
	address = {USA},
	series = {{CASCON} '19},
	title = {{SolUnit}: {A} {Framework} for {Reducing} {Execution} {Time} of {Smart} {Contract} {Unit} {Tests}},
	abstract = {Smart contracts are software programs implemented on a blockchain platform that monitor and automate the execution of contracts to ensure compliance with the terms and conditions of a contract. As such, smart contracts represent a new kind of software that poses its own engineering challenges and requires novel software engineering techniques. In particular, smart contracts require thorough testing before they are deployed because they can't be changed after deployment. This paper proposes a novel approach for executing unit tests for smart contracts intended to reduce test execution time. This reduction is achieved through the reuse of the deployment execution of the smart contract in each test and also the reuse of the setup execution of each test. We implemented the framework SolUnit that uses this approach to execute tests written in Java for Ethereum Solidity smart contracts. We also evaluated the framework SolUnit in five projects. The results show that our approach achieves a meaningful reduction of the time to execute the tests, without breaking the principle of independent tests. The experiments were performed in two environments: an in-memory simulated blockchain and a private Ethereum-based blockchain. Overall, our approach was able to reduce the test execution time by up to 70\%.},
	booktitle = {Proceedings of the 29th {Annual} {International} {Conference} on {Computer} {Science} and {Software} {Engineering}},
	publisher = {IBM Corp.},
	author = {Medeiros, Hallan and Vilain, Patrícia and Mylopoulos, John and Jacobsen, Hans-Arno},
	year = {2019},
	note = {event-place: Toronto, Ontario, Canada},
	keywords = {Ethereum, blockchain, smart contract, software testing, solidity, SolUnit, test automation, testing framework, unit testing},
	pages = {264--273},
}

@book{wanjala_beginners_2018-1,
	title = {A {Beginners} {Journey} to {Ethereums} {Smart} {Contracts}: {Engineering} {Smart} {Contracts} and {DApps} in {Solidity} and {Web3}.{Js}},
	isbn = {1-980877-28-9},
	abstract = {The potentials of Ethereum smart contractspowered by the ubiquitous Blockchain technologyhas been the subject of raging debate in recent times. Pundits have long held the argument that smart contracts hold the promise of curing hurdles associated with financial contracts, banking transactions, e-commerce, logistics, supply chain and legal contracts. It is no secret that reliance on classical contractswhich uses physical documentshas led to delays in transactions, inefficiencies, and exposures to fraudulent activities. Employing smart contracts can help companies lower administration costs, reduce risks, and promote efficient business operations across multiple sectors of the economy. However, to appreciate these benefits and develop better smart contracts, developers have understood how to use the technologies to engineer Blockchain projects. This book provides a big picture view of engineering Ethereum smart contracts. It delves deeper to explore how Solidity and Web3.Js can be used to build enterprise-level smart contracts and DApps. The book has been structured into 10 chapters as follows: Chapter 1: Overview of Blockchain and smart contracts. It explores the basic concepts about Blockchain, cryptography, smart contracts, and DApps to provide you with a solid understanding on what is required to start creating smart contracts. Chapter 2: Smart Contracts with Web3.Js. It introduces you to Web3.Js and how you can use it to start building smart contracts. Chapter 3: Smart Contracts Events with Web3.Js. You will learn all the basics of applying smart contract events in Web3.Js. Chapter 4: Functions, mappings, and structs. It explores the Soliditys functions, mappings and structs and how to use them to enhance the development of smart contracts. Chapter 5: Inheritance and Deployment. It examines how smart contracts can be inherited and deployed on the Ethereum Virtual Machine (EVM). Chapter 6: Embark Framework. It examines the Embark framework and how it can fast-track the development and deployment of smart contracts on EVM. Chapter 7: Testing Smart Contracts. It explores how smart contracts can be tested in different environments. Chapter 8: Contracts Management with Factories. It examines how factories can be used to manage multiple smart contracts. Chapter 9: IPFS and Web Hosting. It introduces the Interplanetary File System protocol and how it can be leveraged to host smart contracts. Chapter 10: End-to-end Development of DApps. It summarizes the various steps involved in the development of DApps. Ultimately, the focus of this book is an exploration of all aspects of smart contracts and DApps that you need to know for you to start creating Ethereum-based Blockchain projects. Lets get started.},
	publisher = {Independently published},
	author = {Wanjala, Peter Namisiko},
	year = {2018},
}

@article{kopke_designing_2023,
	title = {Designing {Secure} {Business} {Processes} for {Blockchains} with {SecBPMN2BC}},
	volume = {141},
	issn = {0167-739X},
	url = {https://doi.org/10.1016/j.future.2022.11.013},
	doi = {10.1016/j.future.2022.11.013},
	number = {C},
	journal = {Future Gener. Comput. Syst.},
	author = {Köpke, Julius and Meroni, Giovanni and Salnitri, Mattia},
	month = feb,
	year = {2023},
	note = {Place: NLD
Publisher: Elsevier Science Publishers B. V.},
	keywords = {Blockchain, Smart contracts, Security, Model-driven engineering, Business processes, Information systems},
	pages = {382--398},
}

@article{boubeta-puig_cepchain_2021,
	title = {{CEPchain}: {A} {Graphical} {Model}-{Driven} {Solution} for {Integrating} {Complex} {Event} {Processing} and {Blockchain}},
	volume = {184},
	issn = {0957-4174},
	url = {https://doi.org/10.1016/j.eswa.2021.115578},
	doi = {10.1016/j.eswa.2021.115578},
	number = {C},
	journal = {Expert Syst. Appl.},
	author = {Boubeta-Puig, Juan and Rosa-Bilbao, Jesús and Mendling, Jan},
	month = dec,
	year = {2021},
	note = {Place: USA
Publisher: Pergamon Press, Inc.},
	keywords = {Blockchain, Smart contract, Supply chain, Complex event processing, Graphical modeling tool, Model-driven development},
}

@article{grech_elipmoc_2022,
	title = {Elipmoc: {Advanced} {Decompilation} of {Ethereum} {Smart} {Contracts}},
	volume = {6},
	url = {https://doi.org/10.1145/3527321},
	doi = {10.1145/3527321},
	abstract = {Smart contracts on the Ethereum blockchain greatly benefit from cutting-edge analysis techniques and pose significant challenges. A primary challenge is the extremely low-level representation of deployed contracts. We present Elipmoc, a decompiler for the next generation of smart contract analyses. Elipmoc is an evolution of Gigahorse, the top research decompiler, dramatically improving over it and over other state-of-the-art tools, by employing several high-precision techniques and making them scalable. Among these techniques are a new kind of context sensitivity (termed “transactional sensitivity”) that provides a more effective static abstraction of distinct dynamic executions; a path-sensitive (yet scalable, through path merging) algorithm for inference of function arguments and returns; and a fully context sensitive private function reconstruction process. As a result, smart contract security analyses and reverse-engineering tools built on top of Elipmoc achieve high scalability, precision and completeness. Elipmoc improves over all notable past decompilers, including its predecessor, Gigahorse, and the state-of-the-art industrial tool, Panoramix, integrated into the primary Ethereum blockchain explorer, Etherscan. Elipmoc produces decompiled contracts with fully resolved operands at a rate of 99.5\% (compared to 62.8\% for Gigahorse), and achieves much higher completeness in code decompilation than Panoramix—e.g., up to 67\% more coverage of external call statements—while being over 5x faster. Elipmoc has been the enabler for recent (independent) discoveries of several exploitable vulnerabilities on popular protocols, over funds in the many millions of dollars.},
	number = {OOPSLA1},
	journal = {Proc. ACM Program. Lang.},
	author = {Grech, Neville and Lagouvardos, Sifis and Tsatiris, Ilias and Smaragdakis, Yannis},
	month = apr,
	year = {2022},
	note = {Place: New York, NY, USA
Publisher: Association for Computing Machinery},
	keywords = {Blockchain, Ethereum, Smart Contracts, Datalog, Decompilation, Program Analysis, Security},
}

@inproceedings{yan_eshield_2020-1,
	address = {New York, NY, USA},
	series = {{ISSTA} 2020},
	title = {{EShield}: {Protect} {Smart} {Contracts} against {Reverse} {Engineering}},
	isbn = {978-1-4503-8008-9},
	url = {https://doi.org/10.1145/3395363.3404365},
	doi = {10.1145/3395363.3404365},
	abstract = {Smart contracts are the back-end programs of blockchain-based applications and the execution results are deterministic and publicly visible. Developers are unwilling to release source code of some smart contracts to generate randomness or for security reasons, however, attackers still can use reverse engineering tools to decompile and analyze the code. In this paper, we propose EShield, an automated security enhancement tool for protecting smart contracts against reverse engineering. EShield replaces original instructions of operating jump addresses with anti-patterns to interfere with control flow recovery from bytecode. We have implemented four methods in EShield and conducted an experiment on over 20k smart contracts. The evaluation results show that all the protected smart contracts are resistant to three different reverse engineering tools with little extra gas cost.},
	booktitle = {Proceedings of the 29th {ACM} {SIGSOFT} {International} {Symposium} on {Software} {Testing} and {Analysis}},
	publisher = {Association for Computing Machinery},
	author = {Yan, Wentian and Gao, Jianbo and Wu, Zhenhao and Li, Yue and Guan, Zhi and Li, Qingshan and Chen, Zhong},
	year = {2020},
	note = {event-place: Virtual Event, USA},
	keywords = {Blockchain, Ethereum, Smart Contract, Program Analysis, Reverse Engineering},
	pages = {553--556},
}

@book{r_ethereum_2018,
	title = {Ethereum {Cookbook}: {Over} 100 {Recipes} {Covering} {Ethereum}-{Based} {Tokens}, {Games}, {Wallets}, {Smart} {Contracts}, {Protocols}, and {Dapps}},
	isbn = {1-78913-399-8},
	abstract = {Mine Ether, deploy smart contracts, tokens, and ICOs, and manage security vulnerabilities of Ethereum Key Features Build end-to-end decentralized Ethereum apps using Truffle, Web3, and Solidity Explore various solution-based recipes to build smart contracts and foolproof decentralized applications Develop decentralized marketplaces from scratch, build wallets, and manage transactions Book Description Ethereum and Blockchain will change the way software is built for business transactions. Most industries have been looking to leverage these new technologies to gain efficiencies and create new business models and opportunities. The Ethereum Cookbook covers various solutions such as setting up Ethereum, writing smart contracts, and creating tokens, among others. Youll learn about the security vulnerabilities, along with other protocols of Ethereum. Once you have understood the basics, youll move on to exploring various design decisions and tips to make your application scalable and secure. In addition to this, youll work with various Ethereum packages such as Truffle, Web3, and Ganache. By the end of this book, youll have comprehensively grasped the Ethereum principles and ecosystem. What you will learn Efficiently write smart contracts in Ethereum Build scalable distributed applications and deploy them Use tools and frameworks to develop, deploy, and test your application Use block explorers such as Etherscan to find a specific transaction Create your own tokens, initial coin offerings (ICOs), and games Understand various security flaws in smart contracts in order to avoid them Who this book is for The Ethereum Cookbook is for you if you are a software engineer, Blockchain developer, or research scientist who wants to build smart contracts, develop decentralized applications, and facilitate peer-to-peer transaction. It is assumed that you are familiar with Blockchain concepts and have sound knowledge of JavaScript.},
	publisher = {Packt Publishing},
	author = {R., Manoj P.},
	year = {2018},
}

@inproceedings{liu_invcon_2023,
	address = {New York, NY, USA},
	series = {{ASE} '22},
	title = {{InvCon}: {A} {Dynamic} {Invariant} {Detector} for {Ethereum} {Smart} {Contracts}},
	isbn = {978-1-4503-9475-8},
	url = {https://doi.org/10.1145/3551349.3559539},
	doi = {10.1145/3551349.3559539},
	abstract = {Smart contracts are self-executing computer programs deployed on blockchain to enable trustworthy exchange of value without the need of a central authority. With the absence of documentation and specifications, routine tasks such as program understanding, maintenance, verification, and validation, remain challenging for smart contracts. In this paper, we propose a dynamic invariant detection tool, InvCon, for Ethereum smart contracts to mitigate this issue. The detected invariants can be used to not only support the reverse engineering of contract specifications, but also enable standard-compliance checking for contract implementations. InvCon provides a Web-based interface and a demonstration video of it is available at: https://youtu.be/Y1QBHjDSMYk.},
	booktitle = {Proceedings of the 37th {IEEE}/{ACM} {International} {Conference} on {Automated} {Software} {Engineering}},
	publisher = {Association for Computing Machinery},
	author = {Liu, Ye and Li, Yi},
	year = {2023},
	note = {event-place: Rochester, MI, USA},
}

@inproceedings{rocha_preliminary_2018,
	address = {New York, NY, USA},
	series = {{WETSEB} '18},
	title = {Preliminary {Steps} towards {Modeling} {Blockchain} {Oriented} {Software}},
	isbn = {978-1-4503-5726-5},
	url = {https://doi.org/10.1145/3194113.3194123},
	doi = {10.1145/3194113.3194123},
	abstract = {Even though blockchain is mostly popular for its cryptocurrency, smart contracts have become a very prominent blockchain application. Smart contracts are like classes that can be called by client applications outside the blockchain. Therefore it is possible to develop blockchain-oriented software (BOS) that implements part of the business logic in the blockchain by using smart contracts. Currently, there is no design standard to model BOS. Since modeling is an important part of designing a software, developers may struggle to plan their BOS. In this paper, we show three complementary modeling approaches based on well-known software engineering models and apply them to a BOS example. Our goal is to start the discussion on specialized blockchain modeling notations.},
	booktitle = {Proceedings of the 1st {International} {Workshop} on {Emerging} {Trends} in {Software} {Engineering} for {Blockchain}},
	publisher = {Association for Computing Machinery},
	author = {Rocha, Henrique and Ducasse, Stéphane},
	year = {2018},
	note = {event-place: Gothenburg, Sweden},
	keywords = {blockchain, smart contracts, BPMN, ER model, modeling, UML},
	pages = {52--57},
}

@article{pacheco_what_2023,
	title = {What {Makes} {Ethereum} {Blockchain} {Transactions} {Be} {Processed} {Fast} or {Slow}? {An} {Empirical} {Study}},
	volume = {28},
	issn = {1382-3256},
	url = {https://doi.org/10.1007/s10664-022-10283-7},
	doi = {10.1007/s10664-022-10283-7},
	abstract = {The Ethereum platform allows developers to implement and deploy applications called ÐApps onto the blockchain for public use through the use of smart contracts. To execute code within a smart contract, a paid transaction must be issued towards one of the functions that are exposed in the interface of a contract. However, such a transaction is only processed once one of the miners in the peer-to-peer network selects it, adds it to a block, and appends that block to the blockchain This creates a delay between transaction submission and code execution. It is crucial for ÐApp developers to be able to precisely estimate when transactions will be processed, since this allows them to define and provide a certain Quality of Service (QoS) level (e.g., 95\% of the transactions processed within 1 minute). However, the impact that different factors have on these times have not yet been studied. Processing time estimation services are used by ÐApp developers to achieve predefined QoS. Yet, these services offer minimal insights into what factors impact processing times. Considering the vast amount of data that surrounds the Ethereum blockchain, changes in processing times are hard for ÐApp developers to predict, making it difficult to maintain said QoS. In our study, we build random forest models to understand the factors that are associated with transaction processing times. We engineer several features that capture blockchain internal factors, as well as gas pricing behaviors of transaction issuers. By interpreting our models, we conclude that features surrounding gas pricing behaviors are very strongly associated with transaction processing times. Based on our empirical results, we provide ÐApp developers with concrete insights that can help them provide and maintain high levels of QoS.},
	number = {2},
	journal = {Empirical Softw. Engg.},
	author = {Pacheco, Michael and Oliva, Gustavo A. and Rajbahadur, Gopi Krishnan and Hassan, Ahmed E.},
	month = feb,
	year = {2023},
	note = {Place: USA
Publisher: Kluwer Academic Publishers},
	keywords = {Blockchain, Ethereum, Machine learning, Smart contracts, Model interpretation, Regression model, Transaction processing time},
}

@article{sillaber_laying_2021-1,
	title = {Laying the {Foundation} for {Smart} {Contract} {Development}: {An} {Integrated} {Engineering} {Process} {Model}},
	volume = {19},
	issn = {1617-9846},
	url = {https://doi.org/10.1007/s10257-020-00465-5},
	doi = {10.1007/s10257-020-00465-5},
	abstract = {Smart contracts are seen as the major building blocks for future autonomous blockchain- and Distributed Ledger Technology (DLT)-based applications. Engineering such contracts for trustless, append-only, and decentralized digital ledgers allows mutually distrustful parties to transform legal requirements into immutable and formalized rules. Previous experience shows this to be a challenging task due to demanding socio-technical ecosystems and the specificities of decentralized ledger technology. In this paper, we therefore develop an integrated process model for engineering DLT-based smart contracts that accounts for the specificities of DLT. This model was iteratively refined with the support of industry experts. The model explicitly accounts for the immutability of the trustless, append-only, and decentralized DLT ecosystem, and thereby overcomes certain limitations of traditional software engineering process models. More specifically, it consists of five successive and closely intertwined phases: conceptualization, implementation, approval, execution, and finalization. For each phase, the respective activities, roles, and artifacts are identified and discussed in detail. Applying such a model when engineering smart contracts will help software engineers and developers to better understand and streamline the engineering process of DLTs in general and blockchain in particular. Furthermore, this model serves as a generic framework which will support application development in all fields in which DLT can be applied.},
	number = {3},
	journal = {Inf. Syst. E-Bus. Manag.},
	author = {Sillaber, Christian and Waltl, Bernhard and Treiblmaier, Horst and Gallersdörfer, Ulrich and Felderer, Michael},
	month = sep,
	year = {2021},
	note = {Place: Berlin, Heidelberg
Publisher: Springer-Verlag},
	keywords = {Blockchain, Smart contract, Design science, Development process model, Distributed ledger technology, Software engineering, Survey, Trustless append-only decentralized digital ledgers (TADDL)},
	pages = {863--882},
}

@inproceedings{kochovski_smart_2021,
	address = {Berlin, Heidelberg},
	title = {Smart {Contract} {For}\&nbsp;{Cross}-{Border} {AI} {Model} {Management}},
	isbn = {978-3-030-92915-2},
	url = {https://doi.org/10.1007/978-3-030-92916-9_20},
	doi = {10.1007/978-3-030-92916-9_20},
	abstract = {The new wave of Artificial Intelligence (AI) implementation has made it possible to deploy and (re)use AI models seamlessly. Modern software engineering techniques make it possible to containerize and orchestrate AI services globally, and across the whole computing continuum from the Cloud to the Edge. However, the data processed by AI services may be subject to various privacy and governance constraints, and thus subject to governmental regulations. In this work we present an advanced Smart Contract that is built to achieve regulatory compliance in cross-border AI model sharing between the European Union and the Republic of Korea. Key feature of the Smart Contract are specially developed oracle adapters that are used to achieve fine-grained control on AI model management.},
	booktitle = {Economics of {Grids}, {Clouds}, {Systems}, and {Services}: 18th {International} {Conference}, {GECON} 2021, {Virtual} {Event}, {September} 21–23, 2021, {Proceedings}},
	publisher = {Springer-Verlag},
	author = {Kochovski, Petar and Kum, Seungwoo and Moon, Jaewon and Vujić, Aleks and Stankovski, Vlado},
	year = {2021},
	keywords = {Blockchain, Artificial Intelligence, Cross-border, Data-management},
	pages = {215--222},
}

@article{comuzzi_toward_2022,
	title = {Toward {Quality}-{Aware} {Transaction} {Validation} in {Blockchains}},
	volume = {39},
	issn = {0740-7459},
	url = {https://doi.org/10.1109/MS.2022.3152176},
	doi = {10.1109/MS.2022.3152176},
	abstract = {With blockchain-oriented software engineering, the quality of input data is often overlooked. Controlling the transaction payloads in the transaction validation phase may prevent the poor-data-quality issues that can affect the output of even correct smart contracts.},
	number = {4},
	journal = {IEEE Softw.},
	author = {Comuzzi, Marco and Cappiello, Cinzia and Daniel, Florian and Meroni, Giovanni},
	month = jul,
	year = {2022},
	note = {Place: Washington, DC, USA
Publisher: IEEE Computer Society Press},
	pages = {54--62},
}

@inproceedings{coblenz_smarter_2019,
	series = {{WETSEB} '19},
	title = {Smarter {Smart} {Contract} {Development} {Tools}},
	url = {https://doi.org/10.1109/WETSEB.2019.00013},
	doi = {10.1109/WETSEB.2019.00013},
	abstract = {Much recent work focuses on finding bugs and security vulnerabilities in smart contracts written in existing languages. Although this approach may be helpful, it does not address flaws in the underlying programming language, which can facilitate writing buggy code in the first place. We advocate a re-thinking of the blockchain software engineering tool set, starting with the programming language in which smart contracts are written. In this paper, we propose and justify requirements for a new generation of blockchain software development tools. New tools should (1) consider users' needs as a primary concern; (2) seek to facilitate safe development by detecting relevant classes of serious bugs at compile time; (3) as much as possible, be blockchain-agnostic, given the wide variety of different blockchain platforms available, and leverage the properties that are common among blockchain environments to improve safety and developer effectiveness.},
	booktitle = {Proceedings of the 2nd {International} {Workshop} on {Emerging} {Trends} in {Software} {Engineering} for {Blockchain}},
	publisher = {IEEE Press},
	author = {Coblenz, Michael and Sunshine, Joshua and Aldrich, Jonathan and Myers, Brad A.},
	year = {2019},
	note = {event-place: Montreal, Quebec, Canada},
	keywords = {blockchain, smart contracts, usability of programming languages},
	pages = {48--51},
}

@article{chen_ltmonospacegtsigrecltmonospacegt_2022,
	title = {\&lt;{Monospace}\&gt;{SigRec}\&lt;/{Monospace}\&gt;: {Automatic} {Recovery} of {Function} {Signatures} in {Smart} {Contracts}},
	volume = {48},
	issn = {0098-5589},
	url = {https://doi.org/10.1109/TSE.2021.3078342},
	doi = {10.1109/TSE.2021.3078342},
	abstract = {Millions of smart contracts have been deployed onto Ethereum for providing various services, whose functions can be invoked. For this purpose, the caller needs to know the {\textless}italic{\textgreater}function signature{\textless}/italic{\textgreater} of a callee, which includes its function id and parameter types. Such signatures are {\textless}italic{\textgreater}critical{\textless}/italic{\textgreater} to many applications focusing on smart contracts, e.g., reverse engineering, fuzzing, attack detection, and profiling. Unfortunately, it is challenging to recover the function signatures from contract bytecode, since neither debug information nor type information is present in the bytecode. To address this issue, prior approaches rely on source code, or a collection of known signatures from incomplete databases or incomplete heuristic rules, which, however, are far from adequate and cannot cope with the rapid growth of new contracts. In this paper, we propose a novel solution that leverages how functions are handled by Ethereum virtual machine (EVM) to automatically recover function signatures. In particular, we exploit how smart contracts determine the functions to be invoked to locate and extract function ids, and propose a new approach named {\textless}italic{\textgreater}type-aware{\textless}/italic{\textgreater} symbolic execution (TASE) that utilizes the semantics of EVM operations on parameters to identify the number and the types of parameters. Moreover, we develop {\textless}monospace{\textgreater}SigRec{\textless}/monospace{\textgreater}, a new tool for recovering function signatures from contract bytecode without the need of source code and function signature databases. The extensive experimental results show that {\textless}monospace{\textgreater}SigRec{\textless}/monospace{\textgreater} outperforms all existing tools, achieving an unprecedented 98.7 percent accuracy within 0.074 seconds. We further demonstrate that the recovered function signatures are useful in attack detection, fuzzing and reverse engineering of EVM bytecode.},
	number = {8},
	journal = {IEEE Trans. Softw. Eng.},
	author = {Chen, Ting and Li, Zihao and Luo, Xiapu and Wang, Xiaofeng and Wang, Ting and He, Zheyuan and Fang, Kezhao and Zhang, Yufei and Zhu, Hang and Li, Hongwei and Cheng, Yan and Zhang, Xiaosong},
	month = aug,
	year = {2022},
	note = {Publisher: IEEE Press},
	pages = {3066--3086},
}

@inproceedings{parvizimosaed_subcontracting_2020,
	address = {Berlin, Heidelberg},
	title = {Subcontracting, {Assignment}, and {Substitution} for {Legal} {Contracts} in {Symboleo}},
	isbn = {978-3-030-62521-4},
	url = {https://doi.org/10.1007/978-3-030-62522-1_20},
	doi = {10.1007/978-3-030-62522-1_20},
	abstract = {Legal contracts specify obligations and powers among legal subjects, involve assets, and are subject to quality constraints. Smart contracts are software systems that monitor the execution of contracts to ensure compliance. As a starting point for developing software engineering concepts, tools, and techniques for smart contracts, we have proposed Symboleo, a formal specification language for contracts. The complexity of real-life contracts (e.g., in the construction and transportation industries) requires specification languages to support execution-time operations for contracts, such as subcontracting, assignment, delegation, and substitution. This paper formalizes such concepts by proposing for them a syntax and axiomatic semantics within Symboleo. This formalization makes use of primitive operations that support the transfer or sharing of right, responsibility, and performance among contracting and subcontracting parties. A prototype compliance checking tool for Symboleo has also been created to support monitoring compliance for contracts that include subcontracting aspects. A realistic freight contract specified in Symboleo is provided as an illustrative example for our proposal, and is used for a preliminary evaluation with positive results.},
	booktitle = {Conceptual {Modeling}: 39th {International} {Conference}, {ER} 2020, {Vienna}, {Austria}, {November} 3–6, 2020, {Proceedings}},
	publisher = {Springer-Verlag},
	author = {Parvizimosaed, Alireza and Sharifi, Sepehr and Amyot, Daniel and Logrippo, Luigi and Mylopoulos, John},
	year = {2020},
	note = {event-place: Vienna, Austria},
	keywords = {Smart contracts, Contracts, Formal specification languages, Legal subcontracts, Subcontracting},
	pages = {271--285},
}

@inproceedings{bagozi_blockchain-based_2021,
	address = {Berlin, Heidelberg},
	title = {A {Blockchain}-{Based} {Approach} for {Trust} {Management} in {Collaborative} {Business} {Processes}},
	isbn = {978-3-030-90887-4},
	url = {https://doi.org/10.1007/978-3-030-90888-1_5},
	doi = {10.1007/978-3-030-90888-1_5},
	abstract = {Blockchain is becoming a powerful technology for re-engineering collaborative business processes implemented on Web-based distributed systems, spanning across enterprises. On the blockchain, cross-organisation Web services orchestrated to form collaborative business processes can be transparently deployed as smart contracts. However, proper methods and tools are required to guide the process designer for exploiting the blockchain technology. To preserve data and business logics ownership and to ensure performance/cost tradeoff, only data and process activities requiring transparency and trust among the distributed process actors should be stored as transactions on the blockchain and deployed as smart contracts. In this paper, we propose a methodology and a tool that rely on methodological steps to support blockchain-based trust management in Web-based collaborative business processes originally designed according to a centralised BPM strategy. The methodology and the tool are grounded on a set of criteria, properly enforced with metrics, to identify trust-demanding elements to be considered for their deployment on the blockchain. The approach has been validated on a real case study of food quality certification in the biological domain.},
	booktitle = {Web {Information} {Systems} {Engineering} – {WISE} 2021: 22nd {International} {Conference} on {Web} {Information} {Systems} {Engineering}, {WISE} 2021, {Melbourne}, {VIC}, {Australia}, {October} 26–29, 2021, {Proceedings}, {Part} {I}},
	publisher = {Springer-Verlag},
	author = {Bagozi, Ada and Bianchini, Devis and De Antonellis, Valeria and Garda, Massimiliano and Melchiori, Michele},
	year = {2021},
	note = {event-place: Melbourne, VIC, Australia},
	keywords = {Blockchain, Smart contract, Collaborative processes, BPM},
	pages = {59--67},
}

@inproceedings{li_exploring_2020,
	address = {New York, NY, USA},
	series = {{EASE} '20},
	title = {Exploring the {Challenges} of {Developing} and {Operating} {Consortium} {Blockchains}: {A} {Case} {Study}},
	isbn = {978-1-4503-7731-7},
	url = {https://doi.org/10.1145/3383219.3383276},
	doi = {10.1145/3383219.3383276},
	abstract = {Blockchain and smart contracts are being embraced by more and more industrial practitioners in multiple domains including agriculture, manufacturing, and healthcare. As a distributed, immutable, and partly public ledger, the consortium blockchain demonstrates its potential to enable trustworthy interoperability and collaboration between organizations. However, the mismatch between the unruled software engineering practices and the increased interest of the consortium blockchain technology may pose threats to the quality of systems implemented. To mitigate the possible threats, this study takes the angle of software engineering to systematically understand the challenges and possible solutions in terms of developing and operating a consortium blockchain-based system. For this purpose, we conducted a case study on a typical consortium blockchain-based system and exhaustively collected the data by two rounds in-depth interviews on practitioners of different roles in the case project. Based on the data analysis, eight pairs of challenges and potential solutions were identified, which cover the phases of the development and operation of consortium blockchains. Moreover, we also captured two implications after further analysis of the findings, which worth the special attention of researchers in the near future, i.e. DevOps and microservices for blockchain or smart contracts.},
	booktitle = {Proceedings of the {Evaluation} and {Assessment} in {Software} {Engineering}},
	publisher = {Association for Computing Machinery},
	author = {Li, Shanshan and Xu, Qianwen and Hou, Peiyu and Chen, Xiudi and Wang, Yanze and Zhang, He and Rong, Guoping},
	year = {2020},
	note = {event-place: Trondheim, Norway},
	keywords = {smart contracts, Consortium blockchain, DevOps, microservices},
	pages = {398--404},
}

@book{noauthor_wetseb_2018,
	address = {New York, NY, USA},
	title = {{WETSEB} '18: {Proceedings} of the 1st {International} {Workshop} on {Emerging} {Trends} in {Software} {Engineering} for {Blockchain}},
	isbn = {978-1-4503-5726-5},
	abstract = {Welcome to WETSEB 2018, the 1st International Workshop on Emerging Trends in Software Engineering for Blockchain.The Workshop on Emerging Trends in Software Engineering for Blockchain inherits from the past eight editions of WETSoM (Workshop on Emerging Trends on Software Metrics) the challenges of gathering together researchers interested in emerging topics and trends in software engineering. This year the attention of organizers mainly focuses on a newly emerging field of research in a software technology whose powerful wide-spreading is disruptively invading academy, industry, finance, and media: the Blockchain software technology.Motivations for this workshop are the outstanding increased interest in software communities, in the academy, in the industry, in the finance and the media of the new emerging software technology of the Blockchain. Some observers are even talking of the dawn of a new era, with the potential of reshaping the current financial services technical infrastructure. This workshop aims at bringing the interest of researchers, practitioners, and people from industry to the current issues and new directions and challenges for blockchain-oriented software engineering, and at investigating the need for novel specialized software engineering practices for the Blockchain software sector.This year WETSEB features ten accepted papers, presenting a spectrum of reflections on blockchain application design, the complexity of languages for smart contracts, the use of blockchain for smart contracts, and visions on modeling blockchain-oriented software.},
	publisher = {Association for Computing Machinery},
	year = {2018},
}

@article{corradini_engineering_2022,
	title = {Engineering {Trustable} and {Auditable} {Choreography}-{Based} {Systems} {Using} {Blockchain}},
	volume = {13},
	issn = {2158-656X},
	url = {https://doi.org/10.1145/3505225},
	doi = {10.1145/3505225},
	abstract = {A key challenge in engineering distributed systems consists in the integration into their development of a decentralised infrastructure allowing the system participants to trust each other. In this article, we face such a challenge by proposing a model-driven methodology and a related framework to support the engineering of trustable and auditable systems. The approach is based on choreography diagrams specified in the Business Process Model and Notation standard, describing the interactions that should occur among the distributed components of systems. We support the whole lifecycle of choreographies, from their modelling to their distributed execution and auditing. The framework, based on blockchain technology, is named ChorChain. More specifically, ChorChain takes as input a BPMN choreography model and automatically translates it into a Solidity smart contract. The smart contract permits us to enforce the interactions among the cooperating components as prescribed by the choreography model. By leveraging on the auditability of blockchain, ChorChain also supports the activity of auditors continuously. In such a way, ChorChain enables auditors to get some degree of assurance on what happens simultaneously with, or shortly after, information disclosure. We assess the feasibility and effectiveness of the proposed methodology and framework through experiments conducted on the Rinkeby Ethereum Testnet.},
	number = {3},
	journal = {ACM Trans. Manage. Inf. Syst.},
	author = {Corradini, Flavio and Marcelletti, Alessandro and Morichetta, Andrea and Polini, Andrea and Re, Barbara and Tiezzi, Francesco},
	month = feb,
	year = {2022},
	note = {Place: New York, NY, USA
Publisher: Association for Computing Machinery},
	keywords = {blockchain, BPMN, auditing, choreography, execution, trust},
}

@book{noauthor_wetseb_2019,
	address = {Montreal, Quebec, Canada},
	title = {{WETSEB} '19: {Proceedings} of the 2nd {International} {Workshop} on {Emerging} {Trends} in {Software} {Engineering} for {Blockchain}},
	abstract = {The 2nd Workshop on Emerging Trends in Software Engineering for Blockchain tackles once more the challenges of gathering together researchers interested in emerging topics and trends in software engineering. The Workshop's goal is to gather together practitioners, researchers and people from industry to discuss the progresses on the research and on the practical usage of blockchain technologies and smart contracts, focusing on the application and definition of software engineering principles and practices specific for such software technology, and for the technologies relying on it.},
	publisher = {IEEE Press},
	year = {2019},
}

@book{iyer_building_2018,
	address = {USA},
	edition = {1st},
	title = {Building {Games} with {Ethereum} {Smart} {Contracts}: {Intermediate} {Projects} for {Solidity} {Developers}},
	isbn = {1-4842-3491-X},
	abstract = {Learn how to take your existing knowledge of Ethereum and Solidity to the next level. Hone your development skills and become more familiar with the syntax of the Solidity language by working through well-tested, well-documented intermediate-level sample projects. You will begin by covering the basics of Ethereum, Solidity, and gaming theory. From there, you will move onto sample projects that use smart contract engineering to create fun casino-style games that you can deploy and test on your friends and colleagues with real ether. All games are provably fair and auditable, so that players know the house wont always win!Ideal for any reader with exposure to Ethereum, the techniques this book teaches are applicable to game developers, software engineers, web developers, and cryptocurrency enthusiasts. What You'll Learn Use various features and best practices for smart contract programming in Ethereum and Solidity Develop and deploy games of chance, similar to the kind youd find in a casino Create fun, easy projects with Ethereumlntegrate the Ethereum blockchain into games Who This Book Is For Entry-level programmers with some exposure to Ethereum; game developers, Blockchain and cryptocurrency enthusiasts looking to add Ethereum and Solidity development to their skill set; software engineers and Web developers},
	publisher = {Apress},
	author = {Iyer, Kedar and Dannen, Chris},
	year = {2018},
}

@book{noauthor_wetseb_2022,
	address = {New York, NY, USA},
	title = {{WETSEB} '22: {Proceedings} of the 5th {International} {Workshop} on {Emerging} {Trends} in {Software} {Engineering} for {Blockchain}},
	isbn = {978-1-4503-9331-7},
	abstract = {The 5th Workshop on Emerging Trends in Software Engineering for Blockchain gathers the interests of researchers and practitioneers, from both academia and industry, as well as Ph.D. students working in the field of Blockchain technology, to investigate on and to and tackle the new challenges defined by BOSE. The Workshop's goal is to discuss the progresses made by software engineering on the research and on the practical applications of blockchain technologies and smart contracts, focusing on software engineering principles and practices adopted to deal with such new software technology, and for the technologies relying on it.},
	publisher = {Association for Computing Machinery},
	year = {2022},
}

@inproceedings{bhumichitr_acachain_2020,
	address = {New York, NY, USA},
	series = {{IAIT2020}},
	title = {{AcaChain}: {Academic} {Credential} {Attestation} {System} {Using} {Blockchain}},
	isbn = {978-1-4503-7759-1},
	url = {https://doi.org/10.1145/3406601.3406614},
	doi = {10.1145/3406601.3406614},
	abstract = {Blockchain has been a part of people's interest in the development of various areas such as digital currencies (e.g., Bitcoin), securities, healthcare, record-keeping and much more. Some of the key features of blockchain technology are immutability, decentralization, distributed ledger, consensus, and smart contract. In this paper, we explore how blockchain technology could possibly be utilized for the academic credential attestation in the education domain. This paper aims to re-engineer the academic credential attestation process to reduce both time and resource consumption and human involvement. It also aims to design a unique way for academic data collection to prevent fraud academic credentials. A blockchain-based system for academic credential attestation has been implemented.},
	booktitle = {Proceedings of the 11th {International} {Conference} on {Advances} in {Information} {Technology}},
	publisher = {Association for Computing Machinery},
	author = {Bhumichitr, Kiratijuta and Channarukul, Songsak},
	year = {2020},
	note = {event-place: Bangkok, Thailand},
	keywords = {Blockchain, Hyperledger Fabric, Academic Credential Attestation},
}

@article{bosu_understanding_2019,
	title = {Understanding the {Motivations}, {Challenges} and {Needs} of {Blockchain} {Software} {Developers}: {A} {Survey}},
	volume = {24},
	issn = {1382-3256},
	url = {https://doi.org/10.1007/s10664-019-09708-7},
	doi = {10.1007/s10664-019-09708-7},
	abstract = {The blockchain technology has potential applications in various areas such as smart-contracts, Internet of Things (IoT), land registry, supply chain management, storing medical data, and identity management. Although GitHub currently hosts more than six thousand active Blockchain software (BCS) projects, few software engineering researchers have investigated these projects and their contributors. Although the number of BCS projects is growing rapidly, the motivations, challenges, and needs of BCS developers remain a puzzle. Therefore, the primary objective of this study is to understand the motivations, challenges, and needs of BCS developers and analyze the differences between BCS and non-BCS development. On this goal, we sent an online survey to 1,604 active BCS developers identified by mining the GitHub repositories of 145 popular BCS projects. The survey received 156 responses that met our criteria for analysis. The results suggest that the majority of the BCS developers are experienced in non-BCS development and are primarily motivated by the ideology of creating a decentralized financial system. Although most of the BCS projects are Open Source Software (OSS) projects by nature, more than 93\% of our respondents found BCS development somewhat different from a non-BCS development as BCS projects have higher emphasis on security and reliability than most of the non-BCS projects. Other differences include: higher costs of defects, decentralized and hostile environment, technological complexity, and difficulty in upgrading the software after release. These differences were also the primary sources of challenges to them. Software development tools that are tuned for non-BCS development are inadequate for BCS and the ecosystem needs an array of new or improved tools, such as: customized IDE for BCS development tasks, debuggers for smart-contracts, testing support, easily deployable simulators, and BCS domain specific design notations.},
	number = {4},
	journal = {Empirical Softw. Engg.},
	author = {Bosu, Amiangshu and Iqbal, Anindya and Shahriyar, Rifat and Chakraborty, Partha},
	month = aug,
	year = {2019},
	note = {Place: USA
Publisher: Kluwer Academic Publishers},
	keywords = {Blockchain, Ethereum, Bitcoin, Survey, Cryptocurrency, Challenges, Motivation},
	pages = {2636--2673},
}

@article{mattos_blockchain_2021,
	title = {Blockchain for {Smart} {Grid} {Security}: {Applications}, {Trends}, and {Challenges}},
	volume = {20},
	issn = {1740-8865},
	url = {https://doi.org/10.1504/ijista.2021.121323},
	doi = {10.1504/ijista.2021.121323},
	abstract = {The electric power grid is the world's largest engineering system, and its secure and reliable operation is vital to human activities. The introduction of intelligence in the electrical power grid through smart grids imposes challenges that require new techniques and approaches to provide cyber-physical security. In this article, we discuss the use of blockchain to provide security and reliability to smart grids. Blockchain allows untrusted nodes to correctly and verifiably interact with each other in a distributed peer-to-peer network, without any reliable intermediary. We explore smart contracts, codes resident in blockchain that automate multi-step processes, as a way to automatically trade electric energy. We also discuss initiatives, challenges, and research opportunities of blockchain technologies in the electrical sector.},
	number = {4},
	journal = {Int. J. Intell. Syst. Technol. Appl.},
	author = {Mattos, Diogo Menezes Ferrazani and Medeiros, Dianne Scherly Varela De and Passos, Diego and Fernandes, Natalia Castro and Muchaluat-Saade, Débora Christina and Moraes, Igor Monteiro and Albuquerque, Célio V.N. De},
	month = jan,
	year = {2021},
	note = {Place: Geneva 15, CHE
Publisher: Inderscience Publishers},
	keywords = {blockchain, security, network communication, power grid, smart grid},
	pages = {296--309},
}

@article{ding_architecture_2022,
	title = {Architecture, {Operation}, and {Implementation} for {Blockchain}-{Driven} {Turnkey} {Project} under {I4}.0 {Workshop} {Based} on {RAMI} 4.0},
	volume = {173},
	issn = {0360-8352},
	url = {https://doi.org/10.1016/j.cie.2022.108737},
	doi = {10.1016/j.cie.2022.108737},
	number = {C},
	journal = {Comput. Ind. Eng.},
	author = {Ding, Kai and Fan, Liu qun},
	month = nov,
	year = {2022},
	note = {Place: USA
Publisher: Pergamon Press, Inc.},
	keywords = {Asset Administration Shell, I4.0 component, I4.0 workshop, Open blockchain architecture, RAMI 4.0, Turnkey project},
}

@inproceedings{kontogiannis_software_2021,
	address = {USA},
	series = {{CASCON} '21},
	title = {Software {Techniques} for {Engineering} {Cyber}-{Physical} {Systems}},
	abstract = {Cyber-Physical Systems (CPSs) refer to systems comprising software components, physical components, and social entities which monitor, control, and coordinate processes within a physical environment. CPSs apply to a wide range of mission-critical applications that span from the intelligent management of logistics in complex supply chains, advanced manufacturing systems, and smart contracts, all the way to autonomous systems, and systems that support the smart interactions between humans and machines (M2H), or between machines (M2M). In this respect, the engineering of CPSs goes beyond existing Software Engineering concepts, tools, and techniques because of the very nature of CPSs that spans three realms (cyber, physical, social) and therefore needs to address requirements that span these realms. During the workshop, the participants discussed and debated techniques and directions in six main thematic areas on engineering Cyber-Physical Systems. These thematic areas deal with specification and modeling, DevOps processes for CPSs, data management and analytics, infrastructure and event handling, run-time adaptivity, and finally security, trust, and traceability.},
	booktitle = {Proceedings of the 31st {Annual} {International} {Conference} on {Computer} {Science} and {Software} {Engineering}},
	publisher = {IBM Corp.},
	author = {Kontogiannis, Kostas and Amyot, Daniel and Mylopoulos, John},
	year = {2021},
	note = {event-place: Toronto, Canada},
	keywords = {continuous software engineering, fault-proneness prediction, process metrics, software repositories},
	pages = {289--290},
}

@inproceedings{yan_blockchain-based_2021,
	title = {A {Blockchain}-{Based} {Database} {System} for {Decentralized} {Information} {Management}},
	url = {https://doi.org/10.1109/GLOBECOM46510.2021.9685695},
	doi = {10.1109/GLOBECOM46510.2021.9685695},
	abstract = {Blockchain has attracted wide attention in both industry and academia due to its decentralized and anti-tamper characteristics. To query the blockchain data, all the transactions in the blockchain must be iterated one by one, which is quite inefficient. Existing solutions improve the query efficiency by exporting transactions to external databases, and yet they incur the incompleteness and incorrectness of query results. To avoid above weaknesses, we propose an efficient query method based on the internal blockchain database and apply it to the construction engineering management to solve the problems of information management. In our design, we construct a dual-index based on the B+ tree and the key-value pair through smart contracts, and it supports multiple query operations, such as range query and file-type query. We implement the designed method by simulating the blockchain testbed and the experimental results demonstrate the efficiency of our design.},
	booktitle = {2021 {IEEE} {Global} {Communications} {Conference} ({GLOBECOM})},
	publisher = {IEEE Press},
	author = {Yan, Dekai and Jia, Xiaohua and Shu, Jiangang and Yu, Rutao},
	year = {2021},
	note = {event-place: Madrid, Spain},
	pages = {1--6},
}

@article{basso_use_2022,
	title = {On the {Use} of {Emerging} {Decentralised} {Technologies} for {Supporting} {Software} {Factories} {Coopetition}},
	volume = {69},
	issn = {0952-8091},
	url = {https://doi.org/10.1504/ijcat.2022.126881},
	doi = {10.1504/ijcat.2022.126881},
	abstract = {Besides the recent adoption of outsourcing and open source business models, software factory is still a centralised process. In spite of the advantages of centralisation, it is widely accepted that decentralised systems are better alternatives; i.e., they are more scalable and reliable and more suitable for market sharing. The implementation of decentralised software factories demands solution of several technical challenges that conventional technology cannot solve. Emerging decentralised technologies (e.g., blockchain and smart contracts) can help to solve these challenges. Decentralised technologies are only emerging, consequently, their potential use to support software factories is a new research avenue. To cast some light on this emerging topic, in this article we provide an analysis of some centralised and decentralised architectures and raise research questions that need attention from the perspective of architecture selection. To frame the discussion, we focus our attention on software architectures for Model Driven Engineering, Asset Specifications and Integration Tools, resulting in a characterisation and analysis of possibilities for implementation of heterogeneous blockchain-oriented repositories.},
	number = {2},
	journal = {Int. J. Comput. Appl. Technol.},
	author = {Basso, Fábio Paulo and Kreutz, Diego and Molina-Jiménez, Carlos and Frantz, Rafael Z.},
	month = jan,
	year = {2022},
	note = {Place: Geneva 15, CHE
Publisher: Inderscience Publishers},
	keywords = {blockchain, smart contracts, MDE, MDE as a service, pivot language, software ecosystems, systems of systems},
	pages = {123--138},
}

@inproceedings{bell_advancing_2017,
	series = {{SE4Science} '17},
	title = {Advancing {Open} {Science} with {Version} {Control} and {Blockchains}},
	isbn = {978-1-5386-2791-4},
	abstract = {The scientific community is facing a crisis of reproducibility: confidence in scientific results is damaged by concerns regarding the integrity of experimental data and the analyses applied to that data. Experimental integrity can be compromised inadvertently when researchers overlook some important component of their experimental procedure, or intentionally by researchers or malicious third-parties who are biased towards ensuring a specific outcome of an experiment. The scientific community has pushed for "open science" to add transparency to the experimental process, asking researchers to publicly register their data sets and experimental procedures. We argue that the software engineering community can leverage its expertise in tracking traceability and provenance of source code and its related artifacts to simplify data management for scientists. Moreover, by leveraging smart contract and blockchain technologies, we believe that it is possible for such a system to guarantee end-to-end integrity of scientific data and results while supporting collaborative research.},
	booktitle = {Proceedings of the 12th {International} {Workshop} on {Software} {Engineering} for {Science}},
	publisher = {IEEE Press},
	author = {Bell, Jonathan and LaToza, Thomas D. and Baldmitsi, Foteini and Stavrou, Angelos},
	year = {2017},
	note = {event-place: Buenos Aires, Argentina},
	pages = {13--14},
}

@inproceedings{udokwu_designing_2021,
	address = {New York, NY, USA},
	series = {{ASSE} '21},
	title = {Designing a {Collaborative} {Construction}-{Project} {Platform} on {Blockchain} {Technology} for {Transparency}, {Traceability}, and {Information} {Symmetry}},
	isbn = {978-1-4503-8908-2},
	url = {https://doi.org/10.1145/3456126.3456134},
	doi = {10.1145/3456126.3456134},
	abstract = {The construction industry is a \$6 trillion industry worldwide with a prediction to grow towards \$10,3 trillion by 2023 and constitutes an essential part of the global economy. Nevertheless, the management of the construction effort is still very manual. The construction process from design, to sourcing of material, contract management, and so on, is a convoluted and intransparent process filled with risks the collaborating parties are exposed to. A need exists for management platforms that streamline and automate collaborative construction processes, establish transparency, traceability, and information symmetry between business parties. This paper presents the Construction Project Management (CoPM) platform that is based on blockchain- and smart-contract technologies for enabling peer-to-peer collaboration between construction parties that enhances the flow of information for reducing cost- and time expenditures while improving the quality of service. The CoPM system is based on diligent up-front requirement studies from which we derive a coherent system architecture and set of cooperation protocols. Thereby, the CoPM system overcomes the currently existing fractured value propositions for construction-management systems.CCS Concepts •Software and its engineering•Software creation and management•Designing software},
	booktitle = {2021 2nd {Asia} {Service} {Sciences} and {Software} {Engineering} {Conference}},
	publisher = {Association for Computing Machinery},
	author = {Udokwu, Chibuzor and Norta, Alexander and Wenna, Christoph},
	year = {2021},
	note = {event-place: Macau, Macao},
	keywords = {blockchain, smart contract, business processes, collaboration, Construction, data logistics, inter-organisational, project management},
	pages = {1--9},
}

@inproceedings{chakraborty_understanding_2018,
	address = {New York, NY, USA},
	series = {{ESEM} '18},
	title = {Understanding the {Software} {Development} {Practices} of {Blockchain} {Projects}: {A} {Survey}},
	isbn = {978-1-4503-5823-1},
	url = {https://doi.org/10.1145/3239235.3240298},
	doi = {10.1145/3239235.3240298},
	abstract = {Background: The application of the blockchain technology has shown promises in various areas, such as smart-contracts, Internet of Things, land registry management, identity management, etc. Although Github currently hosts more than three thousand active blockchain software (BCS) projects, a few software engineering research has been conducted on their software engineering practices. Aims: To bridge this gap, we aim to carry out the first formal survey to explore the software engineering practices including requirement analysis, task assignment, testing, and verification of blockchain software projects. Method: We sent an online survey to 1,604 active BCS developers identified via mining the Github repositories of 145 popular BCS projects. The survey received 156 responses that met our criteria for analysis. Results: We found that code review and unit testing are the two most effective software development practices among BCS developers. The results suggest that the requirements of BCS projects are mostly identified and selected by community discussion and project owners which is different from requirement collection of general OSS projects. The results also reveal that the development tasks in BCS projects are primarily assigned on voluntary basis, which is the usual task assignment practice for OSS projects. Conclusions: Our findings indicate that standard software engineering methods including testing and security best practices need to be adapted with more seriousness to address unique characteristics of blockchain and mitigate potential threats.},
	booktitle = {Proceedings of the 12th {ACM}/{IEEE} {International} {Symposium} on {Empirical} {Software} {Engineering} and {Measurement}},
	publisher = {Association for Computing Machinery},
	author = {Chakraborty, Partha and Shahriyar, Rifat and Iqbal, Anindya and Bosu, Amiangshu},
	year = {2018},
	note = {event-place: Oulu, Finland},
	keywords = {blockchain, ethereum, cryptocurrency, bitcoin, survey},
}

@inproceedings{six_using_2022,
	address = {New York, NY, USA},
	series = {{SPLC} '22},
	title = {Using {Software} {Product} {Lines} to {Create} {Blockchain} {Products}: {Application} to {Supply} {Chain} {Traceability}},
	isbn = {978-1-4503-9443-7},
	url = {https://doi.org/10.1145/3546932.3547001},
	doi = {10.1145/3546932.3547001},
	abstract = {In recent years, blockchain has been growing rapidly from a niche technology to a promising solution for many sectors, due to its unique properties that empower the design of innovative applications. Nevertheless, the development of blockchain applications is still a challenge. Due to the technological novelty, only a few developers are familiar with blockchain technologies and smart contracts. Others might face a steep learning curve or difficulties to reuse existing code to build blockchain applications. This study proposes a novel approach to tackle these issues, through software product line engineering. To support the approach, a web platform to configure and generate a blockchain application for on-chain traceability is introduced. First, a feature model has been designed to model core features of the chosen domain, based on the existing literature. Then, a configurator has been implemented to support the feature selection phase. Finally, a generator is able to ingest such configurations to generate on-the-shelf blockchain products. The generalizability of the contribution is validated by reproducing on-chain traceability applications proposed in the literature by using the platform. This work provides the first evidence that the implementation of blockchain applications using software product lines enhances the quality of produced applications and reduces the time to market.},
	booktitle = {Proceedings of the 26th {ACM} {International} {Systems} and {Software} {Product} {Line} {Conference} - {Volume} {A}},
	publisher = {Association for Computing Machinery},
	author = {Six, Nicolas and Herbaut, Nicolas and Lopez-Herrejon, Roberto Erick and Salinesi, Camille},
	year = {2022},
	note = {event-place: Graz, Austria},
	keywords = {blockchain, code generation, software product line},
	pages = {97--107},
}

@inproceedings{marchesi_agile_2018,
	address = {New York, NY, USA},
	series = {{CEE}-{SECR} '18},
	title = {An {Agile} {Software} {Engineering} {Method} to {Design} {Blockchain} {Applications}},
	isbn = {978-1-4503-6176-7},
	url = {https://doi.org/10.1145/3290621.3290627},
	doi = {10.1145/3290621.3290627},
	abstract = {Cryptocurrencies and their foundation technology, the Blockchain, are reshaping finance and economics, allowing a decentralized approach enabling trusted applications with no trusted counterpart. More recently, the Blockchain and the programs running on it, called Smart Contracts, are also finding more and more applications in all fields requiring trust and sound certifications. Some people have come to the point of saying that the "Blockchain revolution" can be compared to that of the Internet and the Web in their early days. As a result, all the software development revolving around the Blockchain technology is growing at a staggering rate. The feeling of many software engineers about such huge interest in Blockchain technologies is that of unruled and hurried software development, a sort of competition on a first-come-first-served basis which does not assure neither software quality, nor that the basic concepts of software engineering are taken into account.This paper tries to cope with this issue, proposing a software development process to gather the requirement, analyze, design, develop, test and deploy Blockchain applications. The process is based on several Agile practices, such as User Stories and iterative and incremental development based on them. However, it makes also use of more formal notations, such as some UML diagrams describing the design of the system, with additions to represent specific concepts found in Blockchain development. The method is described in good detail, and an example is given to show how it works.},
	booktitle = {Proceedings of the 14th {Central} and {Eastern} {European} {Software} {Engineering} {Conference} {Russia}},
	publisher = {Association for Computing Machinery},
	author = {Marchesi, Michele and Marchesi, Lodovica and Tonelli, Roberto},
	year = {2018},
	note = {event-place: Moscow, Russian Federation},
	keywords = {Blockchain, Smart Contracts, UML, Blockchain-oriented software engineering, dApp design},
}

@inproceedings{corradini_engineering_2020,
	address = {New York, NY, USA},
	series = {{SAC} '20},
	title = {Engineering {Trustable} {Choreography}-{Based} {Systems} {Using} {Blockchain}},
	isbn = {978-1-4503-6866-7},
	url = {https://doi.org/10.1145/3341105.3373988},
	doi = {10.1145/3341105.3373988},
	abstract = {The adoption of model-driven engineering methodologies contributes to reduce the complexity of developing distributed systems. A key point to master such complexity is the use of modelling languages, such as the BPMN standard. This permits to specify choreography diagrams describing, from a global point of view, the interactions that should occur among distributed components in order to reach given goals. Even though BPMN choreographies are promising to increase business possibilities, their concrete adoption has been challenging and faced complex hurdles. On the one hand, there is a lack of concrete support to the different phases of the choreography life-cycle, especially in relation to the choreography execution. Another obstacle consists in the lack of distributed infrastructures allowing the participants involved in the cooperation to trust each other, and in particular to get enough guarantees that all of them will behave as prescribed by the choreography model.In this paper, we face such challenges by proposing a methodology and a related model-driven framework, named ChorChain, that are based on the blockchain technology. We provide support to the whole life-cycle of choreographies, from their modelling to their distributed execution. More specifically, ChorChain takes as input a BPMN choreography model and automatically translates it in a Solidity smart contract. Such a contract will permit to enforce the interactions among the cooperating participants, so to satisfy the prescriptions reported in the starting model. The methodology and the framework have been evaluated through experiments conducted on the Rinkeby Ethereum Testnet.},
	booktitle = {Proceedings of the 35th {Annual} {ACM} {Symposium} on {Applied} {Computing}},
	publisher = {Association for Computing Machinery},
	author = {Corradini, F. and Marcelletti, A. and Morichetta, A. and Polini, A. and Re, B. and Tiezzi, F.},
	year = {2020},
	note = {event-place: Brno, Czech Republic},
	pages = {1470--1479},
}

@article{chen_veracity_2022,
	title = {Veracity: {Declarative} {Multicore} {Programming} with {Commutativity}},
	volume = {6},
	url = {https://doi.org/10.1145/3563349},
	doi = {10.1145/3563349},
	abstract = {There is an ongoing effort to provide programming abstractions that ease the burden of exploiting multicore hardware. Many programming abstractions (e.g., concurrent objects, transactional memory, etc.) simplify matters, but still involve intricate engineering. We argue that some difficulty of multicore programming can be meliorated through a declarative programming style in which programmers directly express the independence of fragments of sequential programs. In our proposed paradigm, programmers write programs in a familiar, sequential manner, with the added ability to explicitly express the conditions under which code fragments sequentially commute. Putting such commutativity conditions into source code offers a new entry point for a compiler to exploit the known connection between commutativity and parallelism. We give a semantics for the programmer’s sequential perspective and, under a correctness condition, find that a compiler-transformed parallel execution is equivalent to the sequential semantics. Serializability/linearizability are not the right fit for this condition, so we introduce scoped serializability and show how it can be enforced with lock synthesis techniques. We next describe a technique for automatically verifying and synthesizing commute conditions via a new reduction from our commute blocks to logical specifications, upon which symbolic commutativity reasoning can be performed. We implemented our work in a new language called Veracity, implemented in Multicore OCaml. We show that commutativity conditions can be automatically generated across a variety of new benchmark programs, confirm the expectation that concurrency speedups can be seen as the computation increases, and apply our work to a small in-memory filesystem and an adaptation of a crowdfund blockchain smart contract.},
	number = {OOPSLA2},
	journal = {Proc. ACM Program. Lang.},
	author = {Chen, Adam and Fathololumi, Parisa and Koskinen, Eric and Pincus, Jared},
	month = oct,
	year = {2022},
	note = {Place: New York, NY, USA
Publisher: Association for Computing Machinery},
	keywords = {commutativity analysis, commutativity conditions, parallelization, pre-condition synthesis, serializability},
}

@article{halgamuge_estimation_2022,
	title = {Estimation of the {Success} {Probability} of a {Malicious} {Attacker} on {Blockchain}-{Based} {Edge} {Network}},
	volume = {219},
	issn = {1389-1286},
	url = {https://doi.org/10.1016/j.comnet.2022.109402},
	doi = {10.1016/j.comnet.2022.109402},
	number = {C},
	journal = {Comput. Netw.},
	author = {Halgamuge, Malka N.},
	month = dec,
	year = {2022},
	note = {Place: USA
Publisher: Elsevier North-Holland, Inc.},
	keywords = {Blockchain, Internet of Things (IoT), Cyberattacks, Data privacy, Malicious attack, Smart objects},
}

@article{pacheco_is_2022,
	title = {Is {My} {Transaction} {Done} yet? {An} {Empirical} {Study} of {Transaction} {Processing} {Times} in the {Ethereum} {Blockchain} {Platform}},
	issn = {1049-331X},
	url = {https://doi.org/10.1145/3549542},
	doi = {10.1145/3549542},
	abstract = {Ethereum is one of the most popular platforms for the development of blockchain-powered applications. These applications are known as ÐApps. When engineering ÐApps, developers need to translate requests captured in the front-end of their application into one or more smart contract transactions. Developers need to pay for these transactions and, the more they pay (i.e., the higher the gas price), the faster the transaction is likely to be processed. Developing cost-effective ÐApps is far from trivial, as developers need to optimize the balance between cost (transaction fees) and user experience (transaction processing times). Online services have been developed to provide transaction issuers (e.g., ÐApp developers) with an estimate of how long transactions will take to be processed given a certain gas price. These estimation services are crucial in the Ethereum domain and several popular wallets such as Metamask rely on them. However, despite their key role, their accuracy has not been empirically investigated so far. In this paper, we quantify the transaction processing times in Ethereum, investigate the relationship between processing times and gas prices, and determine the accuracy of state-of-the-practice estimation services. Our results indicate that transactions are processed in a median of 57s and that 90\% of the transactions are processed within 8m. We also show that higher gas prices result in faster transaction processing times with diminishing returns. In particular, we observe no practical difference in processing time between expensive and very expensive transactions. With regards to the accuracy of processing time estimation services, we observe that they are equivalent. However, when stratifying transactions by gas prices, we observe that Etherscan’s Gas Tracker is the most accurate estimation service for very cheap and cheap transaction. EthGasStation’s Gas Price API, in turn, is the most accurate estimation service for regular, expensive, and very expensive transactions. In a post-hoc study, we design a simple linear regression model with only one feature that outperforms the Gas Tracker for very cheap and cheap transactions and that performs as accurately as the EthGasStation model for the remaining categories. Based on our findings, ÐApp developers can make more informed decisions concerning the choice of the gas price of their application-issued transactions.},
	journal = {ACM Trans. Softw. Eng. Methodol.},
	author = {Pacheco, Michael and Oliva, Gustavo A. and Rajbahadur, Gopi Krishnan and Hassan, Ahmed E.},
	month = jul,
	year = {2022},
	note = {Place: New York, NY, USA
Publisher: Association for Computing Machinery},
	keywords = {Blockchain, Ethereum, Decentralized Applications (DApps), Transaction Processing Time},
	annote = {Just Accepted},
}

@phdthesis{javaid_design_2021,
	type = {{PhD} {Thesis}},
	title = {Design and {Analysis} of {Blockchain} {Based} {Cyber} {Security} {Solutions} for {Cyber} {Physical} {Systems}},
	abstract = {Cyber Physical Systems (CPSs) integrate physical, computational, and software components to exhibit distinct behavior modalities and enable interactions with each other that vary with context. In recent years, CPSs have become increasingly popular to engineer different infrastructures such as transport systems and smart grids. However, due to their complex nature, one major issue is to ensure security against a wide range of cyber attacks. Security is a challenging aspect that needs due diligence during CPS design and development phases. This thesis aims to address this by investigating different CPS security threats and proposing blockchain based specific security measures.This thesis first discusses the issue of access control in Internet of Things (IoT). As IoT devices are typically resource constrained, it makes them vulnerable to a wide range of attacks that are usually executed via exploits in their access control strategies. This allows rogue devices to gain unauthorized access and also results in massive loss of system resources. This is addressed in this thesis by a resource preserving access control scheme that uses blockchain and smart contracts. Blockchain with its Public Key Infrastructure (PKI) features is used for device registration, whereas the contracts enforce access policies with a resource assignment mechanism. With this scheme, rogue device mitigation and preservation of system resources can be guaranteed in IoT networks. Next, the issue of scalability is investigated in Industrial IoT (IIoT). IIoT aims to promote businesses and industries by realizing intelligent industrialization. However, the constantly surging data volumes that are generated by IIoT environments present system scalability issues.This is addressed by a blockchain based architecture that uses a dynamic Proof of Work (dPoW) consensus together with a checkpoint mechanism. dPoW functions with different mining difficulty levels, whereas the checkpoint defines an alternative mechanism to generate the next block hash in the blockchain. This combination allows the architecture to efficiently scale with increase in communication traffic of IIoT devices.Next, the issue of trust management is studied in Internet of Vehicles (IoV). IoV aims to provide new innovative services for different modes of transport and enables vehicles to broadcast messages to improve traffic efficiency. However, due to non-trusted environments, it is difficult for vehicles to evaluate the credibility of the messages they receive. This is addressed by integrating blockchain with Physical Unclonable Functions (PUFs). The dPoW consensus and PKI features of blockchain are used for vehicle registrations, while PUFs are used to establish a hardware root-of-trust for vehicles. With a hardware primitive based blockchain, trust management can be effectively established in vehicular networks.Lastly, the security of blockchain is evaluated to identify weak private keys. A blockchain records transactions by verifying their authenticity via asymmetric cryptography, i.e., private-public key pairs are used to sign transactions and prove ownership. Typically, a blockchain uses 256- bit private keys and thus, the probability of collision for a private key in the blockchain is 1 in 2 256, which is a statistical improbability. This is challenged in the thesis by developing an alternate way for generating private keys via a cheat sheet and presenting how 670 private keys were discovered in the Ethereum blockchain. The cheat sheet offers insights to effectively span the 256-bit keyspace, while the discovered keys highlight potential vulnerabilities in blockchain implementations.},
	school = {National University of Singapore (Singapore)},
	author = {Javaid, Uzair},
	year = {2021},
	note = {ISBN: 9798352687147},
	annote = {AAI29353039},
}

@phdthesis{lobo_outdoor_2022,
	address = {USA},
	type = {{PhD} {Thesis}},
	title = {Outdoor {Operations} of {Multiple} {Quadrotors} in {Windy} {Environment}},
	abstract = {Coordinated multiple small unmanned aerial vehicles (sUAVs) offer several advantages over a single sUAV platform. These advantages include improved task efficiency, reduced task completion time, improved fault tolerance, and higher task flexibility. However, their deployment in an outdoor environment is challenging due to the presence of wind gusts. The coordinated motion of a multi-sUAV system in the presence of wind disturbances is a challenging problem when considering collision avoidance (safety), scalability, and communication connectivity. Performing wind-agnostic motion planning for sUAVs may produce a sizeable cross-track error if the wind on the planned route leads to actuator saturation. In a multi-sUAV system, each sUAV has to locally counter the wind disturbance while maintaining the safety of the system. Such continuous manipulation of the control effort for multiple sUAVs under uncertain environmental conditions is computationally taxing and can lead to reduced efficiency and safety concerns. Additionally, modern day sUAV systems are susceptible to cyberattacks due to their use of commercial wireless communication infrastructure.This dissertation aims to address these multi-faceted challenges related to the operation of outdoor rotor-based multi-sUAV systems. Firstly, a comprehensive review of four representative techniques to measure and estimate wind speed and direction using rotor-based sUAVs is discussed. After developing a clear understanding of the role wind gusts play in quadrotor motion, two decentralized motion planners for a multi-quadrotor system are implemented and experimentally evaluated in the presence of wind disturbances. The first planner is rooted in the reinforcement learning (RL) technique of state-action-reward-state-action (SARSA) to provide generalized path plans in the presence of wind disturbances. While this planner provides feasible trajectories for the quadrotors, it does not provide guarantees of collision avoidance. The second planner implements a receding horizon (RH) mixed-integer nonlinear programming (MINLP) model that is integrated with control barrier functions (CBFs) to guarantee collision-free transit of the multiple quadrotors in the presence of wind disturbances. Finally, a novel communication protocol using Ethereum blockchain-based smart contracts is presented to address the challenge of secure wireless communication.The U.S. sUAV market is expected to be worth \$92 Billion by 2030. The Association for Unmanned Vehicle Systems International (AUVSI) noted in its seminal economic report that UAVs would be responsible for creating 100,000 jobs by 2025 in the U.S. The rapid proliferation of drone technology in various applications has led to an increasing need for professionals skilled in sUAV piloting, designing, fabricating, repairing, and programming. Engineering educators have recognized this demand for certified sUAV professionals.This dissertation aims to address this growing sUAV-market need by evaluating two active learning-based instructional approaches designed for undergraduate sUAV education. The two approaches leverages the interactive-constructive-active-passive (ICAP) framework of engagement and explores the use of Competition based Learning (CBL) and Project based Learning (PBL). The CBL approach is implemented through a drone building and piloting competition that featured 97 students from undergraduate and graduate programs at NJIT. The competition focused on 1) drone assembly, testing, and validation using commercial off-the-shelf (COTS) parts, 2) simulation of drone flight missions, and 3) manual and semi-autonomous drone piloting were implemented. The effective student learning experience from this competition served as the basis of a new undergraduate course on drone science fundamentals at NJIT. This undergraduate course focused on the three foundational pillars of drone careers: 1) drone programming using Python, 2) designing and fabricating drones using Computer-Aided Design (CAD) and rapid prototyping, and 3) the US Federal Aviation Administration (FAA) Part 107 Commercial small Unmanned Aerial Vehicles (sUAVs) pilot test. Multiple assessment methods are applied to examine the students' gains in sUAV skills and knowledge and student attitudes towards an active learning-based approach for sUAV education. The use of active learning techniques to address these challenges lead to meaningful student engagement and positive gains in the learning outcomes as indicated by quantitative and qualitative assessments.},
	school = {New Jersey Institute of Technology},
	author = {Lobo, Deepan and Moshe, Kam,  and Mengchu, Zhou,  and Cong, Wang,  and Prateek, Shekhar, },
	year = {2022},
	note = {ISBN: 9798841745655},
	annote = {AAI28772728},
}
