
@inproceedings{hu_distributed_2022,
	address = {New York, NY, USA},
	series = {{BIOTC} '22},
	title = {Distributed {Random} {Number} {Generation} {Method} on {Smart} {Contracts}},
	isbn = {978-1-4503-9662-2},
	url = {https://doi.org/10.1145/3559795.3559796},
	doi = {10.1145/3559795.3559796},
	abstract = {We propose N-choice game (NCG), a decentralized pseudo-random number generation method that can be executed on smart contracts. Of the M participants, one is a dealer, and the rest are players, each with a different role. Each participant randomly chooses one value between 0 and N − 1 and receives a score determined by the NCG rule. The amount of reward each participant receives is determined by the score. The values chosen by the participants are combined and hashed into a pseudo-random number. The NCG framework is designed to achieve the following three goals: (1) Incentivize participants to provide random choices, (2) Evaluate the level of randomness in the decentralized environment, and (3) Establish high performance. We implement the NCG framework in Solidity and evaluate its performance. Our extensive experiments revealed that unless more than 90\% of NCG players collide, the generated random numbers have high randomness that can pass the NIST randomness test. The experiments also demonstrated that the throughput of random number generation in NCG was 129 times faster than in the existing framework, Random Bit Generator\&nbsp;[2].},
	booktitle = {Proceedings of the 2022 4th {Blockchain} and {Internet} of {Things} {Conference}},
	publisher = {Association for Computing Machinery},
	author = {Hu, Xing and Gao, Zhipeng and Xia, Xin and Lo, David and Yang, Xiaohu and Sako, Kentaro and Matsuo, Shinichiro and Mori, Tatsuya},
	year = {2022},
	note = {event-place: Tokyo, China},
	keywords = {blockchain, distributed random number generators, Smart Contracts},
	pages = {1--10},
}

@inproceedings{santiago_framework_2021,
	address = {New York, NY, USA},
	series = {{SBES} '21},
	title = {A {Framework} to {Generate} {Smart} {Contracts} {On} the {Fly}},
	isbn = {978-1-4503-9061-3},
	url = {https://doi.org/10.1145/3474624.3477068},
	doi = {10.1145/3474624.3477068},
	abstract = {Blockchain is a disruptive technology that offers a secure decentralized network, and allows for direct transactions between distributed entities, without the need for a trusted third party. Smart contracts are executable codes hosted on the blockchain and enable the implementation of several decentralized applications, in different domains. However, due to the complexity of contract construction, it is necessary to seek ways to facilitate and make this innovative development process robust. This paper presents Gifflar, a framework for generating smart contract code on the fly, in such a way that it allows a system to write, compile and implement blockchain contracts with a decentralized application still running. Gifflar is structured in components that implement design patterns to better define the responsibility of each one of the parts and exports a simple interaction module for contract modeling in JSON and automatic code writing using the TypeScript language. As far as we know, this framework is one of the first to generate contracts dynamically at run time. Thus, the work contributes to the state of the art by addressing a new paradigm, where systems can act as smart contract developers.},
	booktitle = {Proceedings of the {XXXV} {Brazilian} {Symposium} on {Software} {Engineering}},
	publisher = {Association for Computing Machinery},
	author = {Santiago, Levy and Abijaude, Jauberth and Greve, Fabíola},
	year = {2021},
	note = {event-place: Joinville, Brazil},
	keywords = {Blockchain, Code Generation, Framework, Smart Contract},
	pages = {410--415},
}

@inproceedings{soni_generating_2022,
	address = {Berlin, Heidelberg},
	title = {Generating {Smart} {Contracts} for {Blockchain}-{Based} {Resource}-{Exchange} {Systems}},
	isbn = {978-3-031-21046-4},
	url = {https://doi.org/10.1007/978-3-031-21047-1_9},
	doi = {10.1007/978-3-031-21047-1_9},
	abstract = {Blockchain technology allows to store data in a secure and decentralized manner. The combination of blockchains with smart contracts allows for a novel range of applications. However, the creation of such applications requires IT skills, which introduces a burden for businesspeople that would like to incorporate blockchains combined with smart contracts in their business processes. To overcome this issue in the context of resource exchange across organizations and customers, we developed a framework that allows businesspeople to generate blockchain applications for such resource exchanges, without requiring any programming or blockchain knowledge. In this paper, we elaborate on the module that generates the smart contracts necessary to implement the specifications of use cases. In the current implementation, smart contracts are generated for Solidity, which is a smart contract language supported by many blockchain implementations, but this is not a limitation of the approach.},
	booktitle = {Information {Integration} and {Web} {Intelligence}: 24th {International} {Conference}, {IiWAS} 2022, {Virtual} {Event}, {November} 28–30, 2022, {Proceedings}},
	publisher = {Springer-Verlag},
	author = {Soni, Kushal and De Troyer, Olga},
	year = {2022},
	keywords = {Blockchain, Business people, Generic framework, Resource exchange, Smart contract generation},
	pages = {104--109},
}

@article{tateishi_automatic_2019,
	title = {Automatic {Smart} {Contract} {Generation} {Using} {Controlled} {Natural} {Language} and {Template}},
	volume = {63},
	issn = {0018-8646},
	url = {https://doi.org/10.1147/JRD.2019.2900643},
	doi = {10.1147/JRD.2019.2900643},
	abstract = {Smart contracts, which are widely recognized as key components of blockchain technology, enable automatic execution of agreements. Since each smart contract is a computer program that autonomously runs on a blockchain platform, their development requires much effort and care compared with the development of more common programs. In this paper, we propose a technique to automatically generate a smart contract from a human-understandable contract document that is created using a document template and a controlled natural language (CNL). The automation is based on a mapping from the document template and the CNL to a formal model that can define the terms and conditions in a contract including temporal constraints and procedures. The formal model is then translated into an executable smart contract. We implemented a toolchain that generates smart contracts of Hyperledger Fabric from template-based contract documents via a formal model. We then evaluated the feasibility of our approach through case studies of two types of real-world contracts in different domains.},
	number = {2–3},
	journal = {IBM J. Res. Dev.},
	author = {Tateishi, T. and Yoshihama, S. and Sato, N. and Saito, S.},
	month = mar,
	year = {2019},
	note = {Place: USA
Publisher: IBM Corp.},
}

@article{shi_machine_2023,
	title = {Machine {Translation}-{Based} {Fine}-{Grained} {Comments} {Generation} for {Solidity} {Smart} {Contracts}},
	volume = {153},
	issn = {0950-5849},
	url = {https://doi.org/10.1016/j.infsof.2022.107065},
	doi = {10.1016/j.infsof.2022.107065},
	number = {C},
	journal = {Inf. Softw. Technol.},
	author = {Shi, Chaochen and Xiang, Yong and Yu, Jiangshan and Sood, Keshav and Gao, Longxiang},
	month = jan,
	year = {2023},
	note = {Place: USA
Publisher: Butterworth-Heinemann},
	keywords = {Automatic comments generation, Machine translation, Reinforcement learning, Smart contract, Solidity},
}

@inproceedings{su_effectively_2023,
	address = {New York, NY, USA},
	series = {{ASE} '22},
	title = {Effectively {Generating} {Vulnerable} {Transaction} {Sequences} in {Smart} {Contracts} with {Reinforcement} {Learning}-{Guided} {Fuzzing}},
	isbn = {978-1-4503-9475-8},
	url = {https://doi.org/10.1145/3551349.3560429},
	doi = {10.1145/3551349.3560429},
	abstract = {As computer programs run on top of blockchain, smart contracts have proliferated a myriad of decentralized applications while bringing security vulnerabilities, which may cause huge financial losses. Thus, it is crucial and urgent to detect the vulnerabilities of smart contracts. However, existing fuzzers for smart contracts are still inefficient to detect sophisticated vulnerabilities that require specific vulnerable transaction sequences to trigger. To address this challenge, we propose a novel vulnerability-guided fuzzer based on reinforcement learning, namely RLF, for generating vulnerable transaction sequences to detect such sophisticated vulnerabilities in smart contracts. In particular, we firstly model the process of fuzzing smart contracts as a Markov decision process to construct our reinforcement learning framework. We then creatively design an appropriate reward with consideration of both vulnerability and code coverage so that it can effectively guide our fuzzer to generate specific transaction sequences to reveal vulnerabilities, especially for the vulnerabilities related to multiple functions. We conduct extensive experiments to evaluate RLF’s performance. The experimental results demonstrate that our RLF outperforms state-of-the-art vulnerability-detection tools (e.g., detecting 8\%-69\% more vulnerabilities within 30 minutes).},
	booktitle = {Proceedings of the 37th {IEEE}/{ACM} {International} {Conference} on {Automated} {Software} {Engineering}},
	publisher = {Association for Computing Machinery},
	author = {Su, Jianzhong and Dai, Hong-Ning and Zhao, Lingjun and Zheng, Zibin and Luo, Xiapu},
	year = {2023},
	note = {event-place: Rochester, MI, USA},
	keywords = {Reinforcement learning, Smart contract, Fuzzing},
}

@inproceedings{monteiro_combining_2020,
	address = {Berlin, Heidelberg},
	title = {Combining {Natural} {Language} {Processing} and {Blockchain} for {Smart} {Contract} {Generation} in the {Accounting} and {Legal} {Field}},
	isbn = {978-3-030-68448-8},
	url = {https://doi.org/10.1007/978-3-030-68449-5_31},
	doi = {10.1007/978-3-030-68449-5_31},
	abstract = {The growth of legislation and the demand for systems for automation of tasks has increased the demand for software development, so that we have greater assertiveness and speed in the reading and interpretation of laws in legal activities. Currently, written legislation must be interpreted by an analyst to be encoded in computer programs later, which is often error-prone. In this context, with the popularization of cryptocurrencies, interest was aroused for the use of Blockchain in the legal area. In particular, the use of smart contracts can house business rules in legislation and automate block control. Still, fast, quality code writing can benefit from the use of natural language processing (NLP) to help developers. After revisiting the state-of-the-art, it is perceived that there are no works that unite intelligent contracts and natural language processing in the context of the analysis of legislation. This work presents a computational model to generate intelligent codes from the analysis of legislation, using NLP and Blockchain for such a procedure. The practical and scientific contribution is pertinent for the law to be interpreted in the correct way and in accordance with the latest updates. Also, a prototype and initial tests are presented, which are encouraging and show the relevance of the research theme.},
	booktitle = {Intelligent {Human} {Computer} {Interaction}: 12th {International} {Conference}, {IHCI} 2020, {Daegu}, {South} {Korea}, {November} 24–26, 2020, {Proceedings}, {Part} {I}},
	publisher = {Springer-Verlag},
	author = {Monteiro, Emiliano and Righi, Rodrigo and Kunst, Rafael and da Costa, Cristiano and Singh, Dhananjay},
	year = {2020},
	note = {event-place: Daegu, Korea (Republic of)},
	keywords = {Blockchain, Smart contract, NLP},
	pages = {307--321},
}

@inproceedings{santiago_gifflar_2021,
	address = {USA},
	series = {{CASCON} '21},
	title = {Gifflar: {A} {Framework} to {Generate} {Smart} {Contracts} on the {Fly}},
	abstract = {Blockchain is a disruptive technology that offers a secure decentralized network, allowing for direct transactions between distributed entities, without the need for a trusted third party. Smart contracts are executable codes hosted on the blockchain which enables the implementation of several decentralized applications, in different domains. Due to the complexity of the contract's construction, it is necessary to seek ways to facilitate and make this innovative development process robust. This paper presents Gifflar, a framework for generating smart contract code on the fly, in such a way that it allows a system to write, compile and implement blockchain contracts with a decentralized application still running. The framework is structured in components that implement design patterns to better define the responsibility of each one of the parts and exports a simple interaction module for modeling contracts in JSON and automatic code writing using the TypeScript language. As far as we know, this framework is one of the first to allow contract code generation dynamically at run time. Thus, the work contributes to the state of the art by addressing a new paradigm, where systems can act as smart contract developers.},
	booktitle = {Proceedings of the 31st {Annual} {International} {Conference} on {Computer} {Science} and {Software} {Engineering}},
	publisher = {IBM Corp.},
	author = {Santiago, Levy and Abijaude, Jauberth Weyll and Greve, Fabíola},
	year = {2021},
	note = {event-place: Toronto, Canada},
	keywords = {blockchain, code generation, framework, smart contract},
	pages = {214--219},
}

@inproceedings{olsthoorn_syntest-solidity_2022,
	address = {New York, NY, USA},
	series = {{ICSE} '22},
	title = {{SynTest}-{Solidity}: {Automated} {Test} {Case} {Generation} and {Fuzzing} for {Smart} {Contracts}},
	isbn = {978-1-4503-9223-5},
	url = {https://doi.org/10.1145/3510454.3516869},
	doi = {10.1145/3510454.3516869},
	abstract = {Ethereum is the largest and most prominent smart contract platform. One key property of Ethereum is that once a contract is deployed, it can not be updated anymore. This increases the importance of thoroughly testing the behavior and constraints of the smart contract before deployment. Existing approaches in related work either do not scale or are only focused on finding crashing inputs. In this tool demo, we introduce SynTest-Solidity, an automated test case generation and fuzzing framework for Solidity. SynTest-Solidity implements various metaheuristic search algorithms, including random search (traditional fuzzing) and genetic algorithms (i.e., NSGA-II, MOSA, and DynaMOSA). Finally, we performed a preliminary empirical study to assess the effectiveness of SynTest-Solidity in testing Solidity smart contracts.},
	booktitle = {Proceedings of the {ACM}/{IEEE} 44th {International} {Conference} on {Software} {Engineering}: {Companion} {Proceedings}},
	publisher = {Association for Computing Machinery},
	author = {Olsthoorn, Mitchell and Stallenberg, Dimitri and van Deursen, Arie and Panichella, Annibale},
	year = {2022},
	note = {event-place: Pittsburgh, Pennsylvania},
	keywords = {fuzzing, search-based software testing, smart contracts, software testing, test case generation},
	pages = {202--206},
}

@article{yang_ccgir_2022,
	title = {{CCGIR}: {Information} {Retrieval}-{Based} {Code} {Comment} {Generation} {Method} for {Smart} {Contracts}},
	volume = {237},
	issn = {0950-7051},
	url = {https://doi.org/10.1016/j.knosys.2021.107858},
	doi = {10.1016/j.knosys.2021.107858},
	number = {C},
	journal = {Know.-Based Syst.},
	author = {Yang, Guang and Liu, Ke and Chen, Xiang and Zhou, Yanlin and Yu, Chi and Lin, Hao},
	month = feb,
	year = {2022},
	note = {Place: NLD
Publisher: Elsevier Science Publishers B. V.},
	keywords = {Smart contract, Code comment generation, Empirical study, Human study, Information retrieval},
}

@inproceedings{zhang_adf-ga_2020,
	address = {New York, NY, USA},
	series = {{ICSEW}'20},
	title = {{ADF}-{GA}: {Data} {Flow} {Criterion} {Based} {Test} {Case} {Generation} for {Ethereum} {Smart} {Contracts}},
	isbn = {978-1-4503-7963-2},
	url = {https://doi.org/10.1145/3387940.3391499},
	doi = {10.1145/3387940.3391499},
	abstract = {Testing is an important technique to improve the quality of Ethereum smart contract programs. However, current work on testing smart contract only focus on static problems of smart contract programs. A data flow oriented test case generation approach for dynamic testing of smart contract programs is still missing. To address this problem, this paper proposes a novel test case generation approach, called ADF-GA (All-uses Data Flow criterion based test case generation using Genetic Algorithm), for Solidity based Ethereum smart contract programs. ADF-GA aims to efficiently generate a valid set of test cases via three stages. First, the corresponding program control flow graph is constructed from the source codes. Second, the generated control flow graph is analyzed to obtain the variable information in the Solidity programs, locate the require statements, and also get the definition-use pairs to be tested. Finally, a genetic algorithm is used to generate test cases, in which an improved fitness function is proposed to calculate the definition-use pairs coverage of each test case with program instrumentation. Experimental studies are performed on several representative Solidity programs. The results show that ADF-GA can effectively generate test cases, achieve better coverage, and reduce the number of iterations in genetic algorithm.},
	booktitle = {Proceedings of the {IEEE}/{ACM} 42nd {International} {Conference} on {Software} {Engineering} {Workshops}},
	publisher = {Association for Computing Machinery},
	author = {Zhang, Pengcheng and Yu, Jianan and Ji, Shunhui},
	year = {2020},
	note = {event-place: Seoul, Republic of Korea},
	keywords = {blockchain, Solidity, smart contract, test case generation, fitness function, genetic algorithm},
	pages = {754--761},
}

@inproceedings{kuo_cross-domain_2020,
	address = {New York, NY, USA},
	series = {{ICMHI} '20},
	title = {Cross-{Domain} {Design} of {Blockchain} {Smart} {Contract} for {Library} and {Healthcare} {Privacy}},
	isbn = {978-1-4503-7776-8},
	url = {https://doi.org/10.1145/3418094.3418145},
	doi = {10.1145/3418094.3418145},
	abstract = {The blockchain technology designed by information security experts empowers in library service and healthcare service via smart contracts. Advanced blockchain technology provides a mechanism for smart contracts. Through intelligent threshold design and the open and tamper-proof nature of the blockchain, smart contracts have become a new generation of information security technology. In the next-generation library services, traditional borrowing materials from the library have evolved into a limited-time sharing service for electronic materials. These electronic materials have various loan periods and sharing time-varying by different borrower privileges. This study designs a patron-centric account's smart contract to disseminate library information more effectively and collect accurate library data. The smart contract automatically triggers the loan period and extends this mechanism to designing a personal health privacy sharing protocol for improving the one-time authorization sharing mechanism. As a result, this study may provide blockchain smart contract designs shared by library information and healthcare through cross-domain consideration and scheme.},
	booktitle = {Proceedings of the 4th {International} {Conference} on {Medical} and {Health} {Informatics}},
	publisher = {Association for Computing Machinery},
	author = {Kuo, Yu-Jie Jessica and Shieh, Jiann-Cherng},
	year = {2020},
	note = {event-place: Kamakura City, Japan},
	keywords = {Blockchain, Smart Contract, Healthcare Privacy, iLibrary, Library Information},
	pages = {122--126},
}

@article{chen_synthesis-powered_2022,
	title = {Synthesis-{Powered} {Optimization} of {Smart} {Contracts} via {Data} {Type} {Refactoring}},
	volume = {6},
	url = {https://doi.org/10.1145/3563308},
	doi = {10.1145/3563308},
	abstract = {Since executing a smart contract on the Ethereum blockchain costs money (measured in gas), smart contract developers spend significant effort in reducing gas usage. In this paper, we propose a new technique for reducing the gas usage of smart contracts by changing the underlying data layout. Given a smart contract P and a type-level transformation, our method automatically synthesizes a new contract P′ that is functionally equivalent to P. Our approach provides a convenient DSL for expressing data type refactorings and employs program synthesis to generate the new version of the contract. We have implemented our approach in a tool called Solidare and demonstrate its capabilities on real-world smart contracts from Etherscan and GasStation. In particular, we show that our approach is effective at automating the desired data layout transformation and that it is useful for reducing gas usage of smart contracts that use rich data structures.},
	number = {OOPSLA2},
	journal = {Proc. ACM Program. Lang.},
	author = {Chen, Yanju and Wang, Yuepeng and Goyal, Maruth and Dong, James and Feng, Yu and Dillig, Işil},
	month = oct,
	year = {2022},
	note = {Place: New York, NY, USA
Publisher: Association for Computing Machinery},
	keywords = {Smart Contract, Data Type Refactoring, Program Synthesis},
}

@inproceedings{hu_reguard_2018,
	address = {New York, NY, USA},
	series = {{ICSE} '18},
	title = {{ReGuard}: {Finding} {Reentrancy} {Bugs} in {Smart} {Contracts}},
	isbn = {978-1-4503-5663-3},
	url = {https://doi.org/10.1145/3183440.3183495},
	doi = {10.1145/3183440.3183495},
	abstract = {Smart contracts enabled a new way to perform cryptocurrency transactions over blockchains. While this emerging technique introduces free-of-conflicts and transparency, smart contract itself is vulnerable. As a special form of computer program, smart contract can hardly get rid of bugs. Even worse, an exploitable security bug can lead to catastrophic consequences, e.g., loss of cryptocurrency/money. In this demo paper, we focus on the most common type of security bugs in smart contracts, i.e., reentrancy bug, which caused the famous DAO attack with a loss of 60 million US dollars. We presented ReGuard, an fuzzing-based analyzer to automatically detect reentrancy bugs in Ethereum smart contracts. Specifically, ReGuard performs fuzz testing on smart contracts by iteratively generating random but diverse transactions. Based on the runtime traces, ReGuard further dynamically identifies reentrancy vulnerabilities. In the preliminary evaluation, we have analyzed 5 existing Ethereum contracts. ReGuard automatically flagged 7 previously unreported reentrancy bugs. A demo video of ReGuard is at https://youtu.be/XxJ3\_-cmUiY.},
	booktitle = {Proceedings of the 40th {International} {Conference} on {Software} {Engineering}: {Companion} {Proceeedings}},
	publisher = {Association for Computing Machinery},
	author = {Hu, Xing and Gao, Zhipeng and Xia, Xin and Lo, David and Yang, Xiaohu and Liu, Chao and Liu, Han and Cao, Zhao and Chen, Zhong and Chen, Bangdao and Roscoe, Bill},
	year = {2018},
	note = {event-place: Gothenburg, Sweden},
	keywords = {smart contract, dynamic analysis, reentrancy bug},
	pages = {65--68},
}

@inproceedings{tolmach_property-based_2023,
	address = {New York, NY, USA},
	series = {{ASE} '22},
	title = {Property-{Based} {Automated} {Repair} of {DeFi} {Protocols}},
	isbn = {978-1-4503-9475-8},
	url = {https://doi.org/10.1145/3551349.3559560},
	doi = {10.1145/3551349.3559560},
	abstract = {Programming errors enable security attacks on smart contracts, which are used to manage large sums of financial assets. Automated program repair (APR) techniques aim to reduce developers’ burden of manually fixing bugs by automatically generating patches for a given issue. Existing APR tools for smart contracts focus on mitigating typical smart contract vulnerabilities rather than violations of functional specification. However, in decentralized financial (DeFi) smart contracts, the inconsistency between intended behavior and implementation translates into the deviation from the underlying financial model, resulting in monetary losses for the application and its users. In this work, we propose DeFinery—a technique for automated repair of a smart contract that does not satisfy a user-defined correctness property. To explore a larger set of diverse patches while providing formal correctness guarantees w.r.t. the intended behavior, we combine search-based patch generation with semantic analysis of an original program for inferring its specification. Our experiments in repairing 9 real-world and benchmark smart contracts prove that DeFinery efficiently generates high-quality patches that cannot be found by other existing tools.},
	booktitle = {Proceedings of the 37th {IEEE}/{ACM} {International} {Conference} on {Automated} {Software} {Engineering}},
	publisher = {Association for Computing Machinery},
	author = {Tolmach, Palina and Li, Yi and Lin, Shang-Wei},
	year = {2023},
	note = {event-place: Rochester, MI, USA},
	keywords = {Smart contract, program repair, symbolic execution},
}

@inproceedings{grieco_echidna_2020,
	address = {New York, NY, USA},
	series = {{ISSTA} 2020},
	title = {Echidna: {Effective}, {Usable}, and {Fast} {Fuzzing} for {Smart} {Contracts}},
	isbn = {978-1-4503-8008-9},
	url = {https://doi.org/10.1145/3395363.3404366},
	doi = {10.1145/3395363.3404366},
	abstract = {Ethereum smart contracts—autonomous programs that run on a blockchain—often control transactions of financial and intellectual property. Because of the critical role they play, smart contracts need complete, comprehensive, and effective test generation. This paper introduces an open-source smart contract fuzzer called Echidna that makes it easy to automatically generate tests to detect violations in assertions and custom properties. Echidna is easy to install and does not require a complex configuration or deployment of contracts to a local blockchain. It offers responsive feedback, captures many property violations, and its default settings are calibrated based on experimental data. To date, Echidna has been used in more than 10 large paid security audits, and feedback from those audits has driven the features and user experience of Echidna, both in terms of practical usability (e.g., smart contract frameworks like Truffle and Embark) and test generation strategies. Echidna aims to be good at finding real bugs in smart contracts, with minimal user effort and maximal speed.},
	booktitle = {Proceedings of the 29th {ACM} {SIGSOFT} {International} {Symposium} on {Software} {Testing} and {Analysis}},
	publisher = {Association for Computing Machinery},
	author = {Grieco, Gustavo and Song, Will and Cygan, Artur and Feist, Josselin and Groce, Alex},
	year = {2020},
	note = {event-place: Virtual Event, USA},
	keywords = {fuzzing, smart contracts, test generation},
	pages = {557--560},
}

@inproceedings{hamdaqa_icontractml_2020,
	address = {New York, NY, USA},
	series = {{SAM} '20},
	title = {{IContractML}: {A} {Domain}-{Specific} {Language} for {Modeling} and {Deploying} {Smart} {Contracts} onto {Multiple} {Blockchain} {Platforms}},
	isbn = {978-1-4503-8140-6},
	url = {https://doi.org/10.1145/3419804.3421454},
	doi = {10.1145/3419804.3421454},
	abstract = {Smart contracts are immutable digital programs deployed onto blockchain platforms to codify agreements. They enable blockchain technology to play a vital role in many fields, such as finance, health care, and energy. An important aspect of modeling and deploying smart contracts is to define the business process and rules that govern the agreements under which the corresponding actions are executed. Unfortunately, these models use a mix of technical and business-centric terminologies that are different based on the underlying blockchain platform that the smart contract is targeting. To address this issue, in this paper, we followed a feature-oriented domain analysis approach to identify the commonalities and variations between three of the common blockchain platforms that are used to deploy smart contracts; namely IBM Hyperledger Composer, Azure Blockchain Workbench, and Ethereum. Accordingly, we propose a reference model for smart contracts. The reference model is then realized as a modeling framework that enables developers to model and generate the structural code required to deploy a smart contract onto multiple blockchain platforms. The coverage of the proposed reference model was shown through mapping the concepts of the reference models to its corresponding constructs within each blockchain platform. Moreover, we provide three use cases to show how the proposed framework can empower developers to generate the structural code of smart contracts for the target platform through model transformation.},
	booktitle = {Proceedings of the 12th {System} {Analysis} and {Modelling} {Conference}},
	publisher = {Association for Computing Machinery},
	author = {Hamdaqa, Mohammad and Metz, Lucas Alberto Pineda and Qasse, Ilham},
	year = {2020},
	note = {event-place: Virtual Event, Canada},
	keywords = {Blockchain, Ethereum, Smart Contracts, Azure Blockchain, Domain Specific Language, Hyperledger Composer, Model-Driven Engineering},
	pages = {34--43},
}

@inproceedings{olsthoorn_syntest-solidity_2022-1,
	address = {New York, NY, USA},
	series = {{ICSE} '22},
	title = {{SynTest}-{Solidity}: {Automated} {Test} {Case} {Generation} and {Fuzzing} for {Smart} {Contracts}},
	isbn = {978-1-4503-9223-5},
	url = {https://doi.org/10.1145/3510454.3516869},
	doi = {10.1145/3510454.3516869},
	abstract = {Ethereum is the largest and most prominent smart contract platform. One key property of Ethereum is that once a contract is deployed, it can not be updated anymore. This increases the importance of thoroughly testing the behavior and constraints of the smart contract before deployment. Existing approaches in related work either do not scale or are only focused on finding crashing inputs. In this tool demo, we introduce SynTest-Solidity, an automated test case generation and fuzzing framework for Solidity. SynTest-Solidity implements various metaheuristic search algorithms, including random search (traditional fuzzing) and genetic algorithms (i.e., NSGA-II, MOSA, and DynaMOSA). Finally, we performed a preliminary empirical study to assess the effectiveness of SynTest-Solidity in testing Solidity smart contracts.},
	booktitle = {Proceedings of the {ACM}/{IEEE} 44th {International} {Conference} on {Software} {Engineering}: {Companion} {Proceedings}},
	publisher = {Association for Computing Machinery},
	author = {Olsthoorn, Mitchell and Stallenberg, Dimitri and van Deursen, Arie and Panichella, Annibale},
	year = {2022},
	note = {event-place: Pittsburgh, Pennsylvania},
	keywords = {fuzzing, search-based software testing, smart contracts, software testing, test case generation},
	pages = {202--206},
}

@inproceedings{juels_ring_2016,
	address = {New York, NY, USA},
	series = {{CCS} '16},
	title = {The {Ring} of {Gyges}: {Investigating} the {Future} of {Criminal} {Smart} {Contracts}},
	isbn = {978-1-4503-4139-4},
	url = {https://doi.org/10.1145/2976749.2978362},
	doi = {10.1145/2976749.2978362},
	abstract = {Thanks to their anonymity (pseudonymity) and elimination of trusted intermediaries, cryptocurrencies such as Bitcoin have created or stimulated growth in many businesses and communities. Unfortunately, some of these are criminal, e.g., money laundering, illicit marketplaces, and ransomware. Next-generation cryptocurrencies such as Ethereum will include rich scripting languages in support of smart contracts, programs that autonomously intermediate transactions. In this paper, we explore the risk of smart contracts fueling new criminal ecosystems. Specifically, we show how what we call criminal smart contracts (CSCs) can facilitate leakage of confidential information, theft of cryptographic keys, and various real-world crimes (murder, arson, terrorism).We show that CSCs for leakage of secrets (a la Wikileaks) are efficiently realizable in existing scripting languages such as that in Ethereum. We show that CSCs for theft of cryptographic keys can be achieved using primitives, such as Succinct Non-interactive ARguments of Knowledge (SNARKs), that are already expressible in these languages and for which efficient supporting language extensions are anticipated. We show similarly that authenticated data feeds, an emerging feature of smart contract systems, can facilitate CSCs for real-world crimes (e.g., property crimes).Our results highlight the urgency of creating policy and technical safeguards against CSCs in order to realize the promise of smart contracts for beneficial goals.},
	booktitle = {Proceedings of the 2016 {ACM} {SIGSAC} {Conference} on {Computer} and {Communications} {Security}},
	publisher = {Association for Computing Machinery},
	author = {Juels, Ari and Kosba, Ahmed and Shi, Elaine},
	year = {2016},
	note = {event-place: Vienna, Austria},
	keywords = {criminal smart contracts, ethereum},
	pages = {283--295},
}

@inproceedings{li_musc_2020,
	series = {{ASE} '19},
	title = {{MuSC}: {A} {Tool} for {Mutation} {Testing} of {Ethereum} {Smart} {Contract}},
	isbn = {978-1-72812-508-4},
	url = {https://doi.org/10.1109/ASE.2019.00136},
	doi = {10.1109/ASE.2019.00136},
	abstract = {The smart contract cannot be modified when it has been deployed on a blockchain. Therefore, it must be given thorough test before its being deployed. Mutation testing is considered as a practical test methodology to evaluate the adequacy of software testing. In this paper, we introduce MuSC, a mutation testing tool for Ethereum Smart Contract (ESC). It can generate numerous mutants at a fast speed and supports the automatic operations such as creating test nets, deploying and executing tests. Specially, MuSC implements a set of novel mutation operators w.r.t ESC programming language, Solidity. Therefore, it can expose the defects of smart contracts to a certain degree. The demonstration video of MuSC is available at https://youtu.be/3KBKXJPVjbQ, and the source code can be downloaded at https://github.com/belikout/MuSC-Tool-Demo-repo.},
	booktitle = {Proceedings of the 34th {IEEE}/{ACM} {International} {Conference} on {Automated} {Software} {Engineering}},
	publisher = {IEEE Press},
	author = {Li, Zixin and Wu, Haoran and Xu, Jiehui and Wang, Xingya and Zhang, Lingming and Chen, Zhenyu},
	year = {2020},
	note = {event-place: San Diego, California},
	keywords = {Blockchain, ethereum smart contract, mutation operator, mutation test},
	pages = {1198--1201},
}

@inproceedings{steffen_zapper_2022,
	address = {New York, NY, USA},
	series = {{CCS} '22},
	title = {Zapper: {Smart} {Contracts} with {Data} and {Identity} {Privacy}},
	isbn = {978-1-4503-9450-5},
	url = {https://doi.org/10.1145/3548606.3560622},
	doi = {10.1145/3548606.3560622},
	abstract = {Privacy concerns prevent the adoption of smart contracts in sensitive domains incompatible with the public nature of shared ledgers.We present Zapper, a privacy-focused smart contract system allowing developers to express contracts in an intuitive frontend. Zapper hides not only the identity of its users but also the objects they access—the latter is critical to prevent deanonymization attacks. Specifically, Zapper compiles contracts to an assembly language executed by a non-interactive zero-knowledge processor and hides accessed objects by an oblivious Merkle tree construction.We implemented Zapper on an idealized ledger and evaluated it on realistic applications, showing that it allows generating new transactions within 22 s and verifying them within 0.03 s (excluding the time for consensus). This performance is in line with the smart contract system ZEXE (Bowe et al., 2020), which offers analogous data and identity privacy guarantees but suffers from multiple shortcomings affecting security and usability.},
	booktitle = {Proceedings of the 2022 {ACM} {SIGSAC} {Conference} on {Computer} and {Communications} {Security}},
	publisher = {Association for Computing Machinery},
	author = {Steffen, Samuel and Bichsel, Benjamin and Vechev, Martin},
	year = {2022},
	note = {event-place: Los Angeles, CA, USA},
	keywords = {blockchain, smart contracts, privacy, zero-knowledge proofs},
	pages = {2735--2749},
}

@inproceedings{s_evaluating_2018,
	address = {New York, NY, USA},
	series = {{WETSEB} '18},
	title = {Evaluating {Complexity} and {Digitizability} of {Regulations} and {Contracts} for a {Blockchain} {Application} {Design}},
	isbn = {978-1-4503-5726-5},
	url = {https://doi.org/10.1145/3194113.3194117},
	doi = {10.1145/3194113.3194117},
	abstract = {Blockchain technology becomes the key solution to provide trust and security without any need for a central supervisory authority to validate the transactions. By now, it plays a key role in the digital transformation of several processes and industries with varying application use cases. To promote the wide adoption of blockchain technology we need mechanisms to identify the digitizability level of the given regulations to smart contracts and mechanisms to specify which blockchain technology is best suitable for the given regulations. In this work, we propose a modeling approach that supports the automated analysis of human-readable regulation representations by suggesting how much percentage of regulation is digitizable and the suitable blockchain environment to design the application. We identify smart contract components that correspond to real-world entities and its pertaining clauses and its digitizability property. With selected examples, we explore this capability and discuss our future research directions on smart contract generation according to the recommended environment.},
	booktitle = {Proceedings of the 1st {International} {Workshop} on {Emerging} {Trends} in {Software} {Engineering} for {Blockchain}},
	publisher = {Association for Computing Machinery},
	author = {S, Pradeepkumar D and Singi, Kapil and Kaulgud, Vikrant and Podder, Sanjay},
	year = {2018},
	note = {event-place: Gothenburg, Sweden},
	keywords = {blockchain, smart contracts, digitizability complexity, regulations},
	pages = {25--29},
}

@inproceedings{liu_modcon_2020,
	address = {New York, NY, USA},
	series = {{ESEC}/{FSE} 2020},
	title = {{ModCon}: {A} {Model}-{Based} {Testing} {Platform} for {Smart} {Contracts}},
	isbn = {978-1-4503-7043-1},
	url = {https://doi.org/10.1145/3368089.3417939},
	doi = {10.1145/3368089.3417939},
	abstract = {Unlike those on public permissionless blockchains, smart contracts on enterprise permissioned blockchains are not limited by resource constraints, and therefore often larger and more complex. Current testing and analysis tools lack support for such contracts, which demonstrate stateful behaviors and require special treatment in quality assurance. In this paper, we present a model-based testing platform, called ModCon, relying on user-specified models to define test oracles, guide test generation, and measure test adequacy. ModCon is Web-based and supports both permissionless and permissioned blockchain platforms. We demonstrate the usage and key features of ModCon on real enterprise smart contract applications.},
	booktitle = {Proceedings of the 28th {ACM} {Joint} {Meeting} on {European} {Software} {Engineering} {Conference} and {Symposium} on the {Foundations} of {Software} {Engineering}},
	publisher = {Association for Computing Machinery},
	author = {Liu, Ye and Li, Yi and Lin, Shang-Wei and Yan, Qiang},
	year = {2020},
	note = {event-place: Virtual Event, USA},
	keywords = {blockchain, Smart contract, model-based testing},
	pages = {1601--1605},
}

@article{chen_sadponzi_2021,
	title = {{SADPonzi}: {Detecting} and {Characterizing} {Ponzi} {Schemes} in {Ethereum} {Smart} {Contracts}},
	volume = {5},
	url = {https://doi.org/10.1145/3460093},
	doi = {10.1145/3460093},
	abstract = {Ponzi schemes are financial scams that lure users under the promise of high profits. With the prosperity of Bitcoin and blockchain technologies, there has been growing anecdotal evidence that this classic fraud has emerged in the blockchain ecosystem. Existing studies have proposed machine-learning based approaches for detecting Ponzi schemes, i.e., either based on the operation codes (opcodes) of the smart contract binaries or the transaction patterns of addresses. However, state-of-the-art approaches face several major limitations, including lacking interpretability and high false positive rates. Moreover, machine-learning based methods are susceptible to evasion techniques, and transaction-based techniques do not work on smart contracts that have a small number of transactions. These limitations render existing methods for detecting Ponzi schemes ineffective. In this paper, we propose SADPonzi, a semantic-aware detection approach for identifying Ponzi schemes in Ethereum smart contracts. Specifically, by strictly following the definition of Ponzi schemes, we propose a heuristic-guided symbolic execution technique to first generate the semantic information for each feasible path in smart contracts and then identify investor-related transfer behaviors and the distribution strategies adopted. Experimental result on a well-labelled benchmark suggests that SADPonzi can achieve 100\% precision and recall, outperforming all existing machine-learning based techniques. We further apply SADPonzi to all 3.4 million smart contracts deployed by EOAs in Ethereum and identify 835 Ponzi scheme contracts, with over 17 million US Dollars invested by victims. Our observations confirm the urgency of identifying and mitigating Ponzi schemes in the blockchain ecosystem.},
	number = {2},
	journal = {Proc. ACM Meas. Anal. Comput. Syst.},
	author = {Chen, Weimin and Li, Xinran and Sui, Yuting and He, Ningyu and Wang, Haoyu and Wu, Lei and Luo, Xiapu},
	month = jun,
	year = {2021},
	note = {Place: New York, NY, USA
Publisher: Association for Computing Machinery},
	keywords = {smart contract, symbolic execution, ethereum, Ponzi scheme},
}

@inproceedings{pani_smartfuzzdrivergen_2023,
	address = {New York, NY, USA},
	series = {{ISEC} '23},
	title = {{SmartFuzzDriverGen}: {Smart} {Contract} {Fuzzing} {Automation} for {Golang}},
	isbn = {9798400700644},
	url = {https://doi.org/10.1145/3578527.3578538},
	doi = {10.1145/3578527.3578538},
	abstract = {Greybox fuzzers require intermediate programs called fuzz drivers to test smart contract APIs. These fuzz drivers use the semi-random inputs (bytes) generated by fuzzers to prepare suitable inputs required to test APIs. Further, fuzz driver also uses this input to decide sequence in which APIs to be invoked and enables the fuzzer to execute the APIs in that sequence to find the vulnerabilities, if any. Manually writing such complex and intelligent fuzz drivers is laborious, requires deep technical skills, hence can be cumbersome and error prone. In this paper, we propose SmartFuzzDriverGen framework to automatically generate fuzz drivers which invoke smart contract APIs using different strategies: unit-level, sequence-based (random, user-defined), and heuristics based. We evaluate the proposed framework by testing a prototype implementation of it with Golang smart contracts (targeted for Hyperledger Fabric platform) and study the effectiveness of the generated fuzz drivers in terms of code coverage as well as bug finding abilities. We observed that fuzzing of APIs in random sequences performed better than the other methods.},
	booktitle = {Proceedings of the 16th {Innovations} in {Software} {Engineering} {Conference}},
	publisher = {Association for Computing Machinery},
	author = {Pani, Siddhasagar and Nallagonda, Harshita Vani and {Vigneswaran} and Medicherla, Raveendra Kumar and M, Rajan},
	year = {2023},
	note = {event-place: Allahabad, India},
	keywords = {blockchain, fuzzing, smart contracts, automated driver generation, sequencing, vulnerability detection},
}

@inproceedings{garfatta_model_2022,
	address = {New York, NY, USA},
	series = {{SAC} '22},
	title = {Model {Checking} of {Vulnerabilities} in {Smart} {Contracts}: {A} {Solidity}-to-{CPN} {Approach}},
	isbn = {978-1-4503-8713-2},
	url = {https://doi.org/10.1145/3477314.3507309},
	doi = {10.1145/3477314.3507309},
	abstract = {Despite the benefits that the Blockchain technology brings to many application fields, its adoption does not come without challenges. Smart contracts, which are at the core of 2nd generation blockchains, can often be riddled with vulnerabilities that can be exploited to attack the platform and threaten its security. It is therefore crucial for the protection of the designed systems to prove the correctness of the smart contracts to be deployed. Approaches have been proposed to detect generic vulnerabilities like reentrancy, but the results would often include false positives where the detected bug is either non existent or not exploitable. Besides, such approaches do not offer to check contract-specific properties. The work presented in this paper is situated as part of a formal approach that we have proposed in an attempt to bridge this gap. This previously outlined approach is based on the transformation of Solidity smart contracts into Coloured Petri nets, which provides the possibility to verify smart contracts with reference to properties expressed as Linear Temporal Logic (LTL) formulae. Herein we extend our previous work on mainly two levels: first, by taking into account the concept of function calls in the transformation and second, by focusing on the LTL properties that can define the correctness of a smart contract. Such properties can be specific to the control- or data-flow of the contracts being checked. They can also be used to express vulnerabilities as we showcase by proposing LTL formalizations for six vulnerabilities from the literature. We then leverage the capability of the Helena model checker to detect these vulnerabilities while discerning their exploitability, as well as check temporal-based contract-specific properties.},
	booktitle = {Proceedings of the 37th {ACM}/{SIGAPP} {Symposium} on {Applied} {Computing}},
	publisher = {Association for Computing Machinery},
	author = {Garfatta, Ikram and Klai, Kaïs and Graïet, Mohamed and Gaaloul, Walid},
	year = {2022},
	note = {event-place: Virtual Event},
	keywords = {blockchain, smart contract, coloured petri nets, model checker, solidity, temporal properties},
	pages = {316--325},
}

@inproceedings{santiago_gifflar_2021-1,
	address = {USA},
	series = {{CASCON} '21},
	title = {Gifflar: {A} {Framework} to {Generate} {Smart} {Contracts} on the {Fly}},
	abstract = {Blockchain is a disruptive technology that offers a secure decentralized network, allowing for direct transactions between distributed entities, without the need for a trusted third party. Smart contracts are executable codes hosted on the blockchain which enables the implementation of several decentralized applications, in different domains. Due to the complexity of the contract's construction, it is necessary to seek ways to facilitate and make this innovative development process robust. This paper presents Gifflar, a framework for generating smart contract code on the fly, in such a way that it allows a system to write, compile and implement blockchain contracts with a decentralized application still running. The framework is structured in components that implement design patterns to better define the responsibility of each one of the parts and exports a simple interaction module for modeling contracts in JSON and automatic code writing using the TypeScript language. As far as we know, this framework is one of the first to allow contract code generation dynamically at run time. Thus, the work contributes to the state of the art by addressing a new paradigm, where systems can act as smart contract developers.},
	booktitle = {Proceedings of the 31st {Annual} {International} {Conference} on {Computer} {Science} and {Software} {Engineering}},
	publisher = {IBM Corp.},
	author = {Santiago, Levy and Abijaude, Jauberth Weyll and Greve, Fabíola},
	year = {2021},
	note = {event-place: Toronto, Canada},
	keywords = {blockchain, code generation, framework, smart contract},
	pages = {214--219},
}

@inproceedings{santiago_framework_2021-1,
	address = {New York, NY, USA},
	series = {{SBES} '21},
	title = {A {Framework} to {Generate} {Smart} {Contracts} {On} the {Fly}},
	isbn = {978-1-4503-9061-3},
	url = {https://doi.org/10.1145/3474624.3477068},
	doi = {10.1145/3474624.3477068},
	abstract = {Blockchain is a disruptive technology that offers a secure decentralized network, and allows for direct transactions between distributed entities, without the need for a trusted third party. Smart contracts are executable codes hosted on the blockchain and enable the implementation of several decentralized applications, in different domains. However, due to the complexity of contract construction, it is necessary to seek ways to facilitate and make this innovative development process robust. This paper presents Gifflar, a framework for generating smart contract code on the fly, in such a way that it allows a system to write, compile and implement blockchain contracts with a decentralized application still running. Gifflar is structured in components that implement design patterns to better define the responsibility of each one of the parts and exports a simple interaction module for contract modeling in JSON and automatic code writing using the TypeScript language. As far as we know, this framework is one of the first to generate contracts dynamically at run time. Thus, the work contributes to the state of the art by addressing a new paradigm, where systems can act as smart contract developers.},
	booktitle = {Proceedings of the {XXXV} {Brazilian} {Symposium} on {Software} {Engineering}},
	publisher = {Association for Computing Machinery},
	author = {Santiago, Levy and Abijaude, Jauberth and Greve, Fabíola},
	year = {2021},
	note = {event-place: Joinville, Brazil},
	keywords = {Blockchain, Code Generation, Framework, Smart Contract},
	pages = {410--415},
}

@article{ma_v-gas_2022,
	title = {V-{Gas}: {Generating} {High} {Gas} {Consumption} {Inputs} to {Avoid} {Out}-of-{Gas} {Vulnerability}},
	issn = {1533-5399},
	url = {https://doi.org/10.1145/3511900},
	doi = {10.1145/3511900},
	abstract = {Out-of-gas errors occur when smart contract programs are provided with inputs that cause excessive gas consumption and which will be easily exploited to perform DoS attacks. Various approaches have been proposed to estimate the gas limit of a function in smart contracts to avoid such error. However, underestimation often occurs when the contract is complex In this work, we propose V-Gas, which automatically generates inputs that maximize the gas cost and reduce underestimation. V-Gas is designed based on static analysis and feedback-directed mutational fuzz testing. First, V-Gas builds the gas weighted control flow graph (WCFG) of functions in smart contracts. Then, V-Gas develops gas consumption guided selection and mutation strategies to generate the input that maximize the gas consumption. For evaluation, we implement V-Gas based on js-evm, a widely used ethereum virtual machine written in Javascript, and conduct experiments on 736 real-world transactions recorded on Ethereum. 44.02\% of the transactions would have out-of-gas errors based on the estimation results given by solc, means that the recorded real gas consumption for those transactions is larger than the gas limit estimated by solc. In comparison V-Gas could reduce the under estimation ratio to 13.86\%. In order to evaluate the performance of feedback-directed engine in V-Gas, we implemented other directed fuzzing engines and compare their performance with V-Gas’s. The results showed that V-Gas generates the same or higher gas estimation value on 97.8\% of the transactions with less time, usually within 5 minutes. Furthermore, V-Gas has exposed 25 previously unknown out-of-gas vulnerabilities in widely-used smart contracts, 6 of which have been assigned unique CVE identifiers in the US National Vulnerability Database.},
	journal = {ACM Trans. Internet Technol.},
	author = {Ma, Fuchen and Ren, Meng and Ying, Fu and Sun, Wanting and Song, Houbing and Shi, Heyuan and Jiang, Yu and Li, Huizhong},
	month = apr,
	year = {2022},
	note = {Place: New York, NY, USA
Publisher: Association for Computing Machinery},
	keywords = {Ethereum, Fuzzing, Gas Estimation., Smart contracts},
	annote = {Just Accepted},
}

@article{grech_elipmoc_2022,
	title = {Elipmoc: {Advanced} {Decompilation} of {Ethereum} {Smart} {Contracts}},
	volume = {6},
	url = {https://doi.org/10.1145/3527321},
	doi = {10.1145/3527321},
	abstract = {Smart contracts on the Ethereum blockchain greatly benefit from cutting-edge analysis techniques and pose significant challenges. A primary challenge is the extremely low-level representation of deployed contracts. We present Elipmoc, a decompiler for the next generation of smart contract analyses. Elipmoc is an evolution of Gigahorse, the top research decompiler, dramatically improving over it and over other state-of-the-art tools, by employing several high-precision techniques and making them scalable. Among these techniques are a new kind of context sensitivity (termed “transactional sensitivity”) that provides a more effective static abstraction of distinct dynamic executions; a path-sensitive (yet scalable, through path merging) algorithm for inference of function arguments and returns; and a fully context sensitive private function reconstruction process. As a result, smart contract security analyses and reverse-engineering tools built on top of Elipmoc achieve high scalability, precision and completeness. Elipmoc improves over all notable past decompilers, including its predecessor, Gigahorse, and the state-of-the-art industrial tool, Panoramix, integrated into the primary Ethereum blockchain explorer, Etherscan. Elipmoc produces decompiled contracts with fully resolved operands at a rate of 99.5\% (compared to 62.8\% for Gigahorse), and achieves much higher completeness in code decompilation than Panoramix—e.g., up to 67\% more coverage of external call statements—while being over 5x faster. Elipmoc has been the enabler for recent (independent) discoveries of several exploitable vulnerabilities on popular protocols, over funds in the many millions of dollars.},
	number = {OOPSLA1},
	journal = {Proc. ACM Program. Lang.},
	author = {Grech, Neville and Lagouvardos, Sifis and Tsatiris, Ilias and Smaragdakis, Yannis},
	month = apr,
	year = {2022},
	note = {Place: New York, NY, USA
Publisher: Association for Computing Machinery},
	keywords = {Blockchain, Ethereum, Smart Contracts, Datalog, Decompilation, Program Analysis, Security},
}

@inproceedings{ali_quest_2017,
	address = {New York, NY, USA},
	series = {{AMECSE} '17},
	title = {The {Quest} for {Fully} {Smart} {Autonomous} {Business} {Networks} in {IoT} {Platforms}},
	isbn = {978-1-4503-5512-4},
	url = {https://doi.org/10.1145/3178298.3178301},
	doi = {10.1145/3178298.3178301},
	abstract = {The evolution of the business networks is fostering the demand for more connected devices to execute tangled and sophisticated business operations. This leverages complicated business networks space to include scalable network layers, more devices, and platforms relying on Internet of Things (IoT) solutions. Despite the fact that traditional IoT platforms usually target the technical side for IoT applications, they are not prepared enough to be easily integrated with pluggable and executable business logic or smart contracts. This makes it difficult to control a collection of shared business network resources in a standard and decentralized manner. With the rise of FinTech due to blockchain technology, it becomes possible to seamlessly engage business networks with financial digital assets. Consequently, combining IoT platforms with blockchain will drive new ways for better services consuming, transparency and products that depend on crowd-based economy [12]. In this paper, Sitechain is proposed as a new architecture to integrate IoT platforms with blockchain technology. The proposed architecture is not locked to specific IoT platforms but it can be extended to support different platforms in a standard, systematic and easy way. Sitechain is demonstrated by integrating Sitewhere and FIWARE IoT platforms with Hyperledger Fabric as a private blockchain network manager. Moreover a modeling language supported by Hyperledger composer is used to easily develop smart contracts and generate RESTful APIs, therefore any smart contract transaction events can be mapped into actions on remote devices.The system testing is performed using a large set of connected shared devices that are deployed as part of private business networks. The results are recorded in the conclusion section.},
	booktitle = {Proceedings of the 3rd {Africa} and {Middle} {East} {Conference} on {Software} {Engineering}},
	publisher = {Association for Computing Machinery},
	author = {Ali, Ahmed Abdullah and El-Dessouky, Iman A. and Abdallah, Mahmoud M. and Nabih, Azza K.},
	year = {2017},
	note = {event-place: Cairo, Egypt},
	keywords = {Blockchain, Smart Contracts, Consensus, Distributed Ledger, HyperLedger, Internet of Things, IoT Platforms},
	pages = {13--18},
}

@inproceedings{segers_use_2019,
	address = {New York, NY, USA},
	series = {dg.o 2019},
	title = {The {Use} of a {Blockchain}-{Based} {Smart} {Import} {Declaration} to {Reduce} the {Need} for {Manual} {Cross}-{Validation} by {Customs} {Authorities}},
	isbn = {978-1-4503-7204-6},
	url = {https://doi.org/10.1145/3325112.3325264},
	doi = {10.1145/3325112.3325264},
	abstract = {For determining the correctness of an import declaration lodged by a declarant within international shipping, customs authorities rely on manual cross-validation of the declaration with other trade documents. However, the sheer volume of import declarations lodged annually makes it impossible to manually cross-validate each declaration. Smart contracts have the potential to automatically aggregate relevant information from blockchain-based ledgers for lodging and cross-validation. In this paper we explore how such smart contract could be implemented. We demonstrate that a smart import declaration can be used to automatically aggregate information from different sources (e.g., pro forma invoice data elements stored on the blockchain ledger). However, technical and organizational considerations that are inherent to blockchain technology need to be addressed for the smart import declaration to be acceptable for both customs authorities and declarants. It is therefore suggested that future work focusses on data standards required to enable automatic aggregation of relevant trade information and the generation of the import declaration and governance of the smart import declaration by customs authorities to assure correctness.},
	booktitle = {Proceedings of the 20th {Annual} {International} {Conference} on {Digital} {Government} {Research}},
	publisher = {Association for Computing Machinery},
	author = {Segers, Lennard and Ubacht, Jolien and Tan, Yao-Hua and D. Rukanova, Boriana},
	year = {2019},
	note = {event-place: Dubai, United Arab Emirates},
	keywords = {smart contract, blockchain technology, cross-validation, e-customs, international shipping, Smart import declaration},
	pages = {196--203},
}

@inproceedings{yan_eshield_2020,
	address = {New York, NY, USA},
	series = {{ISSTA} 2020},
	title = {{EShield}: {Protect} {Smart} {Contracts} against {Reverse} {Engineering}},
	isbn = {978-1-4503-8008-9},
	url = {https://doi.org/10.1145/3395363.3404365},
	doi = {10.1145/3395363.3404365},
	abstract = {Smart contracts are the back-end programs of blockchain-based applications and the execution results are deterministic and publicly visible. Developers are unwilling to release source code of some smart contracts to generate randomness or for security reasons, however, attackers still can use reverse engineering tools to decompile and analyze the code. In this paper, we propose EShield, an automated security enhancement tool for protecting smart contracts against reverse engineering. EShield replaces original instructions of operating jump addresses with anti-patterns to interfere with control flow recovery from bytecode. We have implemented four methods in EShield and conducted an experiment on over 20k smart contracts. The evaluation results show that all the protected smart contracts are resistant to three different reverse engineering tools with little extra gas cost.},
	booktitle = {Proceedings of the 29th {ACM} {SIGSOFT} {International} {Symposium} on {Software} {Testing} and {Analysis}},
	publisher = {Association for Computing Machinery},
	author = {Yan, Wentian and Gao, Jianbo and Wu, Zhenhao and Li, Yue and Guan, Zhi and Li, Qingshan and Chen, Zhong},
	year = {2020},
	note = {event-place: Virtual Event, USA},
	keywords = {Blockchain, Ethereum, Smart Contract, Program Analysis, Reverse Engineering},
	pages = {553--556},
}

@inproceedings{su_effectively_2023-1,
	address = {New York, NY, USA},
	series = {{ASE} '22},
	title = {Effectively {Generating} {Vulnerable} {Transaction} {Sequences} in {Smart} {Contracts} with {Reinforcement} {Learning}-{Guided} {Fuzzing}},
	isbn = {978-1-4503-9475-8},
	url = {https://doi.org/10.1145/3551349.3560429},
	doi = {10.1145/3551349.3560429},
	abstract = {As computer programs run on top of blockchain, smart contracts have proliferated a myriad of decentralized applications while bringing security vulnerabilities, which may cause huge financial losses. Thus, it is crucial and urgent to detect the vulnerabilities of smart contracts. However, existing fuzzers for smart contracts are still inefficient to detect sophisticated vulnerabilities that require specific vulnerable transaction sequences to trigger. To address this challenge, we propose a novel vulnerability-guided fuzzer based on reinforcement learning, namely RLF, for generating vulnerable transaction sequences to detect such sophisticated vulnerabilities in smart contracts. In particular, we firstly model the process of fuzzing smart contracts as a Markov decision process to construct our reinforcement learning framework. We then creatively design an appropriate reward with consideration of both vulnerability and code coverage so that it can effectively guide our fuzzer to generate specific transaction sequences to reveal vulnerabilities, especially for the vulnerabilities related to multiple functions. We conduct extensive experiments to evaluate RLF’s performance. The experimental results demonstrate that our RLF outperforms state-of-the-art vulnerability-detection tools (e.g., detecting 8\%-69\% more vulnerabilities within 30 minutes).},
	booktitle = {Proceedings of the 37th {IEEE}/{ACM} {International} {Conference} on {Automated} {Software} {Engineering}},
	publisher = {Association for Computing Machinery},
	author = {Su, Jianzhong and Dai, Hong-Ning and Zhao, Lingjun and Zheng, Zibin and Luo, Xiapu},
	year = {2023},
	note = {event-place: Rochester, MI, USA},
	keywords = {Reinforcement learning, Smart contract, Fuzzing},
}

@inproceedings{akca_testing_2021,
	address = {New York, NY, USA},
	series = {{ESEM} '21},
	title = {Testing {Smart} {Contracts}: {Which} {Technique} {Performs} {Best}?},
	isbn = {978-1-4503-8665-4},
	url = {https://doi.org/10.1145/3475716.3475779},
	doi = {10.1145/3475716.3475779},
	abstract = {Background: Executing, verifying and enforcing credible transactions on permissionless blockchains is done using smart contracts. A key challenge with smart contracts is ensuring their correctness and security. Several test input generation techniques for detecting vulnerabilities in smart contracts have been proposed in the last few years. However, a comparison of proposed techniques to gauge their effectiveness is missing. Aim: This paper conducts an empirical evaluation of testing techniques for smart contracts. The testing techniques we evaluated are: (1) Blackbox fuzzing, (2) Adaptive fuzzing, (3) Coverage-guided fuzzing with an SMT solver and (4) Genetic algorithm. We do not consider static analysis tools, as several recent studies have assessed and compared effectiveness of these tools. Method: We evaluate effectiveness of the test generation techniques using (1) Coverage achieved - we use four code coverage metrics targeting smart contracts, (2) Fault finding ability - using artificially seeded and real security vulnerabilities of different types. We used two datasets in our evaluation - one with 1665 real smart contracts from Etherscan, and another with 90 real contracts with known vulnerabilities to assess fault finding ability. Result: We find Adaptive fuzzing performs best in terms of coverage and fault finding over contracts in both datasets. Conclusion: However, we believe considering dependencies between functions and handling Solidity specific features will help improve the performance of all techniques considerably.},
	booktitle = {Proceedings of the 15th {ACM} / {IEEE} {International} {Symposium} on {Empirical} {Software} {Engineering} and {Measurement} ({ESEM})},
	publisher = {Association for Computing Machinery},
	author = {Akca, Sefa and Peng, Chao and Rajan, Ajitha},
	year = {2021},
	note = {event-place: Bari, Italy},
	keywords = {Blockchain, Ethereum, Smart Contract, Constraint Solver, Fault Seeding, Fuzzer, Genetic Algorithm, Input Generation},
}

@inproceedings{zhang_adf-ga_2020-1,
	address = {New York, NY, USA},
	series = {{ICSEW}'20},
	title = {{ADF}-{GA}: {Data} {Flow} {Criterion} {Based} {Test} {Case} {Generation} for {Ethereum} {Smart} {Contracts}},
	isbn = {978-1-4503-7963-2},
	url = {https://doi.org/10.1145/3387940.3391499},
	doi = {10.1145/3387940.3391499},
	abstract = {Testing is an important technique to improve the quality of Ethereum smart contract programs. However, current work on testing smart contract only focus on static problems of smart contract programs. A data flow oriented test case generation approach for dynamic testing of smart contract programs is still missing. To address this problem, this paper proposes a novel test case generation approach, called ADF-GA (All-uses Data Flow criterion based test case generation using Genetic Algorithm), for Solidity based Ethereum smart contract programs. ADF-GA aims to efficiently generate a valid set of test cases via three stages. First, the corresponding program control flow graph is constructed from the source codes. Second, the generated control flow graph is analyzed to obtain the variable information in the Solidity programs, locate the require statements, and also get the definition-use pairs to be tested. Finally, a genetic algorithm is used to generate test cases, in which an improved fitness function is proposed to calculate the definition-use pairs coverage of each test case with program instrumentation. Experimental studies are performed on several representative Solidity programs. The results show that ADF-GA can effectively generate test cases, achieve better coverage, and reduce the number of iterations in genetic algorithm.},
	booktitle = {Proceedings of the {IEEE}/{ACM} 42nd {International} {Conference} on {Software} {Engineering} {Workshops}},
	publisher = {Association for Computing Machinery},
	author = {Zhang, Pengcheng and Yu, Jianan and Ji, Shunhui},
	year = {2020},
	note = {event-place: Seoul, Republic of Korea},
	keywords = {blockchain, Solidity, smart contract, test case generation, fitness function, genetic algorithm},
	pages = {754--761},
}

@inproceedings{li_poster_2022,
	address = {New York, NY, USA},
	series = {{CCS} '22},
	title = {Poster: {EOSDFA}: {Data} {Flow} {Analysis} of {EOSIO} {Smart} {Contracts}},
	isbn = {978-1-4503-9450-5},
	url = {https://doi.org/10.1145/3548606.3563545},
	doi = {10.1145/3548606.3563545},
	abstract = {As an efficient blockchain platform, EOSIO is becoming increasingly popular. However, it has exposed many security problems and caused a large amount of financial losses. In the past, the difficulty of collecting open-source EOSIO smart contracts and analyzing WebAssembly (Wasm) bytecode compiled by EOSIO smart contracts, making few researchers proposed static analysis tools for EOSIO smart contracts, and tools capable of dataflow analysis have not yet appeared. In this work, we first propose a dataflow analysis method for EOSIO smart contracts. Based on Octopus, we designed an efficient dataflow analysis method, which can generate Static Single Assignment (SSA) form intermediate representation (IR) for the objective function and its variables to obtain the results of dataflow. We further proved the effectiveness of the proposed method through experiments on our collected data sets.},
	booktitle = {Proceedings of the 2022 {ACM} {SIGSAC} {Conference} on {Computer} and {Communications} {Security}},
	publisher = {Association for Computing Machinery},
	author = {Li, Levi Taiji and Zhang, Mu},
	year = {2022},
	note = {event-place: Los Angeles, CA, USA},
	keywords = {smart contract, data flow analysis, eosio, points-to analysis},
	pages = {3391--3393},
}

@inproceedings{gao_easyflow_2019,
	series = {{ICSE} '19},
	title = {{EasyFlow}: {Keep} {Ethereum} {Away} from {Overflow}},
	url = {https://doi.org/10.1109/ICSE-Companion.2019.00029},
	doi = {10.1109/ICSE-Companion.2019.00029},
	abstract = {While Ethereum smart contracts enabled a wide range of blockchain applications, they are extremely vulnerable to different forms of security attacks. Due to the fact that transactions to smart contracts commonly involve cryptocurrency transfer, any successful attacks can lead to money loss or even financial disorder. In this paper, we focus on the overflow attacks in Ethereum, mainly because they widely rooted in many smart contracts and comparatively easy to exploit. We have developed EasyFlow, an overflow detector at Ethereum Virtual Machine level. The key insight behind EasyFlow is a taint analysis based tracking technique to analyze the propagation of involved taints. Specifically, EasyFlow can not only divide smart contracts into safe contracts, manifested overflows, well-protected overflows and potential overflows, but also automatically generate transactions to trigger potential overflows. In our preliminary evaluation, EasyFlow managed to find potentially vulnerable Ethereum contracts with little runtime overhead. A demo video of EasyFlow is at https://youtu.be/QbUJkQI0L6o.},
	booktitle = {Proceedings of the 41st {International} {Conference} on {Software} {Engineering}: {Companion} {Proceedings}},
	publisher = {IEEE Press},
	author = {Gao, Jianbo and Liu, Han and Liu, Chao and Li, Qingshan and Guan, Zhi and Chen, Zhong},
	year = {2019},
	note = {event-place: Montreal, Quebec, Canada},
	keywords = {smart contract, ethereum, overflow vulnerability, taint analysis},
	pages = {23--26},
}

@inproceedings{ouaddah_harnessing_2017,
	address = {New York, NY, USA},
	series = {{ICC} '17},
	title = {Harnessing the {Power} of {Blockchain} {Technology} to {Solve} {IoT} {Security} \&amp; {Privacy} {Issues}},
	isbn = {978-1-4503-4774-7},
	url = {https://doi.org/10.1145/3018896.3018901},
	doi = {10.1145/3018896.3018901},
	abstract = {In this paper, we examine the possibility of using blockchain technology, mainly the second-generation of blockchain and smart contract, to create a new version of our decentralized pseudonymous \&amp; privacy preserving authorization management framework. Our framework relies on pseudonymous digital identity to ensure unlinkability, Smart contract to express access control policies and Blockchain technology to manage access control enforcement.},
	booktitle = {Proceedings of the {Second} {International} {Conference} on {Internet} of {Things}, {Data} and {Cloud} {Computing}},
	publisher = {Association for Computing Machinery},
	author = {Ouaddah, Aafaf and Elkalam, Anas Abou and Ouahman, Abdellah Ait},
	year = {2017},
	note = {event-place: Cambridge, United Kingdom},
	keywords = {blockchain, privacy, access control, authorization, internet of things, security, smartcontract},
}

@inproceedings{kumarathunga_towards_2020,
	address = {New York, NY, USA},
	series = {{ASSE} '20},
	title = {Towards {Trust} {Enabled} {Commodity} {Market} for {Farmers} with {Blockchain} {Smart} {Contracts}},
	isbn = {978-1-4503-7710-2},
	url = {https://doi.org/10.1145/3399871.3399891},
	doi = {10.1145/3399871.3399891},
	abstract = {This paper presents a conceptual model for an online agricultural commodity market that empowers farmers with a better price determination mechanism through collective marketing and Blockchain smart contracts. The model makes collective marketing possible by generating Many-one-Many relationships between farmers, farmers' groups, and buyers. While collective marketing improves farmers' bargaining position leading to higher rates, trust enabled by Blockchain smart contracts facilitates farmers to establish deals with buyers who offer the best rate transforming the commodity market into a sustainable market.},
	booktitle = {Proceedings of the 2020 {Asia} {Service} {Sciences} and {Software} {Engineering} {Conference}},
	publisher = {Association for Computing Machinery},
	author = {Kumarathunga, Malni and Calheiros, Rodrigo and Ginige, Athula},
	year = {2020},
	note = {event-place: Nagoya, Japan},
	keywords = {Blockchain, Smart Contracts, Collective Marketing, Dynamic Trust, Market Linkages},
	pages = {75--82},
}

@inproceedings{brent_ethainter_2020,
	address = {New York, NY, USA},
	series = {{PLDI} 2020},
	title = {Ethainter: {A} {Smart} {Contract} {Security} {Analyzer} for {Composite} {Vulnerabilities}},
	isbn = {978-1-4503-7613-6},
	url = {https://doi.org/10.1145/3385412.3385990},
	doi = {10.1145/3385412.3385990},
	abstract = {Smart contracts on permissionless blockchains are exposed to inherent security risks due to interactions with untrusted entities. Static analyzers are essential for identifying security risks and avoiding millions of dollars worth of damage. We introduce Ethainter, a security analyzer checking information flow with data sanitization in smart contracts. Ethainter identifies composite attacks that involve an escalation of tainted information, through multiple transactions, leading to severe violations. The analysis scales to the entire blockchain, consisting of hundreds of thousands of unique smart contracts, deployed over millions of accounts. Ethainter is more precise than previous approaches, as we confirm by automatic exploit generation (e.g., destroying over 800 contracts on the Ropsten network) and by manual inspection, showing a very high precision of 82.5\% valid warnings for end-to-end vulnerabilities. Ethainter’s balance of precision and completeness offers significant advantages over other tools such as Securify, Securify2, and teEther.},
	booktitle = {Proceedings of the 41st {ACM} {SIGPLAN} {Conference} on {Programming} {Language} {Design} and {Implementation}},
	publisher = {Association for Computing Machinery},
	author = {Brent, Lexi and Grech, Neville and Lagouvardos, Sifis and Scholz, Bernhard and Smaragdakis, Yannis},
	year = {2020},
	note = {event-place: London, UK},
	keywords = {smart contracts, information flow, static analysis},
	pages = {454--469},
}

@inproceedings{li_finding_2019,
	series = {{ICSE} '19},
	title = {Finding {Concurrency} {Exploits} on {Smart} {Contracts}},
	url = {https://doi.org/10.1109/ICSE-Companion.2019.00061},
	doi = {10.1109/ICSE-Companion.2019.00061},
	abstract = {Smart contracts have been widely used on Ethereum to enable business services across various application domains. However, they are prone to different forms of security attacks due to the dynamic and non-deterministic blockchain runtime environment. In this work, we highlighted a general miner-side type of exploit, called concurrency exploit, which attacks smart contracts via generating malicious transaction sequences. Moreover, we designed a systematic algorithm to automatically detect such exploits. In our preliminary evaluation, our approach managed to identify real vulnerabilities that cannot be detected by other tools in the literature.},
	booktitle = {Proceedings of the 41st {International} {Conference} on {Software} {Engineering}: {Companion} {Proceedings}},
	publisher = {IEEE Press},
	author = {Li, Yue},
	year = {2019},
	note = {event-place: Montreal, Quebec, Canada},
	pages = {144--146},
}

@inproceedings{jia_delottery_2020,
	address = {New York, NY, USA},
	series = {{ICBTA} 2019},
	title = {{DeLottery}: {A} {Novel} {Decentralized} {Lottery} {System} {Based} on {Blockchain} {Technology}},
	isbn = {978-1-4503-7743-0},
	url = {https://doi.org/10.1145/3376044.3376049},
	doi = {10.1145/3376044.3376049},
	abstract = {In this paper, we design DeLottery, a decentralized lottery and gambling system based on block chain technology and smart contracts. Lottery is a classical form of entertainment and charity for centuries. Facing the bottleneck of the combination between lottery and information technology, we use smart contracts and blockchain in decentralized, intelligent, and secure systems for lottery industries. Moreover, we are inspired by the algorithm of RANDAO, an outstanding way of random number generation in blockchain scenario. The components and the functions of the novel system are described in details. We implement DeLottery in a blockchain network and show functioning procedure and security of the proposed lottery system.},
	booktitle = {Proceedings of the 2019 2nd {International} {Conference} on {Blockchain} {Technology} and {Applications}},
	publisher = {Association for Computing Machinery},
	author = {Jia, Zhifeng and Chen, Rui and Li, Jie},
	year = {2020},
	note = {event-place: Xi'an, China},
	keywords = {blockchain, smart contract, decentralized, lottery system},
	pages = {20--25},
}

@inproceedings{wustholz_harvey_2020,
	address = {New York, NY, USA},
	series = {{ESEC}/{FSE} 2020},
	title = {Harvey: {A} {Greybox} {Fuzzer} for {Smart} {Contracts}},
	isbn = {978-1-4503-7043-1},
	url = {https://doi.org/10.1145/3368089.3417064},
	doi = {10.1145/3368089.3417064},
	abstract = {We present Harvey, an industrial greybox fuzzer for smart contracts, which are programs managing accounts on a blockchain. Greybox fuzzing is a lightweight test-generation approach that effectively detects bugs and security vulnerabilities. However, greybox fuzzers randomly mutate program inputs to exercise new paths; this makes it challenging to cover code that is guarded by narrow checks. Moreover, most real-world smart contracts transition through many different states during their lifetime, e.g., for every bid in an auction. To explore these states and thereby detect deep vulnerabilities, a greybox fuzzer would need to generate sequences of contract transactions, e.g., by creating bids from multiple users, while keeping the search space and test suite tractable. In this paper, we explain how Harvey alleviates both challenges with two key techniques. First, Harvey extends standard greybox fuzzing with a method for predicting new inputs that are more likely to cover new paths or reveal vulnerabilities in smart contracts. Second, it fuzzes transaction sequences in a targeted and demand-driven way. We have evaluated our approach on 27 real-world contracts. Our experiments show that our techniques significantly increase Harvey's effectiveness in achieving high coverage and detecting vulnerabilities, in most cases orders-of-magnitude faster.},
	booktitle = {Proceedings of the 28th {ACM} {Joint} {Meeting} on {European} {Software} {Engineering} {Conference} and {Symposium} on the {Foundations} of {Software} {Engineering}},
	publisher = {Association for Computing Machinery},
	author = {Wüstholz, Valentin and Christakis, Maria},
	year = {2020},
	note = {event-place: Virtual Event, USA},
	keywords = {smart contracts, automated testing, greybox fuzzing},
	pages = {1398--1409},
}

@inproceedings{das_blockchain_2023,
	address = {New York, NY, USA},
	series = {{ICDCN} '23},
	title = {Blockchain {Enabled} {SDN} {Framework} for {Security} {Management} in {5G} {Applications}},
	isbn = {978-1-4503-9796-4},
	url = {https://doi.org/10.1145/3571306.3571445},
	doi = {10.1145/3571306.3571445},
	abstract = {Fifth-generation (5G) wireless networks are now operational to deploy all over the world. The technology of 5G’s objective is to link heterogeneous machines and devices with significant improvements high quality of service (QoS), internet bandwidth, and improved system throughput to enable several upright applications. Despite all these benefits that 5G will provide, still, significant issues need to be resolved, such as decentralization, transparency, and risks associated with data interoperability, network privacy, and security vulnerabilities. Modern networks link an enormous number of devices to the Internet, and in this complicated situation, the use of BC and SDN has been effectively advocated to assure security, privacy, and secrecy. This study offers a blockchain-enabled SDN framework for securing transactions that makes use of Software Defined Network (SDN) and Network Function Virtualization (NFV) to overcome these issues. The proposed framework can address the man-in-the-middle attack between control and data plane in SDN networks. A controller authentication scheme is provided using smart contracts. Smart contracts automatically authenticate the SDN controller to increase the efficiency of controller verification. The communicated data can also be authenticated using smart contracts. The proposed framework can enhance network transparency, data security, and user privacy. Each SDN controller can access verifiable data using the proposed framework.},
	booktitle = {Proceedings of the 24th {International} {Conference} on {Distributed} {Computing} and {Networking}},
	publisher = {Association for Computing Machinery},
	author = {Das, Debashis and Banerjee, Sourav and Dasgupta, Kousik and Chatterjee, Pushpita and Ghosh, Uttam and Biswas, Utpal},
	year = {2023},
	note = {event-place: Kharagpur, India},
	keywords = {blockchain, smart contract, 5G network, blockchain-enabled SDN, distributed SDN, wireless communication},
	pages = {414--419},
}

@inproceedings{coblenz_smarter_2019,
	series = {{WETSEB} '19},
	title = {Smarter {Smart} {Contract} {Development} {Tools}},
	url = {https://doi.org/10.1109/WETSEB.2019.00013},
	doi = {10.1109/WETSEB.2019.00013},
	abstract = {Much recent work focuses on finding bugs and security vulnerabilities in smart contracts written in existing languages. Although this approach may be helpful, it does not address flaws in the underlying programming language, which can facilitate writing buggy code in the first place. We advocate a re-thinking of the blockchain software engineering tool set, starting with the programming language in which smart contracts are written. In this paper, we propose and justify requirements for a new generation of blockchain software development tools. New tools should (1) consider users' needs as a primary concern; (2) seek to facilitate safe development by detecting relevant classes of serious bugs at compile time; (3) as much as possible, be blockchain-agnostic, given the wide variety of different blockchain platforms available, and leverage the properties that are common among blockchain environments to improve safety and developer effectiveness.},
	booktitle = {Proceedings of the 2nd {International} {Workshop} on {Emerging} {Trends} in {Software} {Engineering} for {Blockchain}},
	publisher = {IEEE Press},
	author = {Coblenz, Michael and Sunshine, Joshua and Aldrich, Jonathan and Myers, Brad A.},
	year = {2019},
	note = {event-place: Montreal, Quebec, Canada},
	keywords = {blockchain, smart contracts, usability of programming languages},
	pages = {48--51},
}

@inproceedings{javaid_mitigating_2018,
	address = {New York, NY, USA},
	series = {{CryBlock}'18},
	title = {Mitigating {LoT} {Device} {Based} {DDoS} {Attacks} {Using} {Blockchain}},
	isbn = {978-1-4503-5838-5},
	url = {https://doi.org/10.1145/3211933.3211946},
	doi = {10.1145/3211933.3211946},
	abstract = {Many IoT devices lack memory and computational complexities of modern computing devices, making them vulnerable to a wide range of cyber attacks. Among these, DDoS attacks are a growing concern in IoT. Such attacks are executed through the introduction of rogue devices and then using them and/or other compromised devices to facilitate DDoS attacks by generating relentless traffic. This paper aims to address DDoS security issues in IoT by proposing an integration of IoT devices with blockchain. This paper uses Ethereum, a blockchain variant, with smart contracts to replace the traditional centralized IoT infrastructure with a decentralized one. IoT devices are then required to access the network using smart contracts. The integration of IoT with Ethereum not only prevents rogue devices from gaining access to the server but also addresses DDoS attacks by using static resource allocation for devices.},
	booktitle = {Proceedings of the 1st {Workshop} on {Cryptocurrencies} and {Blockchains} for {Distributed} {Systems}},
	publisher = {Association for Computing Machinery},
	author = {Javaid, Uzair and Siang, Ang Kiang and Aman, Muhammad Naveed and Sikdar, Biplab},
	year = {2018},
	note = {event-place: Munich, Germany},
	keywords = {Ethereum, Smart Contract, Distributed Denial of Service (DDoS), Internet of Things (IoT)},
	pages = {71--76},
}

@inproceedings{avizheh_privacy-enhanced_2021,
	address = {New York, NY, USA},
	series = {{CCSW} '21},
	title = {Privacy-{Enhanced} {OptiSwap}},
	isbn = {978-1-4503-8653-1},
	url = {https://doi.org/10.1145/3474123.3486756},
	doi = {10.1145/3474123.3486756},
	abstract = {Fair Exchange is a fundamental problem in the exchange of digital items with direct application to electronic commerce. In a fair exchange protocol, two parties want to exchange their corresponding items such that either both receive the other's item, or neither of them receives anything. It has been shown that fair exchange without a trusted third party (TTP) is not possible. Optimistic fair exchange protocols limit the role of TTP to the case that one of the parties misbehaves. OptiSwap (Eckey et al., 2020) is a fair exchange protocol for the exchange of confidential digital items with digital coins. OptiSwap uses a smart contract as the TTP and allows the buyer to use an interactive dispute resolution protocol with the seller (mediated through smart contract) to generate a proof of misbehaviour for a misbehaving seller. We show that OptiSwap's dispute resolution protocol leaks information about the item to the smart contract (public) which can completely reveal the item to the public, and this provides an opportunity for a malicious buyer to pose a credible threat to the fairness guarantee of the system. We propose and design privacy-enhanced OptiSwap that prevents the leakage of information and guarantees security and fairness of the exchange without significantly affecting the efficiency of the protocol. We prove security of the new protocol in an extension of the universal composability for non-monolithic adversaries, and implement and evaluate its efficiency against the original OptiSwap. We discuss our results and suggest directions for future research.},
	booktitle = {Proceedings of the 2021 on {Cloud} {Computing} {Security} {Workshop}},
	publisher = {Association for Computing Machinery},
	author = {Avizheh, Sepideh and Haffey, Preston and Safavi-Naini, Reihaneh},
	year = {2021},
	note = {event-place: Virtual Event, Republic of Korea},
	keywords = {smart contract, privacy, fair exchange, probing attack},
	pages = {39--57},
}

@inproceedings{ma_attribute_2020,
	address = {New York, NY, USA},
	series = {{CSAE} '20},
	title = {Attribute {Revocable} {Data} {Sharing} {Scheme} {Based} on {Blockchain} and {CP}-{ABE}},
	isbn = {978-1-4503-7772-0},
	url = {https://doi.org/10.1145/3424978.3425019},
	doi = {10.1145/3424978.3425019},
	abstract = {Data sharing and exchange is an effective way to release the vitality and value of data resources, but it also brings security problems, especially in the distributed environment. In this paper, a data sharing scheme based on blockchain, smart contract and attribute-based encryption is proposed, which supports attribute level user authority revocation, and is suitable for the privilege management of data sharing in distributed environment. Firstly, the model of data sharing and exchange is given; secondly, the operation of data sharing and exchange is defined; finally, implementation by smart contract is given and an experiment is carried out. The results show that the scheme can effectively solve the problem of data access authorization and revocation in distributed environment. In this scheme, we introduce the trusted third party as the key management center to generate, encrypt and decrypt the key, thus reducing the pressure on the client.},
	booktitle = {Proceedings of the 4th {International} {Conference} on {Computer} {Science} and {Application} {Engineering}},
	publisher = {Association for Computing Machinery},
	author = {Ma, Wanli and Ma, Junwei and Zhang, Qi and Xue, Honglin and Li, Yang and Dang, Xiaoyan and Zhao, Min and Zhang, Jianliang and Han, Chao and Wu, Jian},
	year = {2020},
	note = {event-place: Sanya, China},
	keywords = {Blockchain, Smart contract, Attribute based encryption system, Data sharing},
}

@article{hoang_random_2022,
	title = {Random {Testing} of a {Higher}-{Order} {Blockchain} {Language} ({Experience} {Report})},
	volume = {6},
	url = {https://doi.org/10.1145/3547653},
	doi = {10.1145/3547653},
	abstract = {We describe our experience of using property-based testing—an approach for automatically generating random inputs to check executable program specifications—in a development of a higher-order smart contract language that powers a state-of-the-art blockchain with thousands of active daily users. We outline the process of integrating QuickChick—a framework for property-based testing built on top of the Coq proof assistant—into a real-world language implementation in OCaml. We discuss the challenges we have encountered when generating well-typed programs for a realistic higher-order smart contract language, which mixes purely functional and imperative computations and features runtime resource accounting. We describe the set of the language implementation properties that we tested, as well as the semantic harness required to enable their validation. The properties range from the standard type safety to the soundness of a control- and type-flow analysis used by the optimizing compiler. Finally, we present the list of bugs discovered and rediscovered with the help of QuickChick and discuss their severity and possible ramifications.},
	number = {ICFP},
	journal = {Proc. ACM Program. Lang.},
	author = {Hoang, Tram and Trunov, Anton and Lampropoulos, Leonidas and Sergey, Ilya},
	month = aug,
	year = {2022},
	note = {Place: New York, NY, USA
Publisher: Association for Computing Machinery},
	keywords = {smart contracts, definitional interpreters, higher-order control-flow analysis, property-based testing, QuickChick, random testing, Scilla},
}

@inproceedings{steffen_zkay_2019,
	address = {New York, NY, USA},
	series = {{CCS} '19},
	title = {Zkay: {Specifying} and {Enforcing} {Data} {Privacy} in {Smart} {Contracts}},
	isbn = {978-1-4503-6747-9},
	url = {https://doi.org/10.1145/3319535.3363222},
	doi = {10.1145/3319535.3363222},
	abstract = {Privacy concerns of smart contracts are a major roadblock preventing their wider adoption. A promising approach to protect private data is hiding it with cryptographic primitives and then enforcing correctness of state updates by Non-Interactive Zero-Knowledge (NIZK) proofs. Unfortunately, NIZK statements are less expressive than smart contracts, forcing developers to keep some functionality in the contract. This results in scattered logic, split across contract code and NIZK statements, with unclear privacy guarantees. To address these problems, we present the zkay language, which introduces privacy types defining owners of private values. zkay contracts are statically type checked to (i) ensure they are realizable using NIZK proofs and (ii) prevent unintended information leaks. Moreover, the logic of zkay contracts is easy to follow by just ignoring privacy types. To enforce zkay contracts, we automatically transform them into contracts equivalent in terms of privacy and functionality, yet executable on public blockchains. We evaluated our approach on a proof-of-concept implementation generating Solidity contracts and implemented 10 interesting example contracts in zkay. Our results indicate that zkay is practical: On-chain cost for executing the transformed contracts is around 1M gas per transaction ( 0.50US\$) and off-chain cost is moderate.},
	booktitle = {Proceedings of the 2019 {ACM} {SIGSAC} {Conference} on {Computer} and {Communications} {Security}},
	publisher = {Association for Computing Machinery},
	author = {Steffen, Samuel and Bichsel, Benjamin and Gersbach, Mario and Melchior, Noa and Tsankov, Petar and Vechev, Martin},
	year = {2019},
	note = {event-place: London, United Kingdom},
	keywords = {blockchain, privacy, zero-knowledge proofs, programming language},
	pages = {1759--1776},
}

@inproceedings{wustholz_targeted_2020,
	address = {New York, NY, USA},
	series = {{ICSE} '20},
	title = {Targeted {Greybox} {Fuzzing} with {Static} {Lookahead} {Analysis}},
	isbn = {978-1-4503-7121-6},
	url = {https://doi.org/10.1145/3377811.3380388},
	doi = {10.1145/3377811.3380388},
	abstract = {Automatic test generation typically aims to generate inputs that explore new paths in the program under test in order to find bugs. Existing work has, therefore, focused on guiding the exploration toward program parts that are more likely to contain bugs by using an offline static analysis.In this paper, we introduce a novel technique for targeted greybox fuzzing using an online static analysis that guides the fuzzer toward a set of target locations, for instance, located in recently modified parts of the program. This is achieved by first semantically analyzing each program path that is explored by an input in the fuzzer's test suite. The results of this analysis are then used to control the fuzzer's specialized power schedule, which determines how often to fuzz inputs from the test suite. We implemented our technique by extending a state-of-the-art, industrial fuzzer for Ethereum smart contracts and evaluate its effectiveness on 27 real-world benchmarks. Using an online analysis is particularly suitable for the domain of smart contracts since it does not require any code instrumentation—adding instrumentation to contracts changes their semantics. Our experiments show that targeted fuzzing significantly outperforms standard greybox fuzzing for reaching 83\% of the challenging target locations (up to 14x of median speed-up).},
	booktitle = {Proceedings of the {ACM}/{IEEE} 42nd {International} {Conference} on {Software} {Engineering}},
	publisher = {Association for Computing Machinery},
	author = {Wüstholz, Valentin and Christakis, Maria},
	year = {2020},
	note = {event-place: Seoul, South Korea},
	pages = {789--800},
}

@inproceedings{rasti_symboleo2sc_2022,
	address = {New York, NY, USA},
	series = {{MODELS} '22},
	title = {{Symboleo2SC}: {From} {Legal} {Contract} {Specifications} to {Smart} {Contracts}},
	isbn = {978-1-4503-9466-6},
	url = {https://doi.org/10.1145/3550355.3552407},
	doi = {10.1145/3550355.3552407},
	abstract = {Smart contracts (SCs) are software systems that monitor and control the execution of legal contracts to ensure compliance with the contracts' terms and conditions. They often exploit Internet-of-Things technologies to support their monitoring functions, and blockchain technology to ensure the integrity of their data. Ethereum and business blockchain platforms, such as Hyperledger Fabric, are popular choices for SC development. However, there is a gap in the knowledge of SCs between developers and legal experts. Symboleo is a formal specification language for legal contracts that was introduced to address this issue. Symboleo specifications directly encode legal concepts such as parties, obligations, and powers. In this paper, we propose a tool-supported method for translating Symboleo specifications into smart contracts. We have extended the current Symboleo IDE, implemented the ontology and semantics of Symboleo into a reusable library, and developed the Symboleo2SC tool to generate Hyperledger Fabric code exploiting this library. Symboleo2SC was evaluated with three sample contracts. The results shows that legal contract specifications in Symboleo can be fully converted to SCs for monitoring purposes. Moreover, Symboleo2SC helps simplify the SC development process, saves development effort, and helps reduce risks of coding errors.},
	booktitle = {Proceedings of the 25th {International} {Conference} on {Model} {Driven} {Engineering} {Languages} and {Systems}},
	publisher = {Association for Computing Machinery},
	author = {Rasti, Aidin and Amyot, Daniel and Parvizimosaed, Alireza and Roveri, Marco and Logrippo, Luigi and Anda, Amal Ahmed and Mylopoulos, John},
	year = {2022},
	note = {event-place: Montreal, Quebec, Canada},
	keywords = {blockchain, code generation, smart contracts, domain-specific languages, legal ontology},
	pages = {300--310},
}

@inproceedings{fu_evmfuzzer_2019,
	address = {New York, NY, USA},
	series = {{ESEC}/{FSE} 2019},
	title = {{EVMFuzzer}: {Detect} {EVM} {Vulnerabilities} via {Fuzz} {Testing}},
	isbn = {978-1-4503-5572-8},
	url = {https://doi.org/10.1145/3338906.3341175},
	doi = {10.1145/3338906.3341175},
	abstract = {Ethereum Virtual Machine (EVM) is the run-time environment for smart contracts and its vulnerabilities may lead to serious problems to the Ethereum ecology. With lots of techniques being continuously developed for the validation of smart contracts, the testing of EVM remains challenging because of the special test input format and the absence of oracles. In this paper, we propose EVMFuzzer, the first tool that uses differential fuzzing technique to detect vulnerabilities of EVM. The core idea is to continuously generate seed contracts and feed them to the target EVM and the benchmark EVMs, so as to find as many inconsistencies among execution results as possible, eventually discover vulnerabilities with output cross-referencing. Given a target EVM and its APIs, EVMFuzzer generates seed contracts via a set of predefined mutators, and then employs dynamic priority scheduling algorithm to guide seed contracts selection and maximize the inconsistency. Finally, EVMFuzzer leverages benchmark EVMs as cross-referencing oracles to avoid manual checking. With EVMFuzzer, we have found several previously unknown security bugs in four widely used EVMs, and 5 of which had been included in Common Vulnerabilities and Exposures (CVE) IDs in U.S. National Vulnerability Database. The video is presented at https://youtu.be/9Lejgf2GSOk.},
	booktitle = {Proceedings of the 2019 27th {ACM} {Joint} {Meeting} on {European} {Software} {Engineering} {Conference} and {Symposium} on the {Foundations} of {Software} {Engineering}},
	publisher = {Association for Computing Machinery},
	author = {Fu, Ying and Ren, Meng and Ma, Fuchen and Shi, Heyuan and Yang, Xin and Jiang, Yu and Li, Huizhong and Shi, Xiang},
	year = {2019},
	note = {event-place: Tallinn, Estonia},
	keywords = {fuzzing, Differential testing, domain-specific mutation, EVM},
	pages = {1110--1114},
}

@inproceedings{song_formal_2016,
	address = {Austin, Texas},
	series = {{FMCAD} '16},
	title = {Formal {Verification} for {Computer} {Security}: {Lessons} {Learned} and {Future} {Directions}},
	isbn = {978-0-9835678-6-8},
	abstract = {Formal verification techniques have been fruitful for a broad spectrum of different security applications and domains. However, many important questions and considerations influence the success of applying formal verification techniques to security applications and domains. In this talk, I will share lessons learned from experience of over a decade in applying formal verification techniques to security. I will also discuss new exciting application domains such as blockchain and smart contracts for formal verification. I will pose important, open challenges and discuss future directions for verifying next-generation systems such as learning systems.},
	booktitle = {Proceedings of the 16th {Conference} on {Formal} {Methods} in {Computer}-{Aided} {Design}},
	publisher = {FMCAD Inc},
	author = {Song, Dawn},
	year = {2016},
	note = {event-place: Mountain View, California},
	pages = {1},
}

@inproceedings{park_formal_2018,
	address = {New York, NY, USA},
	series = {{ESEC}/{FSE} 2018},
	title = {A {Formal} {Verification} {Tool} for {Ethereum} {VM} {Bytecode}},
	isbn = {978-1-4503-5573-5},
	url = {https://doi.org/10.1145/3236024.3264591},
	doi = {10.1145/3236024.3264591},
	abstract = {In this paper, we present a formal verification tool for the Ethereum Virtual Machine (EVM) bytecode. To precisely reason about all possible behaviors of the EVM bytecode, we adopted KEVM, a complete formal semantics of the EVM, and instantiated the K-framework's reachability logic theorem prover to generate a correct-by-construction deductive verifier for the EVM. We further optimized the verifier by introducing EVM-specific abstractions and lemmas to improve its scalability. Our EVM verifier has been used to verify various high-profile smart contracts including the ERC20 token, Ethereum Casper, and DappHub MakerDAO contracts.},
	booktitle = {Proceedings of the 2018 26th {ACM} {Joint} {Meeting} on {European} {Software} {Engineering} {Conference} and {Symposium} on the {Foundations} of {Software} {Engineering}},
	publisher = {Association for Computing Machinery},
	author = {Park, Daejun and Zhang, Yi and Saxena, Manasvi and Daian, Philip and Roşu, Grigore},
	year = {2018},
	note = {event-place: Lake Buena Vista, FL, USA},
	keywords = {Ethereum, smart contracts, formal verification, K framework},
	pages = {912--915},
}

@inproceedings{yi_empirical_2022,
	address = {New York, NY, USA},
	series = {{ESEC}/{FSE} 2022},
	title = {An {Empirical} {Study} of {Blockchain} {System} {Vulnerabilities}: {Modules}, {Types}, and {Patterns}},
	isbn = {978-1-4503-9413-0},
	url = {https://doi.org/10.1145/3540250.3549105},
	doi = {10.1145/3540250.3549105},
	abstract = {Blockchain, as a distributed ledger technology, becomes increasingly popular, especially for enabling valuable cryptocurrencies and smart contracts. However, the blockchain software systems inevitably have many bugs. Although bugs in smart contracts have been extensively investigated, security bugs of the underlying blockchain systems are much less explored. In this paper, we conduct an empirical study on blockchain’s system vulnerabilities from four representative blockchains, Bitcoin, Ethereum, Monero, and Stellar. Specifically, we first design a systematic filtering process to effectively identify 1,037 vulnerabilities and their 2,317 patches from 34,245 issues/PRs (pull requests) and 85,164 commits on GitHub. We thus build the first blockchain vulnerability dataset, which is available at https://github.com/VPRLab/BlkVulnDataset. We then perform unique analyses of this dataset at three levels, including (i) file-level vulnerable module categorization by identifying and correlating module paths across projects, (ii) text-level vulnerability type clustering by natural language processing and similarity-based sentence clustering, and (iii) code-level vulnerability pattern analysis by generating and clustering code change signatures that capture both syntactic and semantic information of patch code fragments. Our analyses reveal three key findings: (i) some blockchain modules are more susceptible than the others; notably, each of the modules related to consensus, wallet, and networking has over 200 issues; (ii) about 70\% of blockchain vulnerabilities are of traditional types, but we also identify four new types specific to blockchains; and (iii) we obtain 21 blockchain-specific vulnerability patterns that capture unique blockchain attributes and statuses, and demonstrate that they can be used to detect similar vulnerabilities in other popular blockchains, such as Dogecoin, Bitcoin SV, and Zcash.},
	booktitle = {Proceedings of the 30th {ACM} {Joint} {European} {Software} {Engineering} {Conference} and {Symposium} on the {Foundations} of {Software} {Engineering}},
	publisher = {Association for Computing Machinery},
	author = {Yi, Xiao and Wu, Daoyuan and Jiang, Lingxiao and Fang, Yuzhou and Zhang, Kehuan and Zhang, Wei},
	year = {2022},
	note = {event-place: Singapore, Singapore},
	keywords = {Blockchain Security, Data Mining, System Vulnerability},
	pages = {709--721},
}

@inproceedings{gao_guided_2019,
	series = {{ICSE} '19},
	title = {Guided, {Automated} {Testing} of {Blockchain}-{Based} {Decentralized} {Applications}},
	url = {https://doi.org/10.1109/ICSE-Companion.2019.00059},
	doi = {10.1109/ICSE-Companion.2019.00059},
	abstract = {As blockchain-based decentralized applications (DApp) become increasingly popular recently, there is an urgent demand for effective testing schemes and tools. Due to the complexity introduced by application-blockchain interaction, existing testing methods become non-applicable. In this paper, we present a guided and automated framework called Sungari to test DApps. The insights behind Sungari are two-fold. First, we employ random events to infer an abstract relation between frontend and blockchain. Second, we use the relation to generate event sequnces in a guided manner that can cover blockchain smart contracts as quick as possible. In a real-world DApp case study, Sungari outperformed random approach by covering 33\% more application use cases.},
	booktitle = {Proceedings of the 41st {International} {Conference} on {Software} {Engineering}: {Companion} {Proceedings}},
	publisher = {IEEE Press},
	author = {Gao, Jianbo},
	year = {2019},
	note = {event-place: Montreal, Quebec, Canada},
	keywords = {blockchain, smart contract, decentralized application, dynamic testing},
	pages = {138--140},
}

@inproceedings{pschetz_autonomous_2019,
	address = {New York, NY, USA},
	series = {{CHI} '19},
	title = {Autonomous {Distributed} {Energy} {Systems}: {Problematising} the {Invisible} through {Design}, {Drama} and {Deliberation}},
	isbn = {978-1-4503-5970-2},
	url = {https://doi.org/10.1145/3290605.3300617},
	doi = {10.1145/3290605.3300617},
	abstract = {Technologies such as blockchains, smart contracts and programmable batteries facilitate emerging models of energy distribution, trade and consumption, and generate a considerable number of opportunities for energy markets. However, these developments complicate relationships between stakeholders, disrupting traditional notions of value, control and ownership. Discussing these issues with the public is particularly challenging as energy consumption habits often obscure the competing values and interests that shape stakeholders' relationships. To make such difficult discussions more approachable and examine the missing relational aspect of autonomous energy systems, we combined the design of speculative hairdryers with performance and deliberation. This integrated method of inquiry makes visible the competing values and interests, eliciting people's wishes to negotiate these terms. We argue that the complexity of mediated energy distribution and its convoluted stakeholder relationships requires more sophisticated methods of inquiry to engage people in debates concerning distributed energy systems.},
	booktitle = {Proceedings of the 2019 {CHI} {Conference} on {Human} {Factors} in {Computing} {Systems}},
	publisher = {Association for Computing Machinery},
	author = {Pschetz, Larissa and Pothong, Kruakae and Speed, Chris},
	year = {2019},
	note = {event-place: Glasgow, Scotland Uk},
	keywords = {blockchain, critical design, deliberation, distributed energy, improvisation, performance, speculative design, theatre},
	pages = {1--14},
}

@inproceedings{chen_power_2021,
	address = {New York, NY, USA},
	series = {Internetware '20},
	title = {Power {Trading} {Model} for {Distributed} {Power} {Generation} {Systems} {Based} on {Consortium} {Blockchains}},
	isbn = {978-1-4503-8819-1},
	url = {https://doi.org/10.1145/3457913.3457929},
	doi = {10.1145/3457913.3457929},
	abstract = {Distributed power generation systems based on clean energy experience a large development worldwide. However, existing centralized power trading models cannot support direct transactions between distributed power generation systems and power consumers. Existing centralized power trading models suffer from multi-agent untrustworthiness and risk of data tampering. In addition, the direct transactions involve a large number of producers and consumers, thus requiring high efficiency of transaction processing in power trading models. To tackle with the problems, we propose a weakly centralized power trading model based on consortium blockchains in this paper. The trading model facilitate the power trading process by using smart contracts on consortium blockchains. In addition, we propose an approach based on the Hotelling theory to determine the pricing for transaction in our power trading model. The experimental results show that our power trading model provides a stable throughput as the request rate of transactions increases. The power trading model proposed in this paper is more practical than those based on public blockchains.},
	booktitle = {Proceedings of the 12th {Asia}-{Pacific} {Symposium} on {Internetware}},
	publisher = {Association for Computing Machinery},
	author = {Chen, Ran and Zhang, Jiabei and Yuan, Fuquan and Zhou, Bo and Shi, Wei and Zhou, Haiming},
	year = {2021},
	note = {event-place: Singapore, Singapore},
	keywords = {Smart Contract, Hotelling Model, Keyword: Consortium Blockchain, Power Trading},
	pages = {91--98},
}

@inproceedings{xue_adaptive_2022,
	address = {New York, NY, USA},
	series = {{ICBCT}'22},
	title = {An {Adaptive} {State} {Supervising} {Method} for {Power} {Data} {Blockchain} {Based} on {Relay} {Mechanism}},
	isbn = {978-1-4503-9576-2},
	url = {https://doi.org/10.1145/3532640.3532659},
	doi = {10.1145/3532640.3532659},
	abstract = {With the continuous advancement of Power Blockchain constructions, many domestic companies have established multiple blockchain applications such as Smart Contract, Smart Finance, Energy Cloud and so on. While blockchain is in the stage of developing, thus there exists a lot of problems on these established blockchain applications. Supervision on chain data is one of these problems and it is always difficult, in order to resolve this problem, we propose a supervising method based on relay mechanism to monitor the chain data adaptively and to detect and control the abnormal data timely. We generate the data according to the data structure of the power distribution automation system for anomaly detection. The experimental results show that the proposed supervision algorithm detects abnormal power data in time, and adaptively updates the algorithm parameters according to the changes of the data on the chain, ensuring the accuracy of the detection results, and can help the supervisory unit to supervise the data on chain.},
	booktitle = {The 2022 4th {International} {Conference} on {Blockchain} {Technology}},
	publisher = {Association for Computing Machinery},
	author = {Xue, Wenhao and Yang, Cheng and Wu, Zhuofan},
	year = {2022},
	note = {event-place: Shanghai, China},
	keywords = {Blockchain, Power Distribution Automation System, Relay Mechanism},
	pages = {137--143},
}

@inproceedings{jacobsen_blockchain_2018,
	address = {New York, NY, USA},
	series = {Middleware '18},
	title = {Blockchain {Landscape} and {AI} {Renaissance}: {The} {Bright} {Path} {Forward}},
	isbn = {978-1-4503-6073-9},
	url = {https://doi.org/10.1145/3279945.3279947},
	doi = {10.1145/3279945.3279947},
	abstract = {Known for powering cryptocurrencies such as Bitcoin and Ethereum, blockchain is seen as a disruptive technology capable of revolutionizing a wide variety of domains, ranging from finance to governance, by offering superior security, reliability, and transparency founded upon a decentralized and democratic computational model. In this tutorial, we first present the original Bitcoin design, along with Ethereum and Hyperledger, and reflect on their design choices through the academic lens. We further provide an overview of potential applications and associated research challenges, as well as a survey of ongoing research directions related to byzantine fault-tolerance consensus protocols. We highlight the new opportunities blockchain creates for building the next generation of secure middleware platforms and explore the possible interplay between AI and blockchains, or more specifically, how blockchain technology can enable the notion of "decentralized intelligence." We conclude with a walkthrough demonstrating the process of developing a decentralized application using a popular Smart Contract language (Solidity) over the Ethereum platform},
	booktitle = {Proceedings of the 19th {International} {Middleware} {Conference} {Tutorials}},
	publisher = {Association for Computing Machinery},
	author = {Jacobsen, Hans-Arno and Sadoghi, Mohammad and Tabatabaei, Mohammad Hossein and Vitenberg, Roman and Zhang, Kaiwen},
	year = {2018},
	note = {event-place: Rennes, France},
	keywords = {Blockchain, Ethereum, Consensus, Bitcoin, Hyperledger},
}

@inproceedings{sako_distributed_2022,
	address = {New York, NY, USA},
	series = {{BIOTC} '22},
	title = {Distributed {Random} {Number} {Generation} {Method} on {Smart} {Contracts}},
	isbn = {978-1-4503-9662-2},
	url = {https://doi.org/10.1145/3559795.3559796},
	doi = {10.1145/3559795.3559796},
	abstract = {We propose N-choice game (NCG), a decentralized pseudo-random number generation method that can be executed on smart contracts. Of the M participants, one is a dealer, and the rest are players, each with a different role. Each participant randomly chooses one value between 0 and N − 1 and receives a score determined by the NCG rule. The amount of reward each participant receives is determined by the score. The values chosen by the participants are combined and hashed into a pseudo-random number. The NCG framework is designed to achieve the following three goals: (1) Incentivize participants to provide random choices, (2) Evaluate the level of randomness in the decentralized environment, and (3) Establish high performance. We implement the NCG framework in Solidity and evaluate its performance. Our extensive experiments revealed that unless more than 90\% of NCG players collide, the generated random numbers have high randomness that can pass the NIST randomness test. The experiments also demonstrated that the throughput of random number generation in NCG was 129 times faster than in the existing framework, Random Bit Generator\&nbsp;[2].},
	booktitle = {Proceedings of the 2022 4th {Blockchain} and {Internet} of {Things} {Conference}},
	publisher = {Association for Computing Machinery},
	author = {Sako, Kentaro and Matsuo, Shinichiro and Mori, Tatsuya},
	year = {2022},
	note = {event-place: Tokyo, China},
	keywords = {blockchain, distributed random number generators, Smart Contracts},
	pages = {1--10},
}

@inproceedings{r_electric_2023,
	address = {New York, NY, USA},
	series = {{SenSys} '22},
	title = {Electric {Vehicle} as a {Virtual} {Mobile} {Power} {Plant} for {Smart} {Grid}: {A} {Blockchain} and {Cryptocurrency}-{Based} {Proof} of {Concept} {System}},
	isbn = {978-1-4503-9886-2},
	url = {https://doi.org/10.1145/3560905.3568178},
	doi = {10.1145/3560905.3568178},
	abstract = {Blockchain is the underlying technology for cryptocurrencies. Reliable machine-to-machine automatic transactions, such as auctions, bidding, and payments, utilise the immense potential of blockchain technology. Researchers are exploring blockchain-based applications for automobiles and transportation, such as electric vehicle (EV) charging and highway user fee payment. The use of blockchain eliminates the need for third parties in transactions. This paper presents a proof of concept for using EVs as energy storage in a smart grid system. Generators, consumers, and distributed energy resources (DER), such as solar and wind, make up the elements of a smart grid. We propose storing the surplus power generated by DER in the electric vehicle's battery. When the generation is less, or there is high demand, these EVs can supply the stored energy back to the grid. We use blockchain smart contracts and Ethereum cryptocurrency to monitor and monetise the process. We also make a cost comparison of conventional internal combustion engine (ICE) vehicles and EVs, analysing the financial benefits of employing the suggested method in EV charging instead of more conventional charging methods.},
	booktitle = {Proceedings of the 20th {ACM} {Conference} on {Embedded} {Networked} {Sensor} {Systems}},
	publisher = {Association for Computing Machinery},
	author = {R, Jivtesh M and Samuel, Rohit Mathew and R, Gaushik M and Menon, Siddhi and B, Sai Shibu N and Rao, Sethuraman N},
	year = {2023},
	note = {event-place: Boston, Massachusetts},
	keywords = {blockchain, charging station, energy sharing, energy trading, EV},
	pages = {1231--1232},
}

@inproceedings{shahriar_nftgan_2022,
	address = {New York, NY, USA},
	series = {{ICMLT} 2022},
	title = {{NFTGAN}: {Non}-{Fungible} {Token} {Art} {Generation} {Using} {Generative} {Adversarial} {Networks}},
	isbn = {978-1-4503-9574-8},
	url = {https://doi.org/10.1145/3529399.3529439},
	doi = {10.1145/3529399.3529439},
	abstract = {Digital arts have gained an unprecedented level of popularity with the emergence of non-fungible tokens (NFTs). NFTs are cryptographic assets that are stored on blockchain networks and represent a digital certificate of ownership that cannot be forged. NFTs can be incorporated into a smart contract which allows the owner to benefit from a future sale percentage. While digital art producers can benefit immensely with NFTs, their production is time consuming. Therefore, this paper explores the possibility of using generative adversarial networks (GANs) for automatic generation of digital arts. GANs are deep learning architectures that are widely and effectively used for synthesis of audio, images, and video contents. However, their application to NFT arts have been limited. In this paper, a GAN-based architecture is implemented and evaluated for novel NFT-style digital arts generation. Results from the qualitative case study indicate that the generated artworks are comparable to the real samples in terms of being interesting and inspiring and they were judged to be more innovative than real samples.},
	booktitle = {2022 7th {International} {Conference} on {Machine} {Learning} {Technologies} ({ICMLT})},
	publisher = {Association for Computing Machinery},
	author = {Shahriar, Sakib and Hayawi, Kadhim},
	year = {2022},
	note = {event-place: Rome, Italy},
	keywords = {blockchain, adversarial networks, deep learning, digital art generation, NFT},
	pages = {255--259},
}

@inproceedings{liu_learning_2023,
	address = {New York, NY, USA},
	series = {{ASE} '22},
	title = {Learning {Contract} {Invariants} {Using} {Reinforcement} {Learning}},
	isbn = {978-1-4503-9475-8},
	url = {https://doi.org/10.1145/3551349.3556962},
	doi = {10.1145/3551349.3556962},
	abstract = {Due to the popularity of smart contracts in the modern financial ecosystem, there has been growing interest in formally verifying their correctness and security properties. Most existing techniques in this space focus on common vulnerabilities like arithmetic overflows and perform verification by leveraging contract invariants (i.e., logical formulas hold at transaction boundaries). In this paper, we propose a new technique, based on deep reinforcement learning, for automatically learning contract invariants that are useful for proving arithmetic safety. Our method incorporates an off-line training phase in which the verifier uses its own verification attempts to learn a policy for contract invariant generation. This learned (neural) policy is then used at verification time to predict likely invariants that are also useful for proving arithmetic safety. We implemented this idea in a tool called Cider and incorporated it into an existing verifier (based on refinement type checking) for proving arithmetic safety. Our evaluation shows that Cider improves both the quality of the inferred invariants as well as inference time, leading to faster verification and hardened contracts with fewer run-time assertions.},
	booktitle = {Proceedings of the 37th {IEEE}/{ACM} {International} {Conference} on {Automated} {Software} {Engineering}},
	publisher = {Association for Computing Machinery},
	author = {Liu, Junrui and Chen, Yanju and Tan, Bryan and Dillig, Isil and Feng, Yu},
	year = {2023},
	note = {event-place: Rochester, MI, USA},
}

@inproceedings{zichichi_governing_2021,
	address = {New York, NY, USA},
	series = {{GoodIT} '21},
	title = {Governing {Decentralized} {Complex} {Queries} {Through} a {DAO}},
	isbn = {978-1-4503-8478-0},
	url = {https://doi.org/10.1145/3462203.3475910},
	doi = {10.1145/3462203.3475910},
	abstract = {Recently, a new generation of P2P systems capable of addressing data integrity and authenticity has emerged for the development of new applications for a "more" decentralized Internet, i.e., Distributed Ledger Technologies (DLT) and Decentralized File Systems (DFS). However, these technologies still have some unanswered issues, mostly related to data lookup and discovery. In this paper, first, we propose a Distributed Hash Table (DHT) system that efficiently manages decentralized keyword-based queries executed on data stored in DFS. Through a hypercube logical layout, queries are efficiently routed among the network, where each node is responsible for a specific keywords set and the related contents. Second, we provide a framework for the governance of the above network, based on a Decentralized Autonomous Organization (DAO) implementation. We show how the use of smart contracts enables organizational decision making and rewards for nodes that have actively contributed to the DHT. Finally, we provide experimental validation of an implementation of our proposal, where the execution of the same protocol for different logical nodes of the hypercube allows us to evaluate the efficiency of communication within the network.},
	booktitle = {Proceedings of the {Conference} on {Information} {Technology} for {Social} {Good}},
	publisher = {Association for Computing Machinery},
	author = {Zichichi, Mirko and Serena, Luca and Ferretti, Stefano and D'Angelo, Gabriele},
	year = {2021},
	note = {event-place: Roma, Italy},
	keywords = {Smart Contracts, Decentralized File Storage, Distributed Hash Table, Distributed Ledger Technology, Keyword Search},
	pages = {121--126},
}

@inproceedings{adlam_permissioned_2020,
	address = {New York, NY, USA},
	series = {{ICONIC} '20},
	title = {A {Permissioned} {Blockchain} {Approach} to {Electronic} {Health} {Record} {Audit} {Logs}},
	isbn = {978-1-4503-7558-0},
	url = {https://doi.org/10.1145/3415088.3415118},
	doi = {10.1145/3415088.3415118},
	abstract = {In recent years, electronic health records (EHRs) have been subject to data breaches; this indicates that the current EHR infrastructure is no longer suitable for safeguarding health records. Audit logs are one of the key processes in identifying culprits responsible for these data breaches. Audit logs are often tampered with to cover a criminal's tracks. Blockchain technology could provide a tamper-evident audit log process to improve the current EHR infrastructure. Hyperledger Fabric has been identified as a permissioned blockchain technology suited towards use-cases that require privacy. An experiment was conducted with Hyperledger Fabric to demonstrate how permissioned blockchain technology could be used to generate an audit trail for an EHR system. The proposed blockchain infrastructure is presented as a data-flow diagram and smart contracts were employed to explore the capabilities permissioned blockchain technology could provide in terms of improving the EHR audit log process. The result of the experiment revealed that permissioned blockchain technology could serve as an alternative to the audit log process employed by traditional EHRs.},
	booktitle = {Proceedings of the 2nd {International} {Conference} on {Intelligent} and {Innovative} {Computing} {Applications}},
	publisher = {Association for Computing Machinery},
	author = {Adlam, Ryno and Haskins, Bertram},
	year = {2020},
	note = {event-place: Plaine Magnien, Mauritius},
	keywords = {blockchain, audit log, electronic health records},
}

@inproceedings{bragagnolo_towards_2019,
	series = {{WETSEB} '19},
	title = {Towards {Scalable} {Blockchain} {Analysis}},
	url = {https://doi.org/10.1109/WETSEB.2019.00007},
	doi = {10.1109/WETSEB.2019.00007},
	abstract = {Analysing the blockchain is becoming more and more relevant for detecting attacks and frauds on cryptocurrency exchanges and smart contract activations. However, this is a challenging task due to the continuous growth of the blockchain. For example, in early 2017 Ethereum was estimated to contain approximately 300GB of data [1], a number that keeps growing day after day. In order to analyse such ever-growing amount of data, this paper argues that blockchain analysis should be treated as a novel type of application for Big Data platforms.In this paper we explore the application of parallelization techniques from the Big Data domain, in particular Map/Reduce, to extract and analyse information from the blockchain. We show that our approach significantly improves the index generation by 7.77 times, with a setup of 20 worker nodes, 1 Ethereum node and 1 Database node. We also share our findings of our massively parallel setup for querying Ethereum in terms of architecture and the bottlenecks. This should help researchers setup similar infrastructures for analysing the blockchain in the future.},
	booktitle = {Proceedings of the 2nd {International} {Workshop} on {Emerging} {Trends} in {Software} {Engineering} for {Blockchain}},
	publisher = {IEEE Press},
	author = {Bragagnolo, Santiago and Marra, Matteo and Polito, Guillermo and Boix, Elisa Gonzalez},
	year = {2019},
	note = {event-place: Montreal, Quebec, Canada},
	keywords = {blockchain, smart contracts, big data, map/reduce},
	pages = {1--7},
}

@inproceedings{gorbunov_pointproofs_2020,
	address = {New York, NY, USA},
	series = {{CCS} '20},
	title = {Pointproofs: {Aggregating} {Proofs} for {Multiple} {Vector} {Commitments}},
	isbn = {978-1-4503-7089-9},
	url = {https://doi.org/10.1145/3372297.3417244},
	doi = {10.1145/3372297.3417244},
	abstract = {Vector commitments enable a user to commit to a sequence of values and provably reveal one or many values at specific posi- tions at a later time. In this work, we construct Pointproofs? a new vector commitment scheme that supports non-interactive aggregation of proofs across multiple commitments. Our construction enables any third party to aggregate a collection of proofs with respect to different, independently computed commitments into a single proof represented by an elliptic curve point of 48-bytes. In addition, our scheme is hiding: a commitment and proofs for some values reveal no information about the remaining values. We build Pointproofs and demonstrate how to apply them to blockchain smart contracts. In our example application, Pointproofs reduce bandwidth overheads for propagating a block of transactions by at least 60\% compared to prior state- of-art vector commitments. Pointproofs are also efficient: on a single-thread, it takes 0.08 seconds to generate a proof for 8 values with respect to one commitment, 0.25 seconds to aggregate 4000 such proofs across multiple commitments into one proof, and 23 seconds (0.7 ms per value proven) to verify the aggregated proof.},
	booktitle = {Proceedings of the 2020 {ACM} {SIGSAC} {Conference} on {Computer} and {Communications} {Security}},
	publisher = {Association for Computing Machinery},
	author = {Gorbunov, Sergey and Reyzin, Leonid and Wee, Hoeteck and Zhang, Zhenfei},
	year = {2020},
	note = {event-place: Virtual Event, USA},
	keywords = {blockchain, smart contract, pairing based cryptography, pointproofs, vector commitment},
	pages = {2007--2023},
}

@inproceedings{six_using_2022,
	address = {New York, NY, USA},
	series = {{SPLC} '22},
	title = {Using {Software} {Product} {Lines} to {Create} {Blockchain} {Products}: {Application} to {Supply} {Chain} {Traceability}},
	isbn = {978-1-4503-9443-7},
	url = {https://doi.org/10.1145/3546932.3547001},
	doi = {10.1145/3546932.3547001},
	abstract = {In recent years, blockchain has been growing rapidly from a niche technology to a promising solution for many sectors, due to its unique properties that empower the design of innovative applications. Nevertheless, the development of blockchain applications is still a challenge. Due to the technological novelty, only a few developers are familiar with blockchain technologies and smart contracts. Others might face a steep learning curve or difficulties to reuse existing code to build blockchain applications. This study proposes a novel approach to tackle these issues, through software product line engineering. To support the approach, a web platform to configure and generate a blockchain application for on-chain traceability is introduced. First, a feature model has been designed to model core features of the chosen domain, based on the existing literature. Then, a configurator has been implemented to support the feature selection phase. Finally, a generator is able to ingest such configurations to generate on-the-shelf blockchain products. The generalizability of the contribution is validated by reproducing on-chain traceability applications proposed in the literature by using the platform. This work provides the first evidence that the implementation of blockchain applications using software product lines enhances the quality of produced applications and reduces the time to market.},
	booktitle = {Proceedings of the 26th {ACM} {International} {Systems} and {Software} {Product} {Line} {Conference} - {Volume} {A}},
	publisher = {Association for Computing Machinery},
	author = {Six, Nicolas and Herbaut, Nicolas and Lopez-Herrejon, Roberto Erick and Salinesi, Camille},
	year = {2022},
	note = {event-place: Graz, Austria},
	keywords = {blockchain, code generation, software product line},
	pages = {97--107},
}

@inproceedings{he_learning_2019,
	address = {New York, NY, USA},
	series = {{CCS} '19},
	title = {Learning to {Fuzz} from {Symbolic} {Execution} with {Application} to {Smart} {Contracts}},
	isbn = {978-1-4503-6747-9},
	url = {https://doi.org/10.1145/3319535.3363230},
	doi = {10.1145/3319535.3363230},
	abstract = {Fuzzing and symbolic execution are two complementary techniques for discovering software vulnerabilities. Fuzzing is fast and scalable, but can be ineffective when it fails to randomly select the right inputs. Symbolic execution is thorough but slow and often does not scale to deep program paths with complex path conditions. In this work, we propose to learn an effective and fast fuzzer from symbolic execution, by phrasing the learning task in the framework of imitation learning. During learning, a symbolic execution expert generates a large number of quality inputs improving coverage on thousands of programs. Then, a fuzzing policy, represented with a suitable architecture of neural networks, is trained on the generated dataset. The learned policy can then be used to fuzz new programs. We instantiate our approach to the problem of fuzzing smart contracts, a domain where contracts often implement similar functionality (facilitating learning) and security is of utmost importance. We present an end-to-end system, ILF (for Imitation Learning based Fuzzer), and an extensive evaluation over \&gt;18K contracts. Our results show that ILF is effective: (i) it is fast, generating 148 transactions per second, (ii) it outperforms existing fuzzers (e.g., achieving 33\% more coverage), and (iii) it detects more vulnerabilities than existing fuzzing and symbolic execution tools for Ethereum.},
	booktitle = {Proceedings of the 2019 {ACM} {SIGSAC} {Conference} on {Computer} and {Communications} {Security}},
	publisher = {Association for Computing Machinery},
	author = {He, Jingxuan and Balunović, Mislav and Ambroladze, Nodar and Tsankov, Petar and Vechev, Martin},
	year = {2019},
	note = {event-place: London, United Kingdom},
	keywords = {fuzzing, smart contracts, symbolic execution, imitation learning},
	pages = {531--548},
}

@inproceedings{evans-greenwood_distributed_2017,
	address = {Republic and Canton of Geneva, CHE},
	series = {{WWW} '17 {Companion}},
	title = {Distributed {Ledgers} \&amp; {Linked} {Data}},
	isbn = {978-1-4503-4914-7},
	url = {https://doi.org/10.1145/3041021.3053898},
	doi = {10.1145/3041021.3053898},
	abstract = {Distributed are increasing being thought of as a platform for decentralised applications – DApps – and the the focus for many is shifting from Bitcoin to Smart Contracts. It's thought that encoding contracts and putting them "on the blockchain" will result in a new generation of organisations that are leaner and more efficient than their forebears ("CApps"?"), disrupting these forebears in the process.However, the most interesting aspect of Bitcoin and blockchain is that it involved no new technology, no new math. Their emergence was due to changes in the environment: the price-performance and penetration of broadband networks reached a point that it was economically viable for a decentralised solution, such as Bitcoin to compete with traditional payment (international remittance) networks. This is combining with another trend – the shift from monolithic firms to multi-sided markets such as AirBnb et al and the rise of "platform businesses" – to enable a new class of solution to emerge. These new solutions enable firms to interact directly, without the need for a facilitator such as a market, exchange, or even a blockchain. In the past these facilitators were firms. More recently they have been "platform businesses". In the future they may not exist at all.},
	booktitle = {Proceedings of the 26th {International} {Conference} on {World} {Wide} {Web} {Companion}},
	publisher = {International World Wide Web Conferences Steering Committee},
	author = {Evans-Greenwood, Peter},
	year = {2017},
	note = {event-place: Perth, Australia},
	keywords = {blockchain, distributed ai, distributed ledgers, linked data},
	pages = {1451},
}

@inproceedings{patel_biouav_2020,
	address = {New York, NY, USA},
	series = {{DroneCom} '20},
	title = {{BioUAV}: {Blockchain}-{Envisioned} {Framework} for {Digital} {Identification} to {Secure} {Access} in next-{Generation} {UAVs}},
	isbn = {978-1-4503-8105-5},
	url = {https://doi.org/10.1145/3414045.3415945},
	doi = {10.1145/3414045.3415945},
	abstract = {Modern cloud-based UAV communications authenticate user identity through hash-based biometric authentication schemes, but are limited in scope due to high-end processing and user template matching delays, coupled with latency and storage overheads. Motivated from the aforementioned discussions, the paper proposes a BC- envisioned identity framework to secure next-generation UAV communication. In BioUAV, a dual layer of security is exploited. In the first layer, user identity registration to UAVs are done in BC through input random oracles, that generates diffusion in biometric values. The values are then fed to a transformation function that generates biocodes as second layer of authentication. Based on generated biocodes values, smart contracts (SC) are executed for transaction verification through encrypted wallets with user public/private pairs. For 80 biohashes, BioUAV has an overall latency of 22.5 milliseconds (ms), compared to 33.78 ms for conventional matching schemes. The framework has a accuracy of 98.37\% under receiver operating characteristic (ROC) curve, with an attack probability of less than 0.5 at a proposed low performance indicator (PI) of 0.48. For security evaluation, the computation cost (CC) of BioUAV is 144.58 ms, and communication cost (CCM) is 123 bytes, that indicates the viability of the proposed framework against conventional approaches.},
	booktitle = {Proceedings of the 2nd {ACM} {MobiCom} {Workshop} on {Drone} {Assisted} {Wireless} {Communications} for {5G} and {Beyond}},
	publisher = {Association for Computing Machinery},
	author = {Patel, Shivani Bharatbhai and Kheruwala, Hamza Abubakar and Alazab, Mamoun and Patel, Nikunj and Damani, Raj and Bhattacharya, Pronaya and Tanwar, Sudeep and Kumar, Neeraj},
	year = {2020},
	note = {event-place: London, United Kingdom},
	keywords = {blockchain, biocodes, biometrics, UAVs},
	pages = {43--48},
}

@inproceedings{shi_blockchain_2020,
	address = {New York, NY, USA},
	series = {{ICBTA} 2019},
	title = {A {Blockchain} and {SIFT} {Based} {System} for {Image} {Copyright} {Protection}},
	isbn = {978-1-4503-7743-0},
	url = {https://doi.org/10.1145/3376044.3376051},
	doi = {10.1145/3376044.3376051},
	abstract = {Internet technology has driven the dissemination revolution of images, but also makes the illegal reproduction and unauthorized use of images extremely rampant. At present, the registration of digital copyright of images should be authorized by authoritative management agencies. There are many problems, such as long audit cycle, no substantive review, difficulty in proof, high cost, centralized storage and so on. Based on blockchain technology and SIFT local feature extraction algorithm, this paper studies and implements a new generation of image digital copyright system. SIFT algorithm is used to extract the invariant features of image such as angle of view, brightness and rotation, etc. which will constitute the local feature vector set of the image, and these local feature vector sets are regarded as the only copyright basis of the image. Even if the image is modified by scaling, rotation and brightness, local features can still be extracted correctly, which can effectively prevent copyright registration of infringing images; Furthermore, IPFS (Inter-Planetary File System) was utilized for distributed storage of images' copyright features; Finally, Hyperledger Fabric and smart contract (chaincode) are used to realize copyright registration, copyright transfer and other functions. The experimental results show that the system has the advantages of automatic similar infringement detection, decentralized storage, tamper-proof and traceability.},
	booktitle = {Proceedings of the 2019 2nd {International} {Conference} on {Blockchain} {Technology} and {Applications}},
	publisher = {Association for Computing Machinery},
	author = {Shi, Jianfeng and Yi, Dian and Kuang, Jian},
	year = {2020},
	note = {event-place: Xi'an, China},
	keywords = {Blockchain, Smart Contract, Image Digital Copyright, SIFT},
	pages = {1--6},
}

@inproceedings{gao_towards_2019,
	series = {{ICPC} '19},
	title = {Towards {Automated} {Testing} of {Blockchain}-{Based} {Decentralized} {Applications}},
	url = {https://doi.org/10.1109/ICPC.2019.00048},
	doi = {10.1109/ICPC.2019.00048},
	abstract = {Blockchain-based decentralized applications (DApp) have been widely adopted in different areas and trusted by more and more users due to the fact that the back end code of a DApp is publicly run on the blockchain and cannot be modified implicitly. However, there are few effective methods and tools for testing DApps and bugs can be easily introduced by inexperienced developers. The existing testing techniques either focus on testing front-end programs or back-end code but ignore the interaction between them, which makes it difficult to apply the techniques directly on DApp. In this paper, we present an automated testing technique for DApps which works in a two-phase manner. First, we employ random events to infer an abstract relation between browser-side events and blockchain-side contracts. Second, our technique generates a set of test cases under the guidance of inferred relations and orders the test cases based on a read-write graph. We also use taint analysis to track data flow of the smart contract and feed it to the generation procedure for following test cases. We have developed a tool called Sungari to implement our approach, and evaluated it on representative real-world DApps. The preliminary evaluation results demonstrated the potential of Sungari in achieving a significant optimization compared to random testing approaches.},
	booktitle = {Proceedings of the 27th {International} {Conference} on {Program} {Comprehension}},
	publisher = {IEEE Press},
	author = {Gao, Jianbo and Liu, Han and Li, Yue and Liu, Chao and Yang, Zhiqiang and Li, Qingshan and Guan, Zhi and Chen, Zhong},
	year = {2019},
	note = {event-place: Montreal, Quebec, Canada},
	keywords = {blockchain, smart contract, decentralized application, dynamic testing},
	pages = {294--299},
}

@inproceedings{sarker_blockchain-based_2021,
	address = {New York, NY, USA},
	series = {{SAC} '21},
	title = {Blockchain-{Based} {Root} of {Trust} {Management} in {Security} {Credential} {Management} {System} for {Vehicular} {Communications}},
	isbn = {978-1-4503-8104-8},
	url = {https://doi.org/10.1145/3412841.3441905},
	doi = {10.1145/3412841.3441905},
	abstract = {Security Credential Management System (SCMS) provides the Public Key Infrastructure (PKI) for vehicular networking. SCMS builds the state-of-the-art distributed PKI to protect the vehicular networking privacy against an honest-but-curious authority (by the use of multiple PKI authorities) and to decentralize the PKI root of trust (by the Elector-Based Root Management or EBRM, having the distributed electors manage the Root Certificate Authority or RCA). We build on the EBRM architecture and construct a Blockchain-Based Root Management (BBRM) to provide even greater decentralization and security. More specifically, BBRM uses blockchain to i) replace the existing RCA and have the electors directly involved in the root certificate generation, ii) control the elector network membership including elector addition and revocation, and iii) provide greater accountability and transparency on the aforementioned functionalities. We implement BBRM on Hyperledger Fabric using smart contract for system experimentation and analyses. Our experiments show that BBRM is lightweight in processing, efficient in ledger size, and supports a bandwidth of multiple transactions per second. Our results show that the BBRM blockchain is appropriate for the root certificate generation and the elector membership control for EBRM within SCMS, which are significantly smaller in number and occurrences than the SCMS outputs of vehicle certificates. We also experiment to analyze how the BBRM distributed consensus protocol parameters, such as the number of electors and the number of required votes, affect the overall scheme's performances.},
	booktitle = {Proceedings of the 36th {Annual} {ACM} {Symposium} on {Applied} {Computing}},
	publisher = {Association for Computing Machinery},
	author = {Sarker, Arijet and Byun, SangHyun and Fan, Wenjun and Chang, Sang-Yoon},
	year = {2021},
	note = {event-place: Virtual Event, Republic of Korea},
	keywords = {blockchain, PKI, SCMS, vehicular networking},
	pages = {223--231},
}

@inproceedings{drakopoulos_thecog_2021,
	address = {New York, NY, USA},
	series = {{CIKM} '21},
	title = {{THECOG} - {Transforms} {In} {Behavioral} {And} {Affective} {Computing}},
	isbn = {978-1-4503-8446-9},
	url = {https://doi.org/10.1145/3459637.3482039},
	doi = {10.1145/3459637.3482039},
	abstract = {Human decision making is central in many functions across a broad spectrum of fields such as marketing, investment, smart contract formulations, political campaigns, and organizational strategic management. Behavioral economics seeks to study the psychological, cultural, and social factors contributing to decision making along reasoning. It should be highlighted here that behavioral economics do not negate classical economic theory but rather extend it in two distinct directions. First, a finer granularity can be obtained by studying the decision making process not of massive populations but instead of individuals and groups with signal estimation or deep learning techniques based on a wide array of attributes ranging from social media posts to physiological signs. Second, time becomes a critical parameter and changes to the disposition towards alternative decisions can be tracked with input-output or state space models. The primary findings so far are concepts like bounded rationality and perceived risk, while results include optimal strategies for various levels of information awareness and action strategies based on perceived loss aversion principles. From the above it follows that behavioral economics relies on deep learning, signal processing, control theory, social media analysis, affective computing, natural language processing, and gamification to name only a few fields. Therefore, it is directly tied to computer science in many ways. THECOG will be a central meeting point for researchers of various backgrounds in order to generate new interdisciplinary and groundbreaking results.},
	booktitle = {Proceedings of the 30th {ACM} {International} {Conference} on {Information} \&amp; {Knowledge} {Management}},
	publisher = {Association for Computing Machinery},
	author = {Drakopoulos, Georgios and Kafeza, Eleanna},
	year = {2021},
	note = {event-place: Virtual Event, Queensland, Australia},
	keywords = {affective state estimation, behavioral economics, computational affective models, data-driven strategy recommendation, perceived loss},
	pages = {4876--4877},
}

@inproceedings{drakopoulos_thecog_2022,
	address = {New York, NY, USA},
	series = {{CIKM} '22},
	title = {{THECOG} 2022 - {Transforms} {In} {Behavioral} {And} {Affective} {Computing} ({Revisited})},
	isbn = {978-1-4503-9236-5},
	url = {https://doi.org/10.1145/3511808.3557937},
	doi = {10.1145/3511808.3557937},
	abstract = {Human decision making is central in many functions across a broad spectrum of fields such as marketing, investment, smart contract formulations, political campaigns, and organizational strategic management. Behavioral economics seeks to study the psychological, cultural, and social factors contributing to decision making along reasoning. It should be highlighted here that behavioral economics do not negate classical economic theory but rather extend it in two distinct directions. First, a finer granularity can be obtained by studying the decision making process not of massive populations but instead of individuals and groups with signal estimation or deep learning techniques based on a wide array of attributes ranging from social media posts to physiological signs. Second, time becomes a critical parameter and changes to the disposition towards alternative decisions can be tracked with input-output or state space models. The primary findings so far are concepts like bounded rationality and perceived risk, while results include optimal strategies for various levels of information awareness and action strategies based on perceived loss aversion principles. From the above it follows that behavioral economics relies on deep learning, signal processing, control theory, social media analysis, affective computing, natural language processing, and gamification to name only a few fields. Therefore, it is directly tied to computer science in many ways. THECOG will be a central meeting point for researchers of various backgrounds in order to generate new interdisciplinary and groundbreaking results.},
	booktitle = {Proceedings of the 31st {ACM} {International} {Conference} on {Information} \&amp; {Knowledge} {Management}},
	publisher = {Association for Computing Machinery},
	author = {Drakopoulos, Georgios and Kafeza, Eleanna},
	year = {2022},
	note = {event-place: Atlanta, GA, USA},
	keywords = {affective state estimation, behavioral economics, computational affective models, data-driven strategy recommendation, perceived loss},
	pages = {5163--5164},
}

@article{issa_blockchain-based_2023,
	title = {Blockchain-{Based} {Federated} {Learning} for {Securing} {Internet} of {Things}: {A} {Comprehensive} {Survey}},
	volume = {55},
	issn = {0360-0300},
	url = {https://doi.org/10.1145/3560816},
	doi = {10.1145/3560816},
	abstract = {The Internet of Things (IoT) ecosystem connects physical devices to the internet, offering significant advantages in agility, responsiveness, and potential environmental benefits. The number and variety of IoT devices are sharply increasing, and as they do, they generate significant data sources. Deep learning (DL) algorithms are increasingly integrated into IoT applications to learn and infer patterns and make intelligent decisions. However, current IoT paradigms rely on centralized storage and computing to operate the DL algorithms. This key central component can potentially cause issues in scalability, security threats, and privacy breaches. Federated learning (FL) has emerged as a new paradigm for DL algorithms to preserve data privacy. Although FL helps reduce privacy leakage by avoiding transferring client data, it still has many challenges related to models’ vulnerabilities and attacks. With the emergence of blockchain and smart contracts, the utilization of these technologies has the potential to safeguard FL across IoT ecosystems. This study aims to review blockchain-based FL methods for securing IoT systems holistically. It presents the current state of research in blockchain, how it can be applied to FL approaches, current IoT security issues, and responses to outline the need to use emerging approaches toward the security and privacy of IoT ecosystems. It also focuses on IoT data analytics from a security perspective and the open research questions. It also provides a thorough literature review of blockchain-based FL approaches for IoT applications. Finally, the challenges and risks associated with integrating blockchain and FL in IoT are discussed to be considered in future works.},
	number = {9},
	journal = {ACM Comput. Surv.},
	author = {Issa, Wael and Moustafa, Nour and Turnbull, Benjamin and Sohrabi, Nasrin and Tari, Zahir},
	month = jan,
	year = {2023},
	note = {Place: New York, NY, USA
Publisher: Association for Computing Machinery},
	keywords = {Blockchain, Internet of Things (IoT), deep learning (DL), federated learning (FL), security of data analytics},
}

@inproceedings{chen_application_2021,
	address = {New York, NY, USA},
	series = {{EITCE} '20},
	title = {Application of {Homomorphic} {Encryption} in {Blockchain} {Data} {Security}},
	isbn = {978-1-4503-8781-1},
	url = {https://doi.org/10.1145/3443467.3443754},
	doi = {10.1145/3443467.3443754},
	abstract = {With the continuous development of the Internet era, people's demand for network security is increasingly high, information is an essential component of the network, which implies numerous privacy, secrets, but also contains a large number of value, thus generating a multiparty trust issues of data security. Blockchain technology itself is still in the early stages of rapid development, the existing blockchain system in the design and implementation of the use of distributed systems, cryptography, game theory, network protocols and many other disciplines, for learning the principles and practical applications have brought considerable challenges. The blockchain, with its decentralized quality, quickly captures the attention of the public and solves many security problems derived from data security, thus attracting wide attention from people. In recent years, along with the increasing maturity of homomorphic encryption technology and push new, it is more and more people's favour and attention.Homomorphic encryption is an encryption technology that provides the ability to perform various operations on data in an encrypted state without compromising its confidentiality. Its concern is the security of data processing. That is, others can process the encrypted data, but the process does not reveal any of the original content. Also, the user who has the Key decrypts the processed data and gets the result of the processing precisely.The main encryption technique used in blockchain applications is the RSA encryption algorithm, [1] which is used to ensure that the user's private key is not compromised, but no project has been noticed about the homomorphic encryption method for smart contracts. [2] The purpose of this paper is to analyze the principle of homomorphic encryption and discuss its practical application in data security in combination with blockchain technology.},
	booktitle = {Proceedings of the 2020 4th {International} {Conference} on {Electronic} {Information} {Technology} and {Computer} {Engineering}},
	publisher = {Association for Computing Machinery},
	author = {Chen, Jingjing and You, Fucheng},
	year = {2021},
	note = {event-place: Xiamen, China},
	keywords = {Blockchain technology, Data security, Homomorphic encryption},
	pages = {205--209},
}

@inproceedings{grieco_echidna_2020-1,
	address = {New York, NY, USA},
	series = {{ISSTA} 2020},
	title = {Echidna: {Effective}, {Usable}, and {Fast} {Fuzzing} for {Smart} {Contracts}},
	isbn = {978-1-4503-8008-9},
	url = {https://doi.org/10.1145/3395363.3404366},
	doi = {10.1145/3395363.3404366},
	abstract = {Ethereum smart contracts—autonomous programs that run on a blockchain—often control transactions of financial and intellectual property. Because of the critical role they play, smart contracts need complete, comprehensive, and effective test generation. This paper introduces an open-source smart contract fuzzer called Echidna that makes it easy to automatically generate tests to detect violations in assertions and custom properties. Echidna is easy to install and does not require a complex configuration or deployment of contracts to a local blockchain. It offers responsive feedback, captures many property violations, and its default settings are calibrated based on experimental data. To date, Echidna has been used in more than 10 large paid security audits, and feedback from those audits has driven the features and user experience of Echidna, both in terms of practical usability (e.g., smart contract frameworks like Truffle and Embark) and test generation strategies. Echidna aims to be good at finding real bugs in smart contracts, with minimal user effort and maximal speed.},
	booktitle = {Proceedings of the 29th {ACM} {SIGSOFT} {International} {Symposium} on {Software} {Testing} and {Analysis}},
	publisher = {Association for Computing Machinery},
	author = {Grieco, Gustavo and Song, Will and Cygan, Artur and Feist, Josselin and Groce, Alex},
	year = {2020},
	note = {event-place: Virtual Event, USA},
	keywords = {fuzzing, smart contracts, test generation},
	pages = {557--560},
}

@inproceedings{santiago_gifflar_2021-2,
	address = {USA},
	series = {{CASCON} '21},
	title = {Gifflar: {A} {Framework} to {Generate} {Smart} {Contracts} on the {Fly}},
	abstract = {Blockchain is a disruptive technology that offers a secure decentralized network, allowing for direct transactions between distributed entities, without the need for a trusted third party. Smart contracts are executable codes hosted on the blockchain which enables the implementation of several decentralized applications, in different domains. Due to the complexity of the contract's construction, it is necessary to seek ways to facilitate and make this innovative development process robust. This paper presents Gifflar, a framework for generating smart contract code on the fly, in such a way that it allows a system to write, compile and implement blockchain contracts with a decentralized application still running. The framework is structured in components that implement design patterns to better define the responsibility of each one of the parts and exports a simple interaction module for modeling contracts in JSON and automatic code writing using the TypeScript language. As far as we know, this framework is one of the first to allow contract code generation dynamically at run time. Thus, the work contributes to the state of the art by addressing a new paradigm, where systems can act as smart contract developers.},
	booktitle = {Proceedings of the 31st {Annual} {International} {Conference} on {Computer} {Science} and {Software} {Engineering}},
	publisher = {IBM Corp.},
	author = {Santiago, Levy and Abijaude, Jauberth Weyll and Greve, Fabíola},
	year = {2021},
	note = {event-place: Toronto, Canada},
	keywords = {blockchain, code generation, framework, smart contract},
	pages = {214--219},
}

@inproceedings{santiago_framework_2021-2,
	address = {New York, NY, USA},
	series = {{SBES} '21},
	title = {A {Framework} to {Generate} {Smart} {Contracts} {On} the {Fly}},
	isbn = {978-1-4503-9061-3},
	url = {https://doi.org/10.1145/3474624.3477068},
	doi = {10.1145/3474624.3477068},
	abstract = {Blockchain is a disruptive technology that offers a secure decentralized network, and allows for direct transactions between distributed entities, without the need for a trusted third party. Smart contracts are executable codes hosted on the blockchain and enable the implementation of several decentralized applications, in different domains. However, due to the complexity of contract construction, it is necessary to seek ways to facilitate and make this innovative development process robust. This paper presents Gifflar, a framework for generating smart contract code on the fly, in such a way that it allows a system to write, compile and implement blockchain contracts with a decentralized application still running. Gifflar is structured in components that implement design patterns to better define the responsibility of each one of the parts and exports a simple interaction module for contract modeling in JSON and automatic code writing using the TypeScript language. As far as we know, this framework is one of the first to generate contracts dynamically at run time. Thus, the work contributes to the state of the art by addressing a new paradigm, where systems can act as smart contract developers.},
	booktitle = {Proceedings of the {XXXV} {Brazilian} {Symposium} on {Software} {Engineering}},
	publisher = {Association for Computing Machinery},
	author = {Santiago, Levy and Abijaude, Jauberth and Greve, Fabíola},
	year = {2021},
	note = {event-place: Joinville, Brazil},
	keywords = {Blockchain, Code Generation, Framework, Smart Contract},
	pages = {410--415},
}

@inproceedings{hu_symboleo2sc_2022,
	address = {New York, NY, USA},
	series = {{MODELS} '22},
	title = {{Symboleo2SC}: {From} {Legal} {Contract} {Specifications} to {Smart} {Contracts}},
	isbn = {978-1-4503-9466-6},
	url = {https://doi.org/10.1145/3550355.3552407},
	doi = {10.1145/3550355.3552407},
	abstract = {Smart contracts (SCs) are software systems that monitor and control the execution of legal contracts to ensure compliance with the contracts' terms and conditions. They often exploit Internet-of-Things technologies to support their monitoring functions, and blockchain technology to ensure the integrity of their data. Ethereum and business blockchain platforms, such as Hyperledger Fabric, are popular choices for SC development. However, there is a gap in the knowledge of SCs between developers and legal experts. Symboleo is a formal specification language for legal contracts that was introduced to address this issue. Symboleo specifications directly encode legal concepts such as parties, obligations, and powers. In this paper, we propose a tool-supported method for translating Symboleo specifications into smart contracts. We have extended the current Symboleo IDE, implemented the ontology and semantics of Symboleo into a reusable library, and developed the Symboleo2SC tool to generate Hyperledger Fabric code exploiting this library. Symboleo2SC was evaluated with three sample contracts. The results shows that legal contract specifications in Symboleo can be fully converted to SCs for monitoring purposes. Moreover, Symboleo2SC helps simplify the SC development process, saves development effort, and helps reduce risks of coding errors.},
	booktitle = {Proceedings of the 25th {International} {Conference} on {Model} {Driven} {Engineering} {Languages} and {Systems}},
	publisher = {Association for Computing Machinery},
	author = {Hu, Xing and Gao, Zhipeng and Xia, Xin and Lo, David and Yang, Xiaohu and Rasti, Aidin and Amyot, Daniel and Parvizimosaed, Alireza and Roveri, Marco and Logrippo, Luigi and Anda, Amal Ahmed and Mylopoulos, John},
	year = {2022},
	note = {event-place: Montreal, Quebec, Canada},
	keywords = {blockchain, code generation, smart contracts, domain-specific languages, legal ontology},
	pages = {300--310},
}

@inproceedings{pani_smartfuzzdrivergen_2023-1,
	address = {New York, NY, USA},
	series = {{ISEC} '23},
	title = {{SmartFuzzDriverGen}: {Smart} {Contract} {Fuzzing} {Automation} for {Golang}},
	isbn = {9798400700644},
	url = {https://doi.org/10.1145/3578527.3578538},
	doi = {10.1145/3578527.3578538},
	abstract = {Greybox fuzzers require intermediate programs called fuzz drivers to test smart contract APIs. These fuzz drivers use the semi-random inputs (bytes) generated by fuzzers to prepare suitable inputs required to test APIs. Further, fuzz driver also uses this input to decide sequence in which APIs to be invoked and enables the fuzzer to execute the APIs in that sequence to find the vulnerabilities, if any. Manually writing such complex and intelligent fuzz drivers is laborious, requires deep technical skills, hence can be cumbersome and error prone. In this paper, we propose SmartFuzzDriverGen framework to automatically generate fuzz drivers which invoke smart contract APIs using different strategies: unit-level, sequence-based (random, user-defined), and heuristics based. We evaluate the proposed framework by testing a prototype implementation of it with Golang smart contracts (targeted for Hyperledger Fabric platform) and study the effectiveness of the generated fuzz drivers in terms of code coverage as well as bug finding abilities. We observed that fuzzing of APIs in random sequences performed better than the other methods.},
	booktitle = {Proceedings of the 16th {Innovations} in {Software} {Engineering} {Conference}},
	publisher = {Association for Computing Machinery},
	author = {Pani, Siddhasagar and Nallagonda, Harshita Vani and {Vigneswaran} and Medicherla, Raveendra Kumar and M, Rajan},
	year = {2023},
	note = {event-place: Allahabad, India},
	keywords = {blockchain, fuzzing, smart contracts, automated driver generation, sequencing, vulnerability detection},
}

@inproceedings{zhang_adf-ga_2020-2,
	address = {New York, NY, USA},
	series = {{ICSEW}'20},
	title = {{ADF}-{GA}: {Data} {Flow} {Criterion} {Based} {Test} {Case} {Generation} for {Ethereum} {Smart} {Contracts}},
	isbn = {978-1-4503-7963-2},
	url = {https://doi.org/10.1145/3387940.3391499},
	doi = {10.1145/3387940.3391499},
	abstract = {Testing is an important technique to improve the quality of Ethereum smart contract programs. However, current work on testing smart contract only focus on static problems of smart contract programs. A data flow oriented test case generation approach for dynamic testing of smart contract programs is still missing. To address this problem, this paper proposes a novel test case generation approach, called ADF-GA (All-uses Data Flow criterion based test case generation using Genetic Algorithm), for Solidity based Ethereum smart contract programs. ADF-GA aims to efficiently generate a valid set of test cases via three stages. First, the corresponding program control flow graph is constructed from the source codes. Second, the generated control flow graph is analyzed to obtain the variable information in the Solidity programs, locate the require statements, and also get the definition-use pairs to be tested. Finally, a genetic algorithm is used to generate test cases, in which an improved fitness function is proposed to calculate the definition-use pairs coverage of each test case with program instrumentation. Experimental studies are performed on several representative Solidity programs. The results show that ADF-GA can effectively generate test cases, achieve better coverage, and reduce the number of iterations in genetic algorithm.},
	booktitle = {Proceedings of the {IEEE}/{ACM} 42nd {International} {Conference} on {Software} {Engineering} {Workshops}},
	publisher = {Association for Computing Machinery},
	author = {Zhang, Pengcheng and Yu, Jianan and Ji, Shunhui},
	year = {2020},
	note = {event-place: Seoul, Republic of Korea},
	keywords = {blockchain, Solidity, smart contract, test case generation, fitness function, genetic algorithm},
	pages = {754--761},
}

@inproceedings{olsthoorn_syntest-solidity_2022-2,
	address = {New York, NY, USA},
	series = {{ICSE} '22},
	title = {{SynTest}-{Solidity}: {Automated} {Test} {Case} {Generation} and {Fuzzing} for {Smart} {Contracts}},
	isbn = {978-1-4503-9223-5},
	url = {https://doi.org/10.1145/3510454.3516869},
	doi = {10.1145/3510454.3516869},
	abstract = {Ethereum is the largest and most prominent smart contract platform. One key property of Ethereum is that once a contract is deployed, it can not be updated anymore. This increases the importance of thoroughly testing the behavior and constraints of the smart contract before deployment. Existing approaches in related work either do not scale or are only focused on finding crashing inputs. In this tool demo, we introduce SynTest-Solidity, an automated test case generation and fuzzing framework for Solidity. SynTest-Solidity implements various metaheuristic search algorithms, including random search (traditional fuzzing) and genetic algorithms (i.e., NSGA-II, MOSA, and DynaMOSA). Finally, we performed a preliminary empirical study to assess the effectiveness of SynTest-Solidity in testing Solidity smart contracts.},
	booktitle = {Proceedings of the {ACM}/{IEEE} 44th {International} {Conference} on {Software} {Engineering}: {Companion} {Proceedings}},
	publisher = {Association for Computing Machinery},
	author = {Olsthoorn, Mitchell and Stallenberg, Dimitri and van Deursen, Arie and Panichella, Annibale},
	year = {2022},
	note = {event-place: Pittsburgh, Pennsylvania},
	keywords = {fuzzing, search-based software testing, smart contracts, software testing, test case generation},
	pages = {202--206},
}

@inproceedings{akca_testing_2021-1,
	address = {New York, NY, USA},
	series = {{ESEM} '21},
	title = {Testing {Smart} {Contracts}: {Which} {Technique} {Performs} {Best}?},
	isbn = {978-1-4503-8665-4},
	url = {https://doi.org/10.1145/3475716.3475779},
	doi = {10.1145/3475716.3475779},
	abstract = {Background: Executing, verifying and enforcing credible transactions on permissionless blockchains is done using smart contracts. A key challenge with smart contracts is ensuring their correctness and security. Several test input generation techniques for detecting vulnerabilities in smart contracts have been proposed in the last few years. However, a comparison of proposed techniques to gauge their effectiveness is missing. Aim: This paper conducts an empirical evaluation of testing techniques for smart contracts. The testing techniques we evaluated are: (1) Blackbox fuzzing, (2) Adaptive fuzzing, (3) Coverage-guided fuzzing with an SMT solver and (4) Genetic algorithm. We do not consider static analysis tools, as several recent studies have assessed and compared effectiveness of these tools. Method: We evaluate effectiveness of the test generation techniques using (1) Coverage achieved - we use four code coverage metrics targeting smart contracts, (2) Fault finding ability - using artificially seeded and real security vulnerabilities of different types. We used two datasets in our evaluation - one with 1665 real smart contracts from Etherscan, and another with 90 real contracts with known vulnerabilities to assess fault finding ability. Result: We find Adaptive fuzzing performs best in terms of coverage and fault finding over contracts in both datasets. Conclusion: However, we believe considering dependencies between functions and handling Solidity specific features will help improve the performance of all techniques considerably.},
	booktitle = {Proceedings of the 15th {ACM} / {IEEE} {International} {Symposium} on {Empirical} {Software} {Engineering} and {Measurement} ({ESEM})},
	publisher = {Association for Computing Machinery},
	author = {Akca, Sefa and Peng, Chao and Rajan, Ajitha},
	year = {2021},
	note = {event-place: Bari, Italy},
	keywords = {Blockchain, Ethereum, Smart Contract, Constraint Solver, Fault Seeding, Fuzzer, Genetic Algorithm, Input Generation},
}
